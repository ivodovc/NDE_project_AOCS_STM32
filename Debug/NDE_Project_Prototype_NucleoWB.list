
NDE_Project_Prototype_NucleoWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000840c  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08008550  08008550  00009550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080086d0  080086d0  000096d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080086d8  080086d8  000096d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080086dc  080086dc  000096dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  20000008  080086e0  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000066c  2000008c  08008764  0000a08c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006f8  08008764  0000a6f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d588  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000038c9  00000000  00000000  00027644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e18  00000000  00000000  0002af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001742  00000000  00000000  0002cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025489  00000000  00000000  0002e46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e01d  00000000  00000000  000538f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000eaa9e  00000000  00000000  00071910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0015c3ae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a0c  00000000  00000000  0015c3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  00164e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000008c 	.word	0x2000008c
 800015c:	00000000 	.word	0x00000000
 8000160:	08008534 	.word	0x08008534

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000090 	.word	0x20000090
 800017c:	08008534 	.word	0x08008534

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2f>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a60:	bf24      	itt	cs
 8000a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6a:	d90d      	bls.n	8000a88 <__aeabi_d2f+0x30>
 8000a6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a80:	bf08      	it	eq
 8000a82:	f020 0001 	biceq.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a8c:	d121      	bne.n	8000ad2 <__aeabi_d2f+0x7a>
 8000a8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a92:	bfbc      	itt	lt
 8000a94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	4770      	bxlt	lr
 8000a9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa2:	f1c2 0218 	rsb	r2, r2, #24
 8000aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aae:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	f040 0001 	orrne.w	r0, r0, #1
 8000ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac4:	ea40 000c 	orr.w	r0, r0, ip
 8000ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8000acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad0:	e7cc      	b.n	8000a6c <__aeabi_d2f+0x14>
 8000ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad6:	d107      	bne.n	8000ae8 <__aeabi_d2f+0x90>
 8000ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000adc:	bf1e      	ittt	ne
 8000ade:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ae6:	4770      	bxne	lr
 8000ae8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_uldivmod>:
 8000af8:	b953      	cbnz	r3, 8000b10 <__aeabi_uldivmod+0x18>
 8000afa:	b94a      	cbnz	r2, 8000b10 <__aeabi_uldivmod+0x18>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bf08      	it	eq
 8000b00:	2800      	cmpeq	r0, #0
 8000b02:	bf1c      	itt	ne
 8000b04:	f04f 31ff 	movne.w	r1, #4294967295
 8000b08:	f04f 30ff 	movne.w	r0, #4294967295
 8000b0c:	f000 b988 	b.w	8000e20 <__aeabi_idiv0>
 8000b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b18:	f000 f806 	bl	8000b28 <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4770      	bx	lr

08000b28 <__udivmoddi4>:
 8000b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b2c:	9d08      	ldr	r5, [sp, #32]
 8000b2e:	468e      	mov	lr, r1
 8000b30:	4604      	mov	r4, r0
 8000b32:	4688      	mov	r8, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14a      	bne.n	8000bce <__udivmoddi4+0xa6>
 8000b38:	428a      	cmp	r2, r1
 8000b3a:	4617      	mov	r7, r2
 8000b3c:	d962      	bls.n	8000c04 <__udivmoddi4+0xdc>
 8000b3e:	fab2 f682 	clz	r6, r2
 8000b42:	b14e      	cbz	r6, 8000b58 <__udivmoddi4+0x30>
 8000b44:	f1c6 0320 	rsb	r3, r6, #32
 8000b48:	fa01 f806 	lsl.w	r8, r1, r6
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	40b7      	lsls	r7, r6
 8000b52:	ea43 0808 	orr.w	r8, r3, r8
 8000b56:	40b4      	lsls	r4, r6
 8000b58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b5c:	fa1f fc87 	uxth.w	ip, r7
 8000b60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b64:	0c23      	lsrs	r3, r4, #16
 8000b66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0x62>
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b7c:	f080 80ea 	bcs.w	8000d54 <__udivmoddi4+0x22c>
 8000b80:	429a      	cmp	r2, r3
 8000b82:	f240 80e7 	bls.w	8000d54 <__udivmoddi4+0x22c>
 8000b86:	3902      	subs	r1, #2
 8000b88:	443b      	add	r3, r7
 8000b8a:	1a9a      	subs	r2, r3, r2
 8000b8c:	b2a3      	uxth	r3, r4
 8000b8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b9e:	459c      	cmp	ip, r3
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0x8e>
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba8:	f080 80d6 	bcs.w	8000d58 <__udivmoddi4+0x230>
 8000bac:	459c      	cmp	ip, r3
 8000bae:	f240 80d3 	bls.w	8000d58 <__udivmoddi4+0x230>
 8000bb2:	443b      	add	r3, r7
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bba:	eba3 030c 	sub.w	r3, r3, ip
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	b11d      	cbz	r5, 8000bca <__udivmoddi4+0xa2>
 8000bc2:	40f3      	lsrs	r3, r6
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d905      	bls.n	8000bde <__udivmoddi4+0xb6>
 8000bd2:	b10d      	cbz	r5, 8000bd8 <__udivmoddi4+0xb0>
 8000bd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	e7f5      	b.n	8000bca <__udivmoddi4+0xa2>
 8000bde:	fab3 f183 	clz	r1, r3
 8000be2:	2900      	cmp	r1, #0
 8000be4:	d146      	bne.n	8000c74 <__udivmoddi4+0x14c>
 8000be6:	4573      	cmp	r3, lr
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xc8>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 8105 	bhi.w	8000dfa <__udivmoddi4+0x2d2>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	4690      	mov	r8, r2
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e5      	beq.n	8000bca <__udivmoddi4+0xa2>
 8000bfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000c02:	e7e2      	b.n	8000bca <__udivmoddi4+0xa2>
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	f000 8090 	beq.w	8000d2a <__udivmoddi4+0x202>
 8000c0a:	fab2 f682 	clz	r6, r2
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	f040 80a4 	bne.w	8000d5c <__udivmoddi4+0x234>
 8000c14:	1a8a      	subs	r2, r1, r2
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	b2bc      	uxth	r4, r7
 8000c20:	2101      	movs	r1, #1
 8000c22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x11e>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c3c:	d202      	bcs.n	8000c44 <__udivmoddi4+0x11c>
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	f200 80e0 	bhi.w	8000e04 <__udivmoddi4+0x2dc>
 8000c44:	46c4      	mov	ip, r8
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c54:	fb02 f404 	mul.w	r4, r2, r4
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x144>
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x142>
 8000c64:	429c      	cmp	r4, r3
 8000c66:	f200 80ca 	bhi.w	8000dfe <__udivmoddi4+0x2d6>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c72:	e7a5      	b.n	8000bc0 <__udivmoddi4+0x98>
 8000c74:	f1c1 0620 	rsb	r6, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c7e:	431f      	orrs	r7, r3
 8000c80:	fa0e f401 	lsl.w	r4, lr, r1
 8000c84:	fa20 f306 	lsr.w	r3, r0, r6
 8000c88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fa00 f801 	lsl.w	r8, r0, r1
 8000c96:	fa1f fc87 	uxth.w	ip, r7
 8000c9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ca8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x1a0>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cba:	f080 809c 	bcs.w	8000df6 <__udivmoddi4+0x2ce>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f240 8099 	bls.w	8000df6 <__udivmoddi4+0x2ce>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	fa1f fe83 	uxth.w	lr, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cdc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce0:	45a4      	cmp	ip, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1ce>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cea:	f080 8082 	bcs.w	8000df2 <__udivmoddi4+0x2ca>
 8000cee:	45a4      	cmp	ip, r4
 8000cf0:	d97f      	bls.n	8000df2 <__udivmoddi4+0x2ca>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	443c      	add	r4, r7
 8000cf6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfa:	eba4 040c 	sub.w	r4, r4, ip
 8000cfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d02:	4564      	cmp	r4, ip
 8000d04:	4673      	mov	r3, lr
 8000d06:	46e1      	mov	r9, ip
 8000d08:	d362      	bcc.n	8000dd0 <__udivmoddi4+0x2a8>
 8000d0a:	d05f      	beq.n	8000dcc <__udivmoddi4+0x2a4>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x1fe>
 8000d0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d12:	eb64 0409 	sbc.w	r4, r4, r9
 8000d16:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d1e:	431e      	orrs	r6, r3
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	e9c5 6400 	strd	r6, r4, [r5]
 8000d26:	2100      	movs	r1, #0
 8000d28:	e74f      	b.n	8000bca <__udivmoddi4+0xa2>
 8000d2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d2e:	0c01      	lsrs	r1, r0, #16
 8000d30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d34:	b280      	uxth	r0, r0
 8000d36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4638      	mov	r0, r7
 8000d3e:	463c      	mov	r4, r7
 8000d40:	46b8      	mov	r8, r7
 8000d42:	46be      	mov	lr, r7
 8000d44:	2620      	movs	r6, #32
 8000d46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4a:	eba2 0208 	sub.w	r2, r2, r8
 8000d4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d52:	e766      	b.n	8000c22 <__udivmoddi4+0xfa>
 8000d54:	4601      	mov	r1, r0
 8000d56:	e718      	b.n	8000b8a <__udivmoddi4+0x62>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	e72c      	b.n	8000bb6 <__udivmoddi4+0x8e>
 8000d5c:	f1c6 0220 	rsb	r2, r6, #32
 8000d60:	fa2e f302 	lsr.w	r3, lr, r2
 8000d64:	40b7      	lsls	r7, r6
 8000d66:	40b1      	lsls	r1, r6
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	430a      	orrs	r2, r1
 8000d72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d76:	b2bc      	uxth	r4, r7
 8000d78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d7c:	0c11      	lsrs	r1, r2, #16
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb08 f904 	mul.w	r9, r8, r4
 8000d86:	40b0      	lsls	r0, r6
 8000d88:	4589      	cmp	r9, r1
 8000d8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d8e:	b280      	uxth	r0, r0
 8000d90:	d93e      	bls.n	8000e10 <__udivmoddi4+0x2e8>
 8000d92:	1879      	adds	r1, r7, r1
 8000d94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d98:	d201      	bcs.n	8000d9e <__udivmoddi4+0x276>
 8000d9a:	4589      	cmp	r9, r1
 8000d9c:	d81f      	bhi.n	8000dde <__udivmoddi4+0x2b6>
 8000d9e:	eba1 0109 	sub.w	r1, r1, r9
 8000da2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da6:	fb09 f804 	mul.w	r8, r9, r4
 8000daa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dae:	b292      	uxth	r2, r2
 8000db0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db4:	4542      	cmp	r2, r8
 8000db6:	d229      	bcs.n	8000e0c <__udivmoddi4+0x2e4>
 8000db8:	18ba      	adds	r2, r7, r2
 8000dba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dbe:	d2c4      	bcs.n	8000d4a <__udivmoddi4+0x222>
 8000dc0:	4542      	cmp	r2, r8
 8000dc2:	d2c2      	bcs.n	8000d4a <__udivmoddi4+0x222>
 8000dc4:	f1a9 0102 	sub.w	r1, r9, #2
 8000dc8:	443a      	add	r2, r7
 8000dca:	e7be      	b.n	8000d4a <__udivmoddi4+0x222>
 8000dcc:	45f0      	cmp	r8, lr
 8000dce:	d29d      	bcs.n	8000d0c <__udivmoddi4+0x1e4>
 8000dd0:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dd8:	3801      	subs	r0, #1
 8000dda:	46e1      	mov	r9, ip
 8000ddc:	e796      	b.n	8000d0c <__udivmoddi4+0x1e4>
 8000dde:	eba7 0909 	sub.w	r9, r7, r9
 8000de2:	4449      	add	r1, r9
 8000de4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000de8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dec:	fb09 f804 	mul.w	r8, r9, r4
 8000df0:	e7db      	b.n	8000daa <__udivmoddi4+0x282>
 8000df2:	4673      	mov	r3, lr
 8000df4:	e77f      	b.n	8000cf6 <__udivmoddi4+0x1ce>
 8000df6:	4650      	mov	r0, sl
 8000df8:	e766      	b.n	8000cc8 <__udivmoddi4+0x1a0>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e6fd      	b.n	8000bfa <__udivmoddi4+0xd2>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3a02      	subs	r2, #2
 8000e02:	e733      	b.n	8000c6c <__udivmoddi4+0x144>
 8000e04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e08:	443b      	add	r3, r7
 8000e0a:	e71c      	b.n	8000c46 <__udivmoddi4+0x11e>
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	e79c      	b.n	8000d4a <__udivmoddi4+0x222>
 8000e10:	eba1 0109 	sub.w	r1, r1, r9
 8000e14:	46c4      	mov	ip, r8
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	e7c4      	b.n	8000daa <__udivmoddi4+0x282>

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <init_fan>:
 uint32_t *INC;
 uint32_t *IND;


void init_fan(uint32_t* motor_PWM_INA, uint32_t* motor_PWM_INB, uint32_t* motor_PWM_INC, uint32_t* motor_PWM_IND)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	603b      	str	r3, [r7, #0]
	INA = motor_PWM_INA;
 8000e32:	4a11      	ldr	r2, [pc, #68]	@ (8000e78 <init_fan+0x54>)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6013      	str	r3, [r2, #0]
	INB = motor_PWM_INB;
 8000e38:	4a10      	ldr	r2, [pc, #64]	@ (8000e7c <init_fan+0x58>)
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	6013      	str	r3, [r2, #0]
	INC = motor_PWM_INC;
 8000e3e:	4a10      	ldr	r2, [pc, #64]	@ (8000e80 <init_fan+0x5c>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6013      	str	r3, [r2, #0]
	IND = motor_PWM_IND;
 8000e44:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <init_fan+0x60>)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	6013      	str	r3, [r2, #0]
	*INA = 0;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <init_fan+0x54>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
	*INB = 0;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <init_fan+0x58>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
	*INC = 0;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <init_fan+0x5c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
	*IND = 0;
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <init_fan+0x60>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200000a8 	.word	0x200000a8
 8000e7c:	200000ac 	.word	0x200000ac
 8000e80:	200000b0 	.word	0x200000b0
 8000e84:	200000b4 	.word	0x200000b4

08000e88 <set_fan_speed>:

// speed has to be integer from -1000 to 1000
void set_fan_speed(int16_t speed){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
	if (0 <= speed && speed <= 1000){
 8000e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0e      	blt.n	8000eb8 <set_fan_speed+0x30>
 8000e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea2:	dc09      	bgt.n	8000eb8 <set_fan_speed+0x30>
		*INB = 0;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <set_fan_speed+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
		*INA = speed;
 8000eac:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <set_fan_speed+0x68>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000eb4:	601a      	str	r2, [r3, #0]
	}else if (-1000 <= speed && speed < 0){
		*INA = 0;
		*INB = -1*speed;
	}
}
 8000eb6:	e012      	b.n	8000ede <set_fan_speed+0x56>
	}else if (-1000 <= speed && speed < 0){
 8000eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ebc:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000ec0:	db0d      	blt.n	8000ede <set_fan_speed+0x56>
 8000ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da09      	bge.n	8000ede <set_fan_speed+0x56>
		*INA = 0;
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <set_fan_speed+0x68>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
		*INB = -1*speed;
 8000ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed6:	425a      	negs	r2, r3
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <set_fan_speed+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200000ac 	.word	0x200000ac
 8000ef0:	200000a8 	.word	0x200000a8

08000ef4 <set_fan_speed2>:

void set_fan_speed2(int16_t speed2){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
	if (0 <= speed2 && speed2 <= 1000){
 8000efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0e      	blt.n	8000f24 <set_fan_speed2+0x30>
 8000f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f0e:	dc09      	bgt.n	8000f24 <set_fan_speed2+0x30>
		*IND = 0;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <set_fan_speed2+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
		*INC = speed2;
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <set_fan_speed2+0x68>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f20:	601a      	str	r2, [r3, #0]
	}else if (-1000 <= speed2 && speed2 < 0){
		*INC = 0;
		*IND = -1*speed2;
	}
}
 8000f22:	e012      	b.n	8000f4a <set_fan_speed2+0x56>
	}else if (-1000 <= speed2 && speed2 < 0){
 8000f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f28:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000f2c:	db0d      	blt.n	8000f4a <set_fan_speed2+0x56>
 8000f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	da09      	bge.n	8000f4a <set_fan_speed2+0x56>
		*INC = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <set_fan_speed2+0x68>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
		*IND = -1*speed2;
 8000f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f42:	425a      	negs	r2, r3
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <set_fan_speed2+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200000b4 	.word	0x200000b4
 8000f5c:	200000b0 	.word	0x200000b0

08000f60 <MPU6050_Init>:

// set i2c timeout
const uint16_t i2c_timeout = 100;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af04      	add	r7, sp, #16
 8000f66:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, i2c_timeout);
 8000f68:	2364      	movs	r3, #100	@ 0x64
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	f107 030f 	add.w	r3, r7, #15
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	2275      	movs	r2, #117	@ 0x75
 8000f7a:	21d0      	movs	r1, #208	@ 0xd0
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f001 ff9f 	bl	8002ec0 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b68      	cmp	r3, #104	@ 0x68
 8000f86:	d13d      	bne.n	8001004 <MPU6050_Init+0xa4>
    {
        // wake sensor up using power management register
        Data = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, i2c_timeout);
 8000f8c:	2364      	movs	r3, #100	@ 0x64
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f107 030e 	add.w	r3, r7, #14
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	226b      	movs	r2, #107	@ 0x6b
 8000f9e:	21d0      	movs	r1, #208	@ 0xd0
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f001 fe79 	bl	8002c98 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, i2c_timeout);
 8000faa:	2364      	movs	r3, #100	@ 0x64
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	f107 030e 	add.w	r3, r7, #14
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2219      	movs	r2, #25
 8000fbc:	21d0      	movs	r1, #208	@ 0xd0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f001 fe6a 	bl	8002c98 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register AFS_SEL=0
        Data = 0x00;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
 8000fc8:	2364      	movs	r3, #100	@ 0x64
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	f107 030e 	add.w	r3, r7, #14
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	221c      	movs	r2, #28
 8000fda:	21d0      	movs	r1, #208	@ 0xd0
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f001 fe5b 	bl	8002c98 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register FS_SEL=0
        Data = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, i2c_timeout);
 8000fe6:	2364      	movs	r3, #100	@ 0x64
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	2301      	movs	r3, #1
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	f107 030e 	add.w	r3, r7, #14
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	221b      	movs	r2, #27
 8000ff8:	21d0      	movs	r1, #208	@ 0xd0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 fe4c 	bl	8002c98 <HAL_I2C_Mem_Write>
        return 0;
 8001000:	2300      	movs	r3, #0
 8001002:	e000      	b.n	8001006 <MPU6050_Init+0xa6>
    }
    return 1;
 8001004:	2301      	movs	r3, #1
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <MPU6050_Read_MPU>:

void MPU6050_Read_MPU(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b088      	sub	sp, #32
 8001012:	af04      	add	r7, sp, #16
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_R_GYRO_XOUT, 1, Rec_Data, 6, i2c_timeout);
 8001018:	2364      	movs	r3, #100	@ 0x64
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2306      	movs	r3, #6
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	2243      	movs	r2, #67	@ 0x43
 800102a:	21d0      	movs	r1, #208	@ 0xd0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f001 ff47 	bl	8002ec0 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001032:	7a3b      	ldrb	r3, [r7, #8]
 8001034:	b21b      	sxth	r3, r3
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7a7b      	ldrb	r3, [r7, #9]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001046:	7abb      	ldrb	r3, [r7, #10]
 8001048:	b21b      	sxth	r3, r3
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21a      	sxth	r2, r3
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	805a      	strh	r2, [r3, #2]
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	b21b      	sxth	r3, r3
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21a      	sxth	r2, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	809a      	strh	r2, [r3, #4]

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_R_ACCEL_XOUT, 1, Rec_Data, 6, i2c_timeout);
 800106e:	2364      	movs	r3, #100	@ 0x64
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2306      	movs	r3, #6
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	223b      	movs	r2, #59	@ 0x3b
 8001080:	21d0      	movs	r1, #208	@ 0xd0
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f001 ff1c 	bl	8002ec0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001088:	7a3b      	ldrb	r3, [r7, #8]
 800108a:	b21b      	sxth	r3, r3
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	7a7b      	ldrb	r3, [r7, #9]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21a      	sxth	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	839a      	strh	r2, [r3, #28]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800109c:	7abb      	ldrb	r3, [r7, #10]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7afb      	ldrb	r3, [r7, #11]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	83da      	strh	r2, [r3, #30]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80010b0:	7b3b      	ldrb	r3, [r7, #12]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21a      	sxth	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	841a      	strh	r2, [r3, #32]


}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0000      	movs	r0, r0
	...

080010d0 <Calculate_Accel_Values>:

void Calculate_Accel_Values(MPU6050_t *Raw_Values){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    //Scale values
	Raw_Values-> Accel_X = Raw_Values-> Accel_X_RAW*((2*G)/32768); //Values for AFS_SEL = 0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f9a0 	bl	8000424 <__aeabi_i2d>
 80010e4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001158 <Calculate_Accel_Values+0x88>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fa05 	bl	80004f8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fcaf 	bl	8000a58 <__aeabi_d2f>
 80010fa:	4602      	mov	r2, r0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	625a      	str	r2, [r3, #36]	@ 0x24
	Raw_Values-> Accel_Y = Raw_Values-> Accel_Y_RAW*((2*G)/32768);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f98c 	bl	8000424 <__aeabi_i2d>
 800110c:	a312      	add	r3, pc, #72	@ (adr r3, 8001158 <Calculate_Accel_Values+0x88>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff f9f1 	bl	80004f8 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fc9b 	bl	8000a58 <__aeabi_d2f>
 8001122:	4602      	mov	r2, r0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
	Raw_Values-> Accel_Z = Raw_Values-> Accel_Z_RAW*((2*G)/32768);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f978 	bl	8000424 <__aeabi_i2d>
 8001134:	a308      	add	r3, pc, #32	@ (adr r3, 8001158 <Calculate_Accel_Values+0x88>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff f9dd 	bl	80004f8 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fc87 	bl	8000a58 <__aeabi_d2f>
 800114a:	4602      	mov	r2, r0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	62da      	str	r2, [r3, #44]	@ 0x2c
};
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	51eb851f 	.word	0x51eb851f
 800115c:	3f439eb8 	.word	0x3f439eb8

08001160 <Calculate_Gyro_Values>:

void Calculate_Gyro_Values(MPU6050_t *Raw_Values){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    //Scale values 
	Raw_Values-> Gyro_X = Raw_Values-> Gyro_X_RAW/131.0; //Values for FS_SEL = 0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f958 	bl	8000424 <__aeabi_i2d>
 8001174:	a31c      	add	r3, pc, #112	@ (adr r3, 80011e8 <Calculate_Gyro_Values+0x88>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fae7 	bl	800074c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fc67 	bl	8000a58 <__aeabi_d2f>
 800118a:	4602      	mov	r2, r0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
	Raw_Values-> Gyro_Y = Raw_Values-> Gyro_Y_RAW/131.0;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f944 	bl	8000424 <__aeabi_i2d>
 800119c:	a312      	add	r3, pc, #72	@ (adr r3, 80011e8 <Calculate_Gyro_Values+0x88>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff fad3 	bl	800074c <__aeabi_ddiv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fc53 	bl	8000a58 <__aeabi_d2f>
 80011b2:	4602      	mov	r2, r0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60da      	str	r2, [r3, #12]
	Raw_Values-> Gyro_Z = Raw_Values-> Gyro_Z_RAW/131.0;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f930 	bl	8000424 <__aeabi_i2d>
 80011c4:	a308      	add	r3, pc, #32	@ (adr r3, 80011e8 <Calculate_Gyro_Values+0x88>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fabf 	bl	800074c <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fc3f 	bl	8000a58 <__aeabi_d2f>
 80011da:	4602      	mov	r2, r0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
};
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40606000 	.word	0x40606000

080011f0 <Get_Accel_Angles>:


void Get_Accel_Angles(MPU6050_t *Raw_Values){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    
    //     explanation in /Datasheets/MPU-6050-math.pdf
    
    // Calculate Pitch using RPY
	float pitch_tmp =  RAD_TO_DEG * asin(Raw_Values->Accel_X / G);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f923 	bl	8000448 <__aeabi_f2d>
 8001202:	a33f      	add	r3, pc, #252	@ (adr r3, 8001300 <Get_Accel_Angles+0x110>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff faa0 	bl	800074c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	ec43 2b17 	vmov	d7, r2, r3
 8001214:	eeb0 0a47 	vmov.f32	s0, s14
 8001218:	eef0 0a67 	vmov.f32	s1, s15
 800121c:	f006 fcd2 	bl	8007bc4 <asin>
 8001220:	ec51 0b10 	vmov	r0, r1, d0
 8001224:	a332      	add	r3, pc, #200	@ (adr r3, 80012f0 <Get_Accel_Angles+0x100>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f965 	bl	80004f8 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc0f 	bl	8000a58 <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	60fb      	str	r3, [r7, #12]
	Raw_Values->Accel_Pitch = Raw_Values->Accel_Pitch * (1 - ACCEL_LPF_ALPHA) + pitch_tmp * ACCEL_LPF_ALPHA;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001244:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80012f8 <Get_Accel_Angles+0x108>
 8001248:	ee27 7a87 	vmul.f32	s14, s15, s14
 800124c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001250:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80012fc <Get_Accel_Angles+0x10c>
 8001254:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    // Check for potential division by zero
    if (Raw_Values->Accel_Z != 0) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001268:	eef5 7a40 	vcmp.f32	s15, #0.0
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	d033      	beq.n	80012da <Get_Accel_Angles+0xea>
    	float roll_tmp = RAD_TO_DEG * atan(Raw_Values->Accel_Y / Raw_Values->Accel_Z);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800127e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001282:	ee16 0a90 	vmov	r0, s13
 8001286:	f7ff f8df 	bl	8000448 <__aeabi_f2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	ec43 2b10 	vmov	d0, r2, r3
 8001292:	f006 fccd 	bl	8007c30 <atan>
 8001296:	ec51 0b10 	vmov	r0, r1, d0
 800129a:	a315      	add	r3, pc, #84	@ (adr r3, 80012f0 <Get_Accel_Angles+0x100>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7ff f92a 	bl	80004f8 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fbd4 	bl	8000a58 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	60bb      	str	r3, [r7, #8]
    	Raw_Values->Accel_Roll = Raw_Values->Accel_Roll * (1 - ACCEL_LPF_ALPHA) + roll_tmp * ACCEL_LPF_ALPHA;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80012ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80012f8 <Get_Accel_Angles+0x108>
 80012be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80012fc <Get_Accel_Angles+0x10c>
 80012ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    } else {
        // Handle division by zero error (if necessary)
    	Raw_Values->Accel_Roll = 0.0;  // Set a default value or handle it according to your application logic
    }
}
 80012d8:	e003      	b.n	80012e2 <Get_Accel_Angles+0xf2>
    	Raw_Values->Accel_Roll = 0.0;  // Set a default value or handle it according to your application logic
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	b851eb85 	.word	0xb851eb85
 80012f4:	404ca51e 	.word	0x404ca51e
 80012f8:	3f666666 	.word	0x3f666666
 80012fc:	3dcccccd 	.word	0x3dcccccd
 8001300:	51eb851f 	.word	0x51eb851f
 8001304:	40239eb8 	.word	0x40239eb8

08001308 <Get_Gyro_Angles>:



void Get_Gyro_Angles(MPU6050_t *Raw_Values, double Sample_Time){
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	ed87 0b00 	vstr	d0, [r7]

    //     explanation in /Datasheets/MPU-6050-math.pdf


	float pitch_tmp = Raw_Values->Gyro_Pitch + Raw_Values->Gyro_Y*Sample_Time;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f895 	bl	8000448 <__aeabi_f2d>
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f88e 	bl	8000448 <__aeabi_f2d>
 800132c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001330:	f7ff f8e2 	bl	80004f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ff26 	bl	800018c <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fb86 	bl	8000a58 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	617b      	str	r3, [r7, #20]
	Raw_Values->Gyro_Pitch = Raw_Values->Gyro_Pitch * (1 - GYRO_LPF_ALPHA) + pitch_tmp * GYRO_LPF_ALPHA;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	edd3 7a05 	vldr	s15, [r3, #20]
 8001356:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80013dc <Get_Gyro_Angles+0xd4>
 800135a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800135e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001362:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80013e0 <Get_Gyro_Angles+0xd8>
 8001366:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	edc3 7a05 	vstr	s15, [r3, #20]

	float roll_tmp = Raw_Values->Gyro_Roll + Raw_Values->Gyro_X*Sample_Time;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f865 	bl	8000448 <__aeabi_f2d>
 800137e:	4604      	mov	r4, r0
 8001380:	460d      	mov	r5, r1
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f85e 	bl	8000448 <__aeabi_f2d>
 800138c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001390:	f7ff f8b2 	bl	80004f8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7fe fef6 	bl	800018c <__adddf3>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fb56 	bl	8000a58 <__aeabi_d2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	613b      	str	r3, [r7, #16]
	Raw_Values->Gyro_Roll = Raw_Values->Gyro_Roll * (1 - GYRO_LPF_ALPHA) + roll_tmp * GYRO_LPF_ALPHA;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80013b6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80013dc <Get_Gyro_Angles+0xd4>
 80013ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013be:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c2:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80013e0 <Get_Gyro_Angles+0xd8>
 80013c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	edc3 7a06 	vstr	s15, [r3, #24]

};
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bdb0      	pop	{r4, r5, r7, pc}
 80013dc:	3d4cccd0 	.word	0x3d4cccd0
 80013e0:	3f733333 	.word	0x3f733333

080013e4 <Comp_Filter_Results>:

void Comp_Filter_Results(MPU6050_t *Results){
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    
    //     explanation in /Datasheets/MPU-6050-math.pdf

	float pitch_tmp = Results->Gyro_Pitch * COMPLEMENTARY_ALPHA + (1-COMPLEMENTARY_ALPHA) * Results->Accel_Pitch;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80013f2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001458 <Comp_Filter_Results+0x74>
 80013f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001400:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800145c <Comp_Filter_Results+0x78>
 8001404:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	edc7 7a03 	vstr	s15, [r7, #12]
	Results->Accel_Pitch = pitch_tmp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30
	Results->Gyro_Pitch = pitch_tmp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	615a      	str	r2, [r3, #20]

	float roll_tmp = Results->Gyro_Roll * COMPLEMENTARY_ALPHA + (1-COMPLEMENTARY_ALPHA) * Results->Accel_Roll;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001422:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001458 <Comp_Filter_Results+0x74>
 8001426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001430:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800145c <Comp_Filter_Results+0x78>
 8001434:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	edc7 7a02 	vstr	s15, [r7, #8]
	Results->Accel_Roll = roll_tmp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34
	Results->Gyro_Roll = roll_tmp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	619a      	str	r2, [r3, #24]

}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	3dba2e8c 	.word	0x3dba2e8c
 800145c:	3f68ba2e 	.word	0x3f68ba2e

08001460 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001468:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800146c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001478:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800147c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001480:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00b      	beq.n	80014a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001488:	e000      	b.n	800148c <ITM_SendChar+0x2c>
    {
      __NOP();
 800148a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800148c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f9      	beq.n	800148a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001496:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4013      	ands	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08e      	sub	sp, #56	@ 0x38
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e6:	f000 ffdf 	bl	80024a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ea:	f000 f8f3 	bl	80016d4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014ee:	f000 f94b 	bl	8001788 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f000 fb41 	bl	8001b78 <MX_GPIO_Init>
  MX_TIM1_Init();
 80014f6:	f000 f9a5 	bl	8001844 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014fa:	f000 fa6b 	bl	80019d4 <MX_TIM2_Init>
  MX_I2C3_Init();
 80014fe:	f000 f961 	bl	80017c4 <MX_I2C3_Init>
  MX_USB_PCD_Init();
 8001502:	f000 fb11 	bl	8001b28 <MX_USB_PCD_Init>
  MX_TIM16_Init();
 8001506:	f000 fae7 	bl	8001ad8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_t MPU6050;

  // Initialize MPU6050 (see library sample code)
  while (MPU6050_Init(&hi2c3) == 1){
 800150a:	e002      	b.n	8001512 <main+0x32>
	  printf("Unable to Init MPU6050\n");
 800150c:	485a      	ldr	r0, [pc, #360]	@ (8001678 <main+0x198>)
 800150e:	f005 ffc5 	bl	800749c <puts>
  while (MPU6050_Init(&hi2c3) == 1){
 8001512:	485a      	ldr	r0, [pc, #360]	@ (800167c <main+0x19c>)
 8001514:	f7ff fd24 	bl	8000f60 <MPU6050_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b01      	cmp	r3, #1
 800151c:	d0f6      	beq.n	800150c <main+0x2c>
  }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 800151e:	2000      	movs	r0, #0
 8001520:	f000 fe6c 	bl	80021fc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8001524:	2001      	movs	r0, #1
 8001526:	f000 fe69 	bl	80021fc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800152a:	2002      	movs	r0, #2
 800152c:	f000 fe66 	bl	80021fc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001530:	2101      	movs	r1, #1
 8001532:	2000      	movs	r0, #0
 8001534:	f000 feb6 	bl	80022a4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001538:	2101      	movs	r1, #1
 800153a:	2001      	movs	r0, #1
 800153c:	f000 feb2 	bl	80022a4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8001540:	2101      	movs	r1, #1
 8001542:	2002      	movs	r0, #2
 8001544:	f000 feae 	bl	80022a4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001548:	4b4d      	ldr	r3, [pc, #308]	@ (8001680 <main+0x1a0>)
 800154a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800154e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001550:	4b4b      	ldr	r3, [pc, #300]	@ (8001680 <main+0x1a0>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001556:	4b4a      	ldr	r3, [pc, #296]	@ (8001680 <main+0x1a0>)
 8001558:	2200      	movs	r2, #0
 800155a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800155c:	4b48      	ldr	r3, [pc, #288]	@ (8001680 <main+0x1a0>)
 800155e:	2200      	movs	r2, #0
 8001560:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001562:	4b47      	ldr	r3, [pc, #284]	@ (8001680 <main+0x1a0>)
 8001564:	2200      	movs	r2, #0
 8001566:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001568:	4945      	ldr	r1, [pc, #276]	@ (8001680 <main+0x1a0>)
 800156a:	2000      	movs	r0, #0
 800156c:	f000 ff0a 	bl	8002384 <BSP_COM_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <main+0x9a>
  {
    Error_Handler();
 8001576:	f000 fb5b 	bl	8001c30 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800157a:	2100      	movs	r1, #0
 800157c:	4841      	ldr	r0, [pc, #260]	@ (8001684 <main+0x1a4>)
 800157e:	f004 f8df 	bl	8005740 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001582:	2104      	movs	r1, #4
 8001584:	483f      	ldr	r0, [pc, #252]	@ (8001684 <main+0x1a4>)
 8001586:	f004 f8db 	bl	8005740 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800158a:	2100      	movs	r1, #0
 800158c:	483e      	ldr	r0, [pc, #248]	@ (8001688 <main+0x1a8>)
 800158e:	f004 f8d7 	bl	8005740 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001592:	2104      	movs	r1, #4
 8001594:	483c      	ldr	r0, [pc, #240]	@ (8001688 <main+0x1a8>)
 8001596:	f004 f8d3 	bl	8005740 <HAL_TIM_PWM_Start>
  init_fan(&(TIM1->CCR1), &(TIM1->CCR2), &(TIM2->CCR1), &(TIM2->CCR2));
 800159a:	4b3c      	ldr	r3, [pc, #240]	@ (800168c <main+0x1ac>)
 800159c:	4a3c      	ldr	r2, [pc, #240]	@ (8001690 <main+0x1b0>)
 800159e:	493d      	ldr	r1, [pc, #244]	@ (8001694 <main+0x1b4>)
 80015a0:	483d      	ldr	r0, [pc, #244]	@ (8001698 <main+0x1b8>)
 80015a2:	f7ff fc3f 	bl	8000e24 <init_fan>
  HAL_TIM_Base_Start_IT(&htim16);
 80015a6:	483d      	ldr	r0, [pc, #244]	@ (800169c <main+0x1bc>)
 80015a8:	f004 f81a 	bl	80055e0 <HAL_TIM_Base_Start_IT>

  //ch1_counter_val = 0;//(TIM1 -> ARR);
  //ch2_counter_val = 0;
  fan_speed_1 = 1;
 80015ac:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <main+0x1c0>)
 80015ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015b2:	601a      	str	r2, [r3, #0]
  fan_speed_2 = 1;
 80015b4:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <main+0x1c4>)
 80015b6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015ba:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // MPU6050 reading
	  MPU6050_Read_MPU(&hi2c3, &MPU6050);
 80015bc:	463b      	mov	r3, r7
 80015be:	4619      	mov	r1, r3
 80015c0:	482e      	ldr	r0, [pc, #184]	@ (800167c <main+0x19c>)
 80015c2:	f7ff fd24 	bl	800100e <MPU6050_Read_MPU>
	  Calculate_Accel_Values(&MPU6050);
 80015c6:	463b      	mov	r3, r7
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fd81 	bl	80010d0 <Calculate_Accel_Values>
	  Calculate_Gyro_Values(&MPU6050);
 80015ce:	463b      	mov	r3, r7
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fdc5 	bl	8001160 <Calculate_Gyro_Values>
	  Get_Accel_Angles(&MPU6050);
 80015d6:	463b      	mov	r3, r7
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fe09 	bl	80011f0 <Get_Accel_Angles>
	  Get_Gyro_Angles(&MPU6050, 0.01);
 80015de:	463b      	mov	r3, r7
 80015e0:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8001670 <main+0x190>
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fe8f 	bl	8001308 <Get_Gyro_Angles>
	  Comp_Filter_Results(&MPU6050);
 80015ea:	463b      	mov	r3, r7
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fef9 	bl	80013e4 <Comp_Filter_Results>

	  // Writing results
	  GyroX = MPU6050.Gyro_X;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	4a2c      	ldr	r2, [pc, #176]	@ (80016a8 <main+0x1c8>)
 80015f6:	6013      	str	r3, [r2, #0]
	  GyroY = MPU6050.Gyro_Y;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4a2c      	ldr	r2, [pc, #176]	@ (80016ac <main+0x1cc>)
 80015fc:	6013      	str	r3, [r2, #0]
	  GyroZ = MPU6050.Gyro_Z;
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4a2b      	ldr	r2, [pc, #172]	@ (80016b0 <main+0x1d0>)
 8001602:	6013      	str	r3, [r2, #0]

	  AccelX = MPU6050.Accel_X;
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	4a2b      	ldr	r2, [pc, #172]	@ (80016b4 <main+0x1d4>)
 8001608:	6013      	str	r3, [r2, #0]
	  AccelY = MPU6050.Accel_Y;
 800160a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160c:	4a2a      	ldr	r2, [pc, #168]	@ (80016b8 <main+0x1d8>)
 800160e:	6013      	str	r3, [r2, #0]
	  AccelZ = MPU6050.Accel_Z;
 8001610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001612:	4a2a      	ldr	r2, [pc, #168]	@ (80016bc <main+0x1dc>)
 8001614:	6013      	str	r3, [r2, #0]

	  GyroRoll = MPU6050.Gyro_Roll;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4a29      	ldr	r2, [pc, #164]	@ (80016c0 <main+0x1e0>)
 800161a:	6013      	str	r3, [r2, #0]
	  GyroPitch = MPU6050.Gyro_Pitch;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	4a29      	ldr	r2, [pc, #164]	@ (80016c4 <main+0x1e4>)
 8001620:	6013      	str	r3, [r2, #0]
	  AccelRoll = MPU6050.Accel_Roll;
 8001622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001624:	4a28      	ldr	r2, [pc, #160]	@ (80016c8 <main+0x1e8>)
 8001626:	6013      	str	r3, [r2, #0]
	  AccelPitch = MPU6050.Accel_Pitch;
 8001628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800162a:	4a28      	ldr	r2, [pc, #160]	@ (80016cc <main+0x1ec>)
 800162c:	6013      	str	r3, [r2, #0]

	  //fan_speed_1 = (AccelZ/10.5 * 1000);
	  fan_speed_2 = fan_speed_1;
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <main+0x1c0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1c      	ldr	r2, [pc, #112]	@ (80016a4 <main+0x1c4>)
 8001634:	6013      	str	r3, [r2, #0]
	  set_fan_speed(fan_speed_1);
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <main+0x1c0>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001640:	ee17 3a90 	vmov	r3, s15
 8001644:	b21b      	sxth	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fc1e 	bl	8000e88 <set_fan_speed>
	  set_fan_speed2(fan_speed_2);
 800164c:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <main+0x1c4>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001656:	ee17 3a90 	vmov	r3, s15
 800165a:	b21b      	sxth	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fc49 	bl	8000ef4 <set_fan_speed2>

	  TIM1->CCR2 = ch2_counter_val;
	  HAL_Delay(5000);
	  ch2_counter_val = 0;
	  TIM1->CCR2 = ch2_counter_val;*/
	  printf("GyroscopeMPU6050Test\n");
 8001662:	481b      	ldr	r0, [pc, #108]	@ (80016d0 <main+0x1f0>)
 8001664:	f005 ff1a 	bl	800749c <puts>
	  MPU6050_Read_MPU(&hi2c3, &MPU6050);
 8001668:	bf00      	nop
 800166a:	e7a7      	b.n	80015bc <main+0xdc>
 800166c:	f3af 8000 	nop.w
 8001670:	47ae147b 	.word	0x47ae147b
 8001674:	3f847ae1 	.word	0x3f847ae1
 8001678:	08008550 	.word	0x08008550
 800167c:	200000c8 	.word	0x200000c8
 8001680:	200000b8 	.word	0x200000b8
 8001684:	2000011c 	.word	0x2000011c
 8001688:	20000168 	.word	0x20000168
 800168c:	40000038 	.word	0x40000038
 8001690:	40000034 	.word	0x40000034
 8001694:	40012c38 	.word	0x40012c38
 8001698:	40012c34 	.word	0x40012c34
 800169c:	200001b4 	.word	0x200001b4
 80016a0:	20000504 	.word	0x20000504
 80016a4:	20000508 	.word	0x20000508
 80016a8:	200004dc 	.word	0x200004dc
 80016ac:	200004e0 	.word	0x200004e0
 80016b0:	200004e4 	.word	0x200004e4
 80016b4:	200004e8 	.word	0x200004e8
 80016b8:	200004ec 	.word	0x200004ec
 80016bc:	200004f0 	.word	0x200004f0
 80016c0:	200004f4 	.word	0x200004f4
 80016c4:	200004f8 	.word	0x200004f8
 80016c8:	200004fc 	.word	0x200004fc
 80016cc:	20000500 	.word	0x20000500
 80016d0:	08008568 	.word	0x08008568

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b09a      	sub	sp, #104	@ 0x68
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2248      	movs	r2, #72	@ 0x48
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 ffba 	bl	800765c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fa:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <SystemClock_Config+0xb0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001702:	4a20      	ldr	r2, [pc, #128]	@ (8001784 <SystemClock_Config+0xb0>)
 8001704:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <SystemClock_Config+0xb0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001716:	2362      	movs	r3, #98	@ 0x62
 8001718:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800171e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001720:	2301      	movs	r3, #1
 8001722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001724:	2301      	movs	r3, #1
 8001726:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001728:	2340      	movs	r3, #64	@ 0x40
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800172c:	2300      	movs	r3, #0
 800172e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001730:	23a0      	movs	r3, #160	@ 0xa0
 8001732:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4618      	mov	r0, r3
 800173e:	f002 fcbf 	bl	80040c0 <HAL_RCC_OscConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001748:	f000 fa72 	bl	8001c30 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800174c:	236f      	movs	r3, #111	@ 0x6f
 800174e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2101      	movs	r1, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f81b 	bl	80047a8 <HAL_RCC_ClockConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001778:	f000 fa5a 	bl	8001c30 <Error_Handler>
  }
}
 800177c:	bf00      	nop
 800177e:	3768      	adds	r7, #104	@ 0x68
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58000400 	.word	0x58000400

08001788 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	@ 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2250      	movs	r2, #80	@ 0x50
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f005 ff61 	bl	800765c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800179a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800179e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80017a0:	2300      	movs	r3, #0
 80017a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 fc39 	bl	8005022 <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80017b6:	f000 fa3b 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80017ba:	bf00      	nop
 80017bc:	3750      	adds	r7, #80	@ 0x50
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <MX_I2C3_Init+0x74>)
 80017ca:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <MX_I2C3_Init+0x78>)
 80017cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B07CB4;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <MX_I2C3_Init+0x74>)
 80017d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001840 <MX_I2C3_Init+0x7c>)
 80017d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <MX_I2C3_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017da:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <MX_I2C3_Init+0x74>)
 80017dc:	2201      	movs	r2, #1
 80017de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e0:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <MX_I2C3_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_I2C3_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <MX_I2C3_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_I2C3_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <MX_I2C3_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017fe:	480e      	ldr	r0, [pc, #56]	@ (8001838 <MX_I2C3_Init+0x74>)
 8001800:	f001 f9ae 	bl	8002b60 <HAL_I2C_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800180a:	f000 fa11 	bl	8001c30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800180e:	2100      	movs	r1, #0
 8001810:	4809      	ldr	r0, [pc, #36]	@ (8001838 <MX_I2C3_Init+0x74>)
 8001812:	f001 ff31 	bl	8003678 <HAL_I2CEx_ConfigAnalogFilter>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800181c:	f000 fa08 	bl	8001c30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001820:	2100      	movs	r1, #0
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_I2C3_Init+0x74>)
 8001824:	f001 ff73 	bl	800370e <HAL_I2CEx_ConfigDigitalFilter>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800182e:	f000 f9ff 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200000c8 	.word	0x200000c8
 800183c:	40005c00 	.word	0x40005c00
 8001840:	00b07cb4 	.word	0x00b07cb4

08001844 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b09c      	sub	sp, #112	@ 0x70
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001864:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2234      	movs	r2, #52	@ 0x34
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f005 feec 	bl	800765c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001884:	4b51      	ldr	r3, [pc, #324]	@ (80019cc <MX_TIM1_Init+0x188>)
 8001886:	4a52      	ldr	r2, [pc, #328]	@ (80019d0 <MX_TIM1_Init+0x18c>)
 8001888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800188a:	4b50      	ldr	r3, [pc, #320]	@ (80019cc <MX_TIM1_Init+0x188>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b4e      	ldr	r3, [pc, #312]	@ (80019cc <MX_TIM1_Init+0x188>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001896:	4b4d      	ldr	r3, [pc, #308]	@ (80019cc <MX_TIM1_Init+0x188>)
 8001898:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800189c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b4b      	ldr	r3, [pc, #300]	@ (80019cc <MX_TIM1_Init+0x188>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a4:	4b49      	ldr	r3, [pc, #292]	@ (80019cc <MX_TIM1_Init+0x188>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018aa:	4b48      	ldr	r3, [pc, #288]	@ (80019cc <MX_TIM1_Init+0x188>)
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b0:	4846      	ldr	r0, [pc, #280]	@ (80019cc <MX_TIM1_Init+0x188>)
 80018b2:	f003 fe3d 	bl	8005530 <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018bc:	f000 f9b8 	bl	8001c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80018ca:	4619      	mov	r1, r3
 80018cc:	483f      	ldr	r0, [pc, #252]	@ (80019cc <MX_TIM1_Init+0x188>)
 80018ce:	f004 fa2d 	bl	8005d2c <HAL_TIM_ConfigClockSource>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018d8:	f000 f9aa 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018dc:	483b      	ldr	r0, [pc, #236]	@ (80019cc <MX_TIM1_Init+0x188>)
 80018de:	f003 fecd 	bl	800567c <HAL_TIM_PWM_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018e8:	f000 f9a2 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018fc:	4619      	mov	r1, r3
 80018fe:	4833      	ldr	r0, [pc, #204]	@ (80019cc <MX_TIM1_Init+0x188>)
 8001900:	f004 feb6 	bl	8006670 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800190a:	f000 f991 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190e:	2360      	movs	r3, #96	@ 0x60
 8001910:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001916:	2300      	movs	r3, #0
 8001918:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800191a:	2300      	movs	r3, #0
 800191c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800192a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800192e:	2200      	movs	r2, #0
 8001930:	4619      	mov	r1, r3
 8001932:	4826      	ldr	r0, [pc, #152]	@ (80019cc <MX_TIM1_Init+0x188>)
 8001934:	f004 f8e6 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800193e:	f000 f977 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001942:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001946:	2204      	movs	r2, #4
 8001948:	4619      	mov	r1, r3
 800194a:	4820      	ldr	r0, [pc, #128]	@ (80019cc <MX_TIM1_Init+0x188>)
 800194c:	f004 f8da 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001956:	f000 f96b 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800195a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800195e:	2208      	movs	r2, #8
 8001960:	4619      	mov	r1, r3
 8001962:	481a      	ldr	r0, [pc, #104]	@ (80019cc <MX_TIM1_Init+0x188>)
 8001964:	f004 f8ce 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800196e:	f000 f95f 	bl	8001c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001986:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800198a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001998:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800199c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4807      	ldr	r0, [pc, #28]	@ (80019cc <MX_TIM1_Init+0x188>)
 80019b0:	f004 febe 	bl	8006730 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80019ba:	f000 f939 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019be:	4803      	ldr	r0, [pc, #12]	@ (80019cc <MX_TIM1_Init+0x188>)
 80019c0:	f000 fa0c 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 80019c4:	bf00      	nop
 80019c6:	3770      	adds	r7, #112	@ 0x70
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000011c 	.word	0x2000011c
 80019d0:	40012c00 	.word	0x40012c00

080019d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08e      	sub	sp, #56	@ 0x38
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	615a      	str	r2, [r3, #20]
 8001a04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a06:	4b33      	ldr	r3, [pc, #204]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001a08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001a1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a2e:	4829      	ldr	r0, [pc, #164]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001a30:	f003 fd7e 	bl	8005530 <HAL_TIM_Base_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a3a:	f000 f8f9 	bl	8001c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4822      	ldr	r0, [pc, #136]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001a4c:	f004 f96e 	bl	8005d2c <HAL_TIM_ConfigClockSource>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a56:	f000 f8eb 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a5a:	481e      	ldr	r0, [pc, #120]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001a5c:	f003 fe0e 	bl	800567c <HAL_TIM_PWM_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a66:	f000 f8e3 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4816      	ldr	r0, [pc, #88]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001a7a:	f004 fdf9 	bl	8006670 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a84:	f000 f8d4 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a88:	2360      	movs	r3, #96	@ 0x60
 8001a8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001aa0:	f004 f830 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001aaa:	f000 f8c1 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001ab6:	f004 f825 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001ac0:	f000 f8b6 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ac4:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <MX_TIM2_Init+0x100>)
 8001ac6:	f000 f989 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8001aca:	bf00      	nop
 8001acc:	3738      	adds	r7, #56	@ 0x38
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000168 	.word	0x20000168

08001ad8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001adc:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <MX_TIM16_Init+0x48>)
 8001ade:	4a11      	ldr	r2, [pc, #68]	@ (8001b24 <MX_TIM16_Init+0x4c>)
 8001ae0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6339;
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <MX_TIM16_Init+0x48>)
 8001ae4:	f641 02c3 	movw	r2, #6339	@ 0x18c3
 8001ae8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <MX_TIM16_Init+0x48>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000;
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <MX_TIM16_Init+0x48>)
 8001af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MX_TIM16_Init+0x48>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001afe:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <MX_TIM16_Init+0x48>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <MX_TIM16_Init+0x48>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <MX_TIM16_Init+0x48>)
 8001b0c:	f003 fd10 	bl	8005530 <HAL_TIM_Base_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001b16:	f000 f88b 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001b4 	.word	0x200001b4
 8001b24:	40014400 	.word	0x40014400

08001b28 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b2e:	4a11      	ldr	r2, [pc, #68]	@ (8001b74 <MX_USB_PCD_Init+0x4c>)
 8001b30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b34:	2208      	movs	r2, #8
 8001b36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b40:	2202      	movs	r2, #2
 8001b42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b5e:	f001 fe22 	bl	80037a6 <HAL_PCD_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001b68:	f000 f862 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000200 	.word	0x20000200
 8001b74:	40006800 	.word	0x40006800

08001b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f7ff fc96 	bl	80014ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2001      	movs	r0, #1
 8001b84:	f7ff fc93 	bl	80014ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7ff fc90 	bl	80014ae <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e009      	b.n	8001bb8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fc57 	bl	8001460 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf1      	blt.n	8001ba4 <_write+0x12>
  }
  return len;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	Led_TypeDef leds[] = {LED_BLUE, LED_GREEN, LED_RED};
 8001bd4:	4a13      	ldr	r2, [pc, #76]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	8019      	strh	r1, [r3, #0]
 8001be0:	3302      	adds	r3, #2
 8001be2:	0c12      	lsrs	r2, r2, #16
 8001be4:	701a      	strb	r2, [r3, #0]
	static uint8_t i = 0;
	if (htim == &htim16)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d115      	bne.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		BSP_LED_Toggle(leds[i]);
 8001bee:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	3310      	adds	r3, #16
 8001bf4:	443b      	add	r3, r7
 8001bf6:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fb38 	bl	8002270 <BSP_LED_Toggle>
		i++;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c0a:	701a      	strb	r2, [r3, #0]
		if (i>2){
 8001c0c:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d902      	bls.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x4e>
			i=0;
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	08008580 	.word	0x08008580
 8001c28:	200001b4 	.word	0x200001b4
 8001c2c:	2000050c 	.word	0x2000050c

08001c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <Error_Handler+0x8>

08001c3c <LL_AHB2_GRP1_EnableClock>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b09c      	sub	sp, #112	@ 0x70
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	2250      	movs	r2, #80	@ 0x50
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 fcab 	bl	800765c <memset>
  if(hi2c->Instance==I2C3)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a16      	ldr	r2, [pc, #88]	@ (8001d64 <HAL_I2C_MspInit+0x84>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d125      	bne.n	8001d5c <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d10:	2308      	movs	r3, #8
 8001d12:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d14:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001d18:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 f97f 	bl	8005022 <HAL_RCCEx_PeriphCLKConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d2a:	f7ff ff81 	bl	8001c30 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	2004      	movs	r0, #4
 8001d30:	f7ff ff84 	bl	8001c3c <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d34:	2303      	movs	r3, #3
 8001d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d38:	2312      	movs	r3, #18
 8001d3a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d44:	2304      	movs	r3, #4
 8001d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <HAL_I2C_MspInit+0x88>)
 8001d50:	f000 fd64 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d54:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001d58:	f7ff ff89 	bl	8001c6e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3770      	adds	r7, #112	@ 0x70
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40005c00 	.word	0x40005c00
 8001d68:	48000800 	.word	0x48000800

08001d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a16      	ldr	r2, [pc, #88]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x68>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10c      	bne.n	8001d98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d7e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d82:	f7ff ff8d 	bl	8001ca0 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2019      	movs	r0, #25
 8001d8c:	f000 fd11 	bl	80027b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d90:	2019      	movs	r0, #25
 8001d92:	f000 fd28 	bl	80027e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001d96:	e019      	b.n	8001dcc <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da0:	d103      	bne.n	8001daa <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7ff ff63 	bl	8001c6e <LL_APB1_GRP1_EnableClock>
}
 8001da8:	e010      	b.n	8001dcc <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM16)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d10b      	bne.n	8001dcc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001db4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001db8:	f7ff ff72 	bl	8001ca0 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2019      	movs	r0, #25
 8001dc2:	f000 fcf6 	bl	80027b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dc6:	2019      	movs	r0, #25
 8001dc8:	f000 fd0d 	bl	80027e6 <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40014400 	.word	0x40014400

08001ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e64 <HAL_TIM_MspPostInit+0x88>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d115      	bne.n	8001e2a <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f7ff ff1c 	bl	8001c3c <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Pin|GPIO_PIN_9;
 8001e04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e16:	2301      	movs	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e24:	f000 fcfa 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e28:	e018      	b.n	8001e5c <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e32:	d113      	bne.n	8001e5c <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff ff01 	bl	8001c3c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	4619      	mov	r1, r3
 8001e54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e58:	f000 fce0 	bl	800281c <HAL_GPIO_Init>
}
 8001e5c:	bf00      	nop
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40012c00 	.word	0x40012c00

08001e68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b09c      	sub	sp, #112	@ 0x70
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2250      	movs	r2, #80	@ 0x50
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f005 fbe7 	bl	800765c <memset>
  if(hpcd->Instance==USB)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a17      	ldr	r2, [pc, #92]	@ (8001ef0 <HAL_PCD_MspInit+0x88>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d127      	bne.n	8001ee8 <HAL_PCD_MspInit+0x80>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e9c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 f8bb 	bl	8005022 <HAL_RCCEx_PeriphCLKConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001eb2:	f7ff febd 	bl	8001c30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f7ff fec0 	bl	8001c3c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|USB_DP_Pin;
 8001ebc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001ece:	230a      	movs	r3, #10
 8001ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001edc:	f000 fc9e 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001ee0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001ee4:	f7ff fec3 	bl	8001c6e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8001ee8:	bf00      	nop
 8001eea:	3770      	adds	r7, #112	@ 0x70
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40006800 	.word	0x40006800

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <NMI_Handler+0x4>

08001efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <HardFault_Handler+0x4>

08001f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <MemManage_Handler+0x4>

08001f0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4a:	f000 fb07 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f58:	4803      	ldr	r0, [pc, #12]	@ (8001f68 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001f5a:	f003 fccb 	bl	80058f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001f5e:	4803      	ldr	r0, [pc, #12]	@ (8001f6c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001f60:	f003 fcc8 	bl	80058f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	2000011c 	.word	0x2000011c
 8001f6c:	200001b4 	.word	0x200001b4

08001f70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	e00a      	b.n	8001f98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f82:	f3af 8000 	nop.w
 8001f86:	4601      	mov	r1, r0
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	60ba      	str	r2, [r7, #8]
 8001f8e:	b2ca      	uxtb	r2, r1
 8001f90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbf0      	blt.n	8001f82 <_read+0x12>
  }

  return len;
 8001fa0:	687b      	ldr	r3, [r7, #4]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_close>:
  }
  return len;
}

int _close(int file)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_isatty>:

int _isatty(int file)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	@ (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	@ (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f005 fb58 	bl	80076f8 <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20030000 	.word	0x20030000
 8002074:	00000400 	.word	0x00000400
 8002078:	20000510 	.word	0x20000510
 800207c:	200006f8 	.word	0x200006f8

08002080 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002084:	4b24      	ldr	r3, [pc, #144]	@ (8002118 <SystemInit+0x98>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208a:	4a23      	ldr	r2, [pc, #140]	@ (8002118 <SystemInit+0x98>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80020ac:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020b8:	4b18      	ldr	r3, [pc, #96]	@ (800211c <SystemInit+0x9c>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ca:	f023 0305 	bic.w	r3, r3, #5
 80020ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80020e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <SystemInit+0xa0>)
 80020ec:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80020ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002120 <SystemInit+0xa0>)
 80020f4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002104:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00
 800211c:	faf6fefb 	.word	0xfaf6fefb
 8002120:	22041000 	.word	0x22041000

08002124 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002124:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002126:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002128:	3304      	adds	r3, #4

0800212a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800212e:	d3f9      	bcc.n	8002124 <CopyDataInit>
  bx lr
 8002130:	4770      	bx	lr

08002132 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002132:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002134:	3004      	adds	r0, #4

08002136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002136:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002138:	d3fb      	bcc.n	8002132 <FillZerobss>
  bx lr
 800213a:	4770      	bx	lr

0800213c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800213c:	480c      	ldr	r0, [pc, #48]	@ (8002170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800213e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002140:	f7ff ff9e 	bl	8002080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002144:	480b      	ldr	r0, [pc, #44]	@ (8002174 <LoopForever+0x6>)
 8002146:	490c      	ldr	r1, [pc, #48]	@ (8002178 <LoopForever+0xa>)
 8002148:	4a0c      	ldr	r2, [pc, #48]	@ (800217c <LoopForever+0xe>)
 800214a:	2300      	movs	r3, #0
 800214c:	f7ff ffed 	bl	800212a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002150:	480b      	ldr	r0, [pc, #44]	@ (8002180 <LoopForever+0x12>)
 8002152:	490c      	ldr	r1, [pc, #48]	@ (8002184 <LoopForever+0x16>)
 8002154:	4a0c      	ldr	r2, [pc, #48]	@ (8002188 <LoopForever+0x1a>)
 8002156:	2300      	movs	r3, #0
 8002158:	f7ff ffe7 	bl	800212a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800215c:	480b      	ldr	r0, [pc, #44]	@ (800218c <LoopForever+0x1e>)
 800215e:	490c      	ldr	r1, [pc, #48]	@ (8002190 <LoopForever+0x22>)
 8002160:	2300      	movs	r3, #0
 8002162:	f7ff ffe8 	bl	8002136 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002166:	f005 facd 	bl	8007704 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800216a:	f7ff f9b9 	bl	80014e0 <main>

0800216e <LoopForever>:

LoopForever:
  b LoopForever
 800216e:	e7fe      	b.n	800216e <LoopForever>
  ldr   r0, =_estack
 8002170:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002174:	20000008 	.word	0x20000008
 8002178:	2000008c 	.word	0x2000008c
 800217c:	080086e0 	.word	0x080086e0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002180:	20030000 	.word	0x20030000
 8002184:	20030000 	.word	0x20030000
 8002188:	08008764 	.word	0x08008764
  INIT_BSS _sbss, _ebss
 800218c:	2000008c 	.word	0x2000008c
 8002190:	200006f8 	.word	0x200006f8

08002194 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002194:	e7fe      	b.n	8002194 <ADC1_IRQHandler>

08002196 <LL_AHB2_GRP1_EnableClock>:
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4013      	ands	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_APB2_GRP1_EnableClock>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4313      	orrs	r3, r2
 80021de:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ec:	68fb      	ldr	r3, [r7, #12]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002216:	2002      	movs	r0, #2
 8002218:	f7ff ffbd 	bl	8002196 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <BSP_LED_Init+0x6c>)
 8002220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002224:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002226:	2301      	movs	r3, #1
 8002228:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222e:	2302      	movs	r3, #2
 8002230:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <BSP_LED_Init+0x70>)
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	f107 020c 	add.w	r2, r7, #12
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f000 faeb 	bl	800281c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	4a08      	ldr	r2, [pc, #32]	@ (800226c <BSP_LED_Init+0x70>)
 800224a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	4a05      	ldr	r2, [pc, #20]	@ (8002268 <BSP_LED_Init+0x6c>)
 8002252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002256:	2200      	movs	r2, #0
 8002258:	4619      	mov	r1, r3
 800225a:	f000 fc4f 	bl	8002afc <HAL_GPIO_WritePin>
}
 800225e:	bf00      	nop
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	08008650 	.word	0x08008650
 800226c:	2000000c 	.word	0x2000000c

08002270 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	4a07      	ldr	r2, [pc, #28]	@ (800229c <BSP_LED_Toggle+0x2c>)
 800227e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4906      	ldr	r1, [pc, #24]	@ (80022a0 <BSP_LED_Toggle+0x30>)
 8002286:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f000 fc4d 	bl	8002b2c <HAL_GPIO_TogglePin>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000000c 	.word	0x2000000c
 80022a0:	08008650 	.word	0x08008650

080022a4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	460a      	mov	r2, r1
 80022ae:	71fb      	strb	r3, [r7, #7]
 80022b0:	4613      	mov	r3, r2
 80022b2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <BSP_PB_Init+0x2e>
 80022ca:	2004      	movs	r0, #4
 80022cc:	f7ff ff63 	bl	8002196 <LL_AHB2_GRP1_EnableClock>
 80022d0:	e00c      	b.n	80022ec <BSP_PB_Init+0x48>
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d103      	bne.n	80022e0 <BSP_PB_Init+0x3c>
 80022d8:	2008      	movs	r0, #8
 80022da:	f7ff ff5c 	bl	8002196 <LL_AHB2_GRP1_EnableClock>
 80022de:	e005      	b.n	80022ec <BSP_PB_Init+0x48>
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d102      	bne.n	80022ec <BSP_PB_Init+0x48>
 80022e6:	2008      	movs	r0, #8
 80022e8:	f7ff ff55 	bl	8002196 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d117      	bne.n	8002322 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	4a20      	ldr	r2, [pc, #128]	@ (8002378 <BSP_PB_Init+0xd4>)
 80022f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022fa:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002300:	2301      	movs	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002304:	2302      	movs	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <BSP_PB_Init+0xd8>)
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	f107 020c 	add.w	r2, r7, #12
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fa80 	bl	800281c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 800231c:	2001      	movs	r0, #1
 800231e:	f000 f949 	bl	80025b4 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002322:	79bb      	ldrb	r3, [r7, #6]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d123      	bne.n	8002370 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	4a13      	ldr	r2, [pc, #76]	@ (8002378 <BSP_PB_Init+0xd4>)
 800232c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002330:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002332:	2301      	movs	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8002336:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800233a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <BSP_PB_Init+0xd8>)
 8002340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002344:	f107 020c 	add.w	r2, r7, #12
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fa66 	bl	800281c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	4a0b      	ldr	r2, [pc, #44]	@ (8002380 <BSP_PB_Init+0xdc>)
 8002354:	5cd3      	ldrb	r3, [r2, r3]
 8002356:	b25b      	sxtb	r3, r3
 8002358:	2200      	movs	r2, #0
 800235a:	210f      	movs	r1, #15
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fa28 	bl	80027b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	4a06      	ldr	r2, [pc, #24]	@ (8002380 <BSP_PB_Init+0xdc>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	b25b      	sxtb	r3, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fa3b 	bl	80027e6 <HAL_NVIC_EnableIRQ>
  }
}
 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	08008658 	.word	0x08008658
 800237c:	20000018 	.word	0x20000018
 8002380:	08008660 	.word	0x08008660

08002384 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d903      	bls.n	80023a2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800239a:	f06f 0301 	mvn.w	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e018      	b.n	80023d4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	2294      	movs	r2, #148	@ 0x94
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <BSP_COM_Init+0x5c>)
 80023ac:	4413      	add	r3, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f84a 	bl	8002448 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	2294      	movs	r2, #148	@ 0x94
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	4a08      	ldr	r2, [pc, #32]	@ (80023e0 <BSP_COM_Init+0x5c>)
 80023be:	4413      	add	r3, r2
 80023c0:	6839      	ldr	r1, [r7, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f80e 	bl	80023e4 <MX_LPUART1_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80023ce:	f06f 0303 	mvn.w	r3, #3
 80023d2:	e000      	b.n	80023d6 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80023d4:	68fb      	ldr	r3, [r7, #12]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000514 	.word	0x20000514

080023e4 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <MX_LPUART1_Init+0x60>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	220c      	movs	r2, #12
 8002402:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	895b      	ldrh	r3, [r3, #10]
 8002408:	461a      	mov	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	891b      	ldrh	r3, [r3, #8]
 800241a:	461a      	mov	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	899b      	ldrh	r3, [r3, #12]
 8002424:	461a      	mov	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002430:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f004 fa40 	bl	80068b8 <HAL_UART_Init>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000024 	.word	0x20000024

08002448 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002450:	2002      	movs	r0, #2
 8002452:	f7ff fea0 	bl	8002196 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8002456:	2002      	movs	r0, #2
 8002458:	f7ff fe9d 	bl	8002196 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800245c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002460:	f7ff feb2 	bl	80021c8 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002464:	2340      	movs	r3, #64	@ 0x40
 8002466:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800246c:	2302      	movs	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002470:	2301      	movs	r3, #1
 8002472:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002474:	2307      	movs	r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	4619      	mov	r1, r3
 800247e:	4809      	ldr	r0, [pc, #36]	@ (80024a4 <COM1_MspInit+0x5c>)
 8002480:	f000 f9cc 	bl	800281c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800248c:	2307      	movs	r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	4619      	mov	r1, r3
 8002496:	4803      	ldr	r0, [pc, #12]	@ (80024a4 <COM1_MspInit+0x5c>)
 8002498:	f000 f9c0 	bl	800281c <HAL_GPIO_Init>
}
 800249c:	bf00      	nop
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	48000400 	.word	0x48000400

080024a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b2:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_Init+0x3c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a0b      	ldr	r2, [pc, #44]	@ (80024e4 <HAL_Init+0x3c>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024be:	2003      	movs	r0, #3
 80024c0:	f000 f96c 	bl	800279c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c4:	2000      	movs	r0, #0
 80024c6:	f000 f80f 	bl	80024e8 <HAL_InitTick>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	71fb      	strb	r3, [r7, #7]
 80024d4:	e001      	b.n	80024da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024d6:	f7ff fbfc 	bl	8001cd2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024da:	79fb      	ldrb	r3, [r7, #7]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	58004000 	.word	0x58004000

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80024f4:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <HAL_InitTick+0x6c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d024      	beq.n	8002546 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024fc:	f002 fb00 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <HAL_InitTick+0x6c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800250c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f974 	bl	8002802 <HAL_SYSTICK_Config>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10f      	bne.n	8002540 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	d809      	bhi.n	800253a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002526:	2200      	movs	r2, #0
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	f04f 30ff 	mov.w	r0, #4294967295
 800252e:	f000 f940 	bl	80027b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002532:	4a09      	ldr	r2, [pc, #36]	@ (8002558 <HAL_InitTick+0x70>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e007      	b.n	800254a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e004      	b.n	800254a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	e001      	b.n	800254a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	2000002c 	.word	0x2000002c
 8002558:	20000028 	.word	0x20000028

0800255c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_IncTick+0x20>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_IncTick+0x24>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <HAL_IncTick+0x24>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	2000002c 	.word	0x2000002c
 8002580:	200005a8 	.word	0x200005a8

08002584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <HAL_GetTick+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	200005a8 	.word	0x200005a8

0800259c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_GetTickPrio+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000028 	.word	0x20000028

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffe2 	bl	8002584 <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffd2 	bl	8002584 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000002c 	.word	0x2000002c

080025fc <__NVIC_SetPriorityGrouping>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800260c:	4b0c      	ldr	r3, [pc, #48]	@ (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	@ (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_GetPriorityGrouping>:
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b04      	ldr	r3, [pc, #16]	@ (800265c <__NVIC_GetPriorityGrouping+0x18>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 0307 	and.w	r3, r3, #7
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_EnableIRQ>:
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	2b00      	cmp	r3, #0
 8002670:	db0b      	blt.n	800268a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4907      	ldr	r1, [pc, #28]	@ (8002698 <__NVIC_EnableIRQ+0x38>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2001      	movs	r0, #1
 8002682:	fa00 f202 	lsl.w	r2, r0, r2
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	@ (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	@ (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	@ 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <SysTick_Config>:
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002768:	d301      	bcc.n	800276e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800276a:	2301      	movs	r3, #1
 800276c:	e00f      	b.n	800278e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276e:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <SysTick_Config+0x40>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002776:	210f      	movs	r1, #15
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f7ff ff8e 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <SysTick_Config+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002786:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <SysTick_Config+0x40>)
 8002788:	2207      	movs	r2, #7
 800278a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff29 	bl	80025fc <__NVIC_SetPriorityGrouping>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027c0:	f7ff ff40 	bl	8002644 <__NVIC_GetPriorityGrouping>
 80027c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	6978      	ldr	r0, [r7, #20]
 80027cc:	f7ff ff90 	bl	80026f0 <NVIC_EncodePriority>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff5f 	bl	800269c <__NVIC_SetPriority>
}
 80027de:	bf00      	nop
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff33 	bl	8002660 <__NVIC_EnableIRQ>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ffa4 	bl	8002758 <SysTick_Config>
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282a:	e14c      	b.n	8002ac6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2101      	movs	r1, #1
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	4013      	ands	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 813e 	beq.w	8002ac0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b01      	cmp	r3, #1
 800284e:	d005      	beq.n	800285c <HAL_GPIO_Init+0x40>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d130      	bne.n	80028be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002892:	2201      	movs	r2, #1
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 0201 	and.w	r2, r3, #1
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d017      	beq.n	80028fa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d123      	bne.n	800294e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	08da      	lsrs	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3208      	adds	r2, #8
 800290e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	220f      	movs	r2, #15
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	08da      	lsrs	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3208      	adds	r2, #8
 8002948:	6939      	ldr	r1, [r7, #16]
 800294a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0203 	and.w	r2, r3, #3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8098 	beq.w	8002ac0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002990:	4a54      	ldr	r2, [pc, #336]	@ (8002ae4 <HAL_GPIO_Init+0x2c8>)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029ba:	d019      	beq.n	80029f0 <HAL_GPIO_Init+0x1d4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae8 <HAL_GPIO_Init+0x2cc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d013      	beq.n	80029ec <HAL_GPIO_Init+0x1d0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a49      	ldr	r2, [pc, #292]	@ (8002aec <HAL_GPIO_Init+0x2d0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00d      	beq.n	80029e8 <HAL_GPIO_Init+0x1cc>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a48      	ldr	r2, [pc, #288]	@ (8002af0 <HAL_GPIO_Init+0x2d4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d007      	beq.n	80029e4 <HAL_GPIO_Init+0x1c8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a47      	ldr	r2, [pc, #284]	@ (8002af4 <HAL_GPIO_Init+0x2d8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_GPIO_Init+0x1c4>
 80029dc:	2304      	movs	r3, #4
 80029de:	e008      	b.n	80029f2 <HAL_GPIO_Init+0x1d6>
 80029e0:	2307      	movs	r3, #7
 80029e2:	e006      	b.n	80029f2 <HAL_GPIO_Init+0x1d6>
 80029e4:	2303      	movs	r3, #3
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_Init+0x1d6>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_Init+0x1d6>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_Init+0x1d6>
 80029f0:	2300      	movs	r3, #0
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a02:	4938      	ldr	r1, [pc, #224]	@ (8002ae4 <HAL_GPIO_Init+0x2c8>)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a10:	4b39      	ldr	r3, [pc, #228]	@ (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a34:	4a30      	ldr	r2, [pc, #192]	@ (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a5e:	4a26      	ldr	r2, [pc, #152]	@ (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a64:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002a92:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f aeab 	bne.w	800282c <HAL_GPIO_Init+0x10>
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	48000400 	.word	0x48000400
 8002aec:	48000800 	.word	0x48000800
 8002af0:	48000c00 	.word	0x48000c00
 8002af4:	48001000 	.word	0x48001000
 8002af8:	58000800 	.word	0x58000800

08002afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b0c:	787b      	ldrb	r3, [r7, #1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b18:	e002      	b.n	8002b20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43d9      	mvns	r1, r3
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e08d      	b.n	8002c8e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff f8aa 	bl	8001ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	@ 0x24
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	e006      	b.n	8002be8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002be6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d108      	bne.n	8002c02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	e007      	b.n	8002c12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69d9      	ldr	r1, [r3, #28]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	817b      	strh	r3, [r7, #10]
 8002caa:	460b      	mov	r3, r1
 8002cac:	813b      	strh	r3, [r7, #8]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	f040 80f9 	bne.w	8002eb2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_I2C_Mem_Write+0x34>
 8002cc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0ed      	b.n	8002eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_I2C_Mem_Write+0x4e>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e0e6      	b.n	8002eb4 <HAL_I2C_Mem_Write+0x21c>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cee:	f7ff fc49 	bl	8002584 <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	2319      	movs	r3, #25
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fac3 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0d1      	b.n	8002eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2221      	movs	r2, #33	@ 0x21
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2240      	movs	r2, #64	@ 0x40
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a3a      	ldr	r2, [r7, #32]
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d38:	88f8      	ldrh	r0, [r7, #6]
 8002d3a:	893a      	ldrh	r2, [r7, #8]
 8002d3c:	8979      	ldrh	r1, [r7, #10]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4603      	mov	r3, r0
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f9d3 	bl	80030f4 <I2C_RequestMemoryWrite>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0a9      	b.n	8002eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2bff      	cmp	r3, #255	@ 0xff
 8002d68:	d90e      	bls.n	8002d88 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	22ff      	movs	r2, #255	@ 0xff
 8002d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	8979      	ldrh	r1, [r7, #10]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fc47 	bl	8003614 <I2C_TransferConfig>
 8002d86:	e00f      	b.n	8002da8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	8979      	ldrh	r1, [r7, #10]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fc36 	bl	8003614 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fac6 	bl	800333e <I2C_WaitOnTXISFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e07b      	b.n	8002eb4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d034      	beq.n	8002e60 <HAL_I2C_Mem_Write+0x1c8>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d130      	bne.n	8002e60 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	@ 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fa3f 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e04d      	b.n	8002eb4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2bff      	cmp	r3, #255	@ 0xff
 8002e20:	d90e      	bls.n	8002e40 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	22ff      	movs	r2, #255	@ 0xff
 8002e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	8979      	ldrh	r1, [r7, #10]
 8002e30:	2300      	movs	r3, #0
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fbeb 	bl	8003614 <I2C_TransferConfig>
 8002e3e:	e00f      	b.n	8002e60 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	8979      	ldrh	r1, [r7, #10]
 8002e52:	2300      	movs	r3, #0
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fbda 	bl	8003614 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d19e      	bne.n	8002da8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 faac 	bl	80033cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e01a      	b.n	8002eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2220      	movs	r2, #32
 8002e84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_I2C_Mem_Write+0x224>)
 8002e92:	400b      	ands	r3, r1
 8002e94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002eb2:	2302      	movs	r3, #2
  }
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	fe00e800 	.word	0xfe00e800

08002ec0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	817b      	strh	r3, [r7, #10]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	813b      	strh	r3, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	f040 80fd 	bne.w	80030e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x34>
 8002eee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002efa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0f1      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Mem_Read+0x4e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0ea      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f16:	f7ff fb35 	bl	8002584 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2319      	movs	r3, #25
 8002f22:	2201      	movs	r2, #1
 8002f24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f9af 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0d5      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2222      	movs	r2, #34	@ 0x22
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2240      	movs	r2, #64	@ 0x40
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a3a      	ldr	r2, [r7, #32]
 8002f52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f60:	88f8      	ldrh	r0, [r7, #6]
 8002f62:	893a      	ldrh	r2, [r7, #8]
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	4603      	mov	r3, r0
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f913 	bl	800319c <I2C_RequestMemoryRead>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0ad      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2bff      	cmp	r3, #255	@ 0xff
 8002f90:	d90e      	bls.n	8002fb0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	22ff      	movs	r2, #255	@ 0xff
 8002f96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	8979      	ldrh	r1, [r7, #10]
 8002fa0:	4b52      	ldr	r3, [pc, #328]	@ (80030ec <HAL_I2C_Mem_Read+0x22c>)
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 fb33 	bl	8003614 <I2C_TransferConfig>
 8002fae:	e00f      	b.n	8002fd0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <HAL_I2C_Mem_Read+0x22c>)
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fb22 	bl	8003614 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2104      	movs	r1, #4
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f956 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07c      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d034      	beq.n	8003090 <HAL_I2C_Mem_Read+0x1d0>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d130      	bne.n	8003090 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003034:	2200      	movs	r2, #0
 8003036:	2180      	movs	r1, #128	@ 0x80
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f927 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e04d      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2bff      	cmp	r3, #255	@ 0xff
 8003050:	d90e      	bls.n	8003070 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	22ff      	movs	r2, #255	@ 0xff
 8003056:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305c:	b2da      	uxtb	r2, r3
 800305e:	8979      	ldrh	r1, [r7, #10]
 8003060:	2300      	movs	r3, #0
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fad3 	bl	8003614 <I2C_TransferConfig>
 800306e:	e00f      	b.n	8003090 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307e:	b2da      	uxtb	r2, r3
 8003080:	8979      	ldrh	r1, [r7, #10]
 8003082:	2300      	movs	r3, #0
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fac2 	bl	8003614 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d19a      	bne.n	8002fd0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f994 	bl	80033cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e01a      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2220      	movs	r2, #32
 80030b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <HAL_I2C_Mem_Read+0x230>)
 80030c2:	400b      	ands	r3, r1
 80030c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	80002400 	.word	0x80002400
 80030f0:	fe00e800 	.word	0xfe00e800

080030f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	4603      	mov	r3, r0
 8003104:	817b      	strh	r3, [r7, #10]
 8003106:	460b      	mov	r3, r1
 8003108:	813b      	strh	r3, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	8979      	ldrh	r1, [r7, #10]
 8003114:	4b20      	ldr	r3, [pc, #128]	@ (8003198 <I2C_RequestMemoryWrite+0xa4>)
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fa79 	bl	8003614 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	69b9      	ldr	r1, [r7, #24]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f909 	bl	800333e <I2C_WaitOnTXISFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e02c      	b.n	8003190 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	629a      	str	r2, [r3, #40]	@ 0x28
 8003146:	e015      	b.n	8003174 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003148:	893b      	ldrh	r3, [r7, #8]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	b29b      	uxth	r3, r3
 800314e:	b2da      	uxtb	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	69b9      	ldr	r1, [r7, #24]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f8ef 	bl	800333e <I2C_WaitOnTXISFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e012      	b.n	8003190 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800316a:	893b      	ldrh	r3, [r7, #8]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2200      	movs	r2, #0
 800317c:	2180      	movs	r1, #128	@ 0x80
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f884 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	80002000 	.word	0x80002000

0800319c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	4608      	mov	r0, r1
 80031a6:	4611      	mov	r1, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	817b      	strh	r3, [r7, #10]
 80031ae:	460b      	mov	r3, r1
 80031b0:	813b      	strh	r3, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	8979      	ldrh	r1, [r7, #10]
 80031bc:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <I2C_RequestMemoryRead+0xa4>)
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	2300      	movs	r3, #0
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fa26 	bl	8003614 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	69b9      	ldr	r1, [r7, #24]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f8b6 	bl	800333e <I2C_WaitOnTXISFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e02c      	b.n	8003236 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d105      	bne.n	80031ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031e2:	893b      	ldrh	r3, [r7, #8]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80031ec:	e015      	b.n	800321a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031ee:	893b      	ldrh	r3, [r7, #8]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	69b9      	ldr	r1, [r7, #24]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f89c 	bl	800333e <I2C_WaitOnTXISFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e012      	b.n	8003236 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003210:	893b      	ldrh	r3, [r7, #8]
 8003212:	b2da      	uxtb	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2200      	movs	r2, #0
 8003222:	2140      	movs	r1, #64	@ 0x40
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f831 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	80002000 	.word	0x80002000

08003244 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d103      	bne.n	8003262 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d007      	beq.n	8003280 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	619a      	str	r2, [r3, #24]
  }
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800329c:	e03b      	b.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f8d6 	bl	8003454 <I2C_IsErrorOccurred>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e041      	b.n	8003336 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d02d      	beq.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ba:	f7ff f963 	bl	8002584 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d122      	bne.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d113      	bne.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e00f      	b.n	8003336 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4013      	ands	r3, r2
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	429a      	cmp	r2, r3
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	429a      	cmp	r2, r3
 8003332:	d0b4      	beq.n	800329e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800334a:	e033      	b.n	80033b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f87f 	bl	8003454 <I2C_IsErrorOccurred>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e031      	b.n	80033c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003366:	d025      	beq.n	80033b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003368:	f7ff f90c 	bl	8002584 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	429a      	cmp	r2, r3
 8003376:	d302      	bcc.n	800337e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11a      	bne.n	80033b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b02      	cmp	r3, #2
 800338a:	d013      	beq.n	80033b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003390:	f043 0220 	orr.w	r2, r3, #32
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e007      	b.n	80033c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d1c4      	bne.n	800334c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d8:	e02f      	b.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f838 	bl	8003454 <I2C_IsErrorOccurred>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e02d      	b.n	800344a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7ff f8c9 	bl	8002584 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11a      	bne.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b20      	cmp	r3, #32
 8003410:	d013      	beq.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e007      	b.n	800344a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b20      	cmp	r3, #32
 8003446:	d1c8      	bne.n	80033da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	@ 0x28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	d068      	beq.n	8003552 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2210      	movs	r2, #16
 8003486:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003488:	e049      	b.n	800351e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d045      	beq.n	800351e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003492:	f7ff f877 	bl	8002584 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <I2C_IsErrorOccurred+0x54>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d13a      	bne.n	800351e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ca:	d121      	bne.n	8003510 <I2C_IsErrorOccurred+0xbc>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034d2:	d01d      	beq.n	8003510 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d01a      	beq.n	8003510 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034ea:	f7ff f84b 	bl	8002584 <HAL_GetTick>
 80034ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f0:	e00e      	b.n	8003510 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034f2:	f7ff f847 	bl	8002584 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b19      	cmp	r3, #25
 80034fe:	d907      	bls.n	8003510 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	f043 0320 	orr.w	r3, r3, #32
 8003506:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800350e:	e006      	b.n	800351e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b20      	cmp	r3, #32
 800351c:	d1e9      	bne.n	80034f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b20      	cmp	r3, #32
 800352a:	d003      	beq.n	8003534 <I2C_IsErrorOccurred+0xe0>
 800352c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0aa      	beq.n	800348a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003538:	2b00      	cmp	r3, #0
 800353a:	d103      	bne.n	8003544 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2220      	movs	r2, #32
 8003542:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00b      	beq.n	800357c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003574:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f043 0308 	orr.w	r3, r3, #8
 800358c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003596:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80035c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01c      	beq.n	8003602 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff fe3b 	bl	8003244 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <I2C_IsErrorOccurred+0x1bc>)
 80035da:	400b      	ands	r3, r1
 80035dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003606:	4618      	mov	r0, r3
 8003608:	3728      	adds	r7, #40	@ 0x28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	fe00e800 	.word	0xfe00e800

08003614 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	460b      	mov	r3, r1
 8003620:	817b      	strh	r3, [r7, #10]
 8003622:	4613      	mov	r3, r2
 8003624:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003626:	897b      	ldrh	r3, [r7, #10]
 8003628:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800362c:	7a7b      	ldrb	r3, [r7, #9]
 800362e:	041b      	lsls	r3, r3, #16
 8003630:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003634:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	4313      	orrs	r3, r2
 800363e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003642:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	0d5b      	lsrs	r3, r3, #21
 800364e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003652:	4b08      	ldr	r3, [pc, #32]	@ (8003674 <I2C_TransferConfig+0x60>)
 8003654:	430b      	orrs	r3, r1
 8003656:	43db      	mvns	r3, r3
 8003658:	ea02 0103 	and.w	r1, r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	03ff63ff 	.word	0x03ff63ff

08003678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b20      	cmp	r3, #32
 800368c:	d138      	bne.n	8003700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003698:	2302      	movs	r3, #2
 800369a:	e032      	b.n	8003702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2224      	movs	r2, #36	@ 0x24
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b20      	cmp	r3, #32
 8003722:	d139      	bne.n	8003798 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800372e:	2302      	movs	r3, #2
 8003730:	e033      	b.n	800379a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2224      	movs	r2, #36	@ 0x24
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003760:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0c0      	b.n	800393a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fe fb4b 	bl	8001e68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2203      	movs	r2, #3
 80037d6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 fd0b 	bl	80071fa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e03e      	b.n	8003868 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	440b      	add	r3, r1
 80037f8:	3311      	adds	r3, #17
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	440b      	add	r3, r1
 800380c:	3310      	adds	r3, #16
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	3313      	adds	r3, #19
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	3320      	adds	r3, #32
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800383a:	7bfa      	ldrb	r2, [r7, #15]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	440b      	add	r3, r1
 8003848:	3324      	adds	r3, #36	@ 0x24
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	440b      	add	r3, r1
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	3301      	adds	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	791b      	ldrb	r3, [r3, #4]
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	429a      	cmp	r2, r3
 8003870:	d3bb      	bcc.n	80037ea <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
 8003876:	e044      	b.n	8003902 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	440b      	add	r3, r1
 8003886:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	440b      	add	r3, r1
 80038b2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	440b      	add	r3, r1
 80038c8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	440b      	add	r3, r1
 80038de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	3301      	adds	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	791b      	ldrb	r3, [r3, #4]
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	429a      	cmp	r2, r3
 800390a:	d3b5      	bcc.n	8003878 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003918:	f003 fc8a 	bl	8007230 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7a9b      	ldrb	r3, [r3, #10]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d102      	bne.n	8003938 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f805 	bl	8003942 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003966:	b29b      	uxth	r3, r3
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800397a:	b29b      	uxth	r3, r3
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800399c:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a04      	ldr	r2, [pc, #16]	@ (80039b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a6:	6013      	str	r3, [r2, #0]
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	58000400 	.word	0x58000400

080039b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80039bc:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	58000400 	.word	0x58000400

080039d4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039e6:	d101      	bne.n	80039ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80039fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003a16:	b480      	push	{r7}
 8003a18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a46:	d101      	bne.n	8003a4c <LL_RCC_HSE_IsReady+0x18>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <LL_RCC_HSE_IsReady+0x1a>
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a6a:	6013      	str	r3, [r2, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003a76:	b480      	push	{r7}
 8003a78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa6:	d101      	bne.n	8003aac <LL_RCC_HSI_IsReady+0x18>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <LL_RCC_HSI_IsReady+0x1a>
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d101      	bne.n	8003b3e <LL_RCC_HSI48_IsReady+0x18>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <LL_RCC_HSI48_IsReady+0x1a>
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ba6:	bf00      	nop
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bc0:	f023 0304 	bic.w	r3, r3, #4
 8003bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d101      	bne.n	8003bea <LL_RCC_LSE_IsReady+0x18>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <LL_RCC_LSE_IsReady+0x1a>
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c0e:	bf00      	nop
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d101      	bne.n	8003c52 <LL_RCC_LSI1_IsReady+0x18>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <LL_RCC_LSI1_IsReady+0x1a>
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d101      	bne.n	8003cba <LL_RCC_LSI2_IsReady+0x18>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <LL_RCC_LSI2_IsReady+0x1a>
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6013      	str	r3, [r2, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	6013      	str	r3, [r2, #0]
}
 8003d26:	bf00      	nop
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d101      	bne.n	8003d46 <LL_RCC_MSI_IsReady+0x16>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <LL_RCC_MSI_IsReady+0x18>
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d8a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2bb0      	cmp	r3, #176	@ 0xb0
 8003d90:	d901      	bls.n	8003d96 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003d92:	23b0      	movs	r3, #176	@ 0xb0
 8003d94:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003d96:	687b      	ldr	r3, [r7, #4]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 0203 	bic.w	r2, r3, #3
 8003de0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 030c 	and.w	r3, r3, #12
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e72:	f023 020f 	bic.w	r2, r3, #15
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ea2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003eca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f00:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f56:	6013      	str	r3, [r2, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003f62:	b480      	push	{r7}
 8003f64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f74:	6013      	str	r3, [r2, #0]
}
 8003f76:	bf00      	nop
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f92:	d101      	bne.n	8003f98 <LL_RCC_PLL_IsReady+0x18>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <LL_RCC_PLL_IsReady+0x1a>
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800400a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004018:	d101      	bne.n	800401e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004032:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800403e:	d101      	bne.n	8004044 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004058:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800405c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004064:	d101      	bne.n	800406a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004088:	d101      	bne.n	800408e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800409a:	b480      	push	{r7}
 800409c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040ac:	d101      	bne.n	80040b2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b08d      	sub	sp, #52	@ 0x34
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e363      	b.n	800479a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 808d 	beq.w	80041fa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e0:	f7ff fe89 	bl	8003df6 <LL_RCC_GetSysClkSource>
 80040e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e6:	f7ff ff82 	bl	8003fee <LL_RCC_PLL_GetMainSource>
 80040ea:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_RCC_OscConfig+0x3e>
 80040f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d147      	bne.n	8004188 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80040f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d144      	bne.n	8004188 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e347      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800410e:	f7ff fe34 	bl	8003d7a <LL_RCC_MSI_GetRange>
 8004112:	4603      	mov	r3, r0
 8004114:	429c      	cmp	r4, r3
 8004116:	d914      	bls.n	8004142 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fd2f 	bl	8004b80 <RCC_SetFlashLatencyFromMSIRange>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e336      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fe0e 	bl	8003d52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fe32 	bl	8003da4 <LL_RCC_MSI_SetCalibTrimming>
 8004140:	e013      	b.n	800416a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fe03 	bl	8003d52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff fe27 	bl	8003da4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fd10 	bl	8004b80 <RCC_SetFlashLatencyFromMSIRange>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e317      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800416a:	f000 fcc9 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 800416e:	4603      	mov	r3, r0
 8004170:	4aa4      	ldr	r2, [pc, #656]	@ (8004404 <HAL_RCC_OscConfig+0x344>)
 8004172:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004174:	4ba4      	ldr	r3, [pc, #656]	@ (8004408 <HAL_RCC_OscConfig+0x348>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe f9b5 	bl	80024e8 <HAL_InitTick>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d039      	beq.n	80041f8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e308      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01e      	beq.n	80041ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004190:	f7ff fdb0 	bl	8003cf4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004194:	f7fe f9f6 	bl	8002584 <HAL_GetTick>
 8004198:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800419c:	f7fe f9f2 	bl	8002584 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e2f5      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80041ae:	f7ff fdbf 	bl	8003d30 <LL_RCC_MSI_IsReady>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f1      	beq.n	800419c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fdc8 	bl	8003d52 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fdec 	bl	8003da4 <LL_RCC_MSI_SetCalibTrimming>
 80041cc:	e015      	b.n	80041fa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041ce:	f7ff fda0 	bl	8003d12 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041d2:	f7fe f9d7 	bl	8002584 <HAL_GetTick>
 80041d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041da:	f7fe f9d3 	bl	8002584 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e2d6      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80041ec:	f7ff fda0 	bl	8003d30 <LL_RCC_MSI_IsReady>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f1      	bne.n	80041da <HAL_RCC_OscConfig+0x11a>
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80041f8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d047      	beq.n	8004296 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004206:	f7ff fdf6 	bl	8003df6 <LL_RCC_GetSysClkSource>
 800420a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800420c:	f7ff feef 	bl	8003fee <LL_RCC_PLL_GetMainSource>
 8004210:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d005      	beq.n	8004224 <HAL_RCC_OscConfig+0x164>
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d108      	bne.n	8004230 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d105      	bne.n	8004230 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d134      	bne.n	8004296 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e2b4      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004238:	d102      	bne.n	8004240 <HAL_RCC_OscConfig+0x180>
 800423a:	f7ff fbdd 	bl	80039f8 <LL_RCC_HSE_Enable>
 800423e:	e001      	b.n	8004244 <HAL_RCC_OscConfig+0x184>
 8004240:	f7ff fbe9 	bl	8003a16 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d012      	beq.n	8004272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe f99a 	bl	8002584 <HAL_GetTick>
 8004250:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004254:	f7fe f996 	bl	8002584 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	@ 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e299      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004266:	f7ff fbe5 	bl	8003a34 <LL_RCC_HSE_IsReady>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f1      	beq.n	8004254 <HAL_RCC_OscConfig+0x194>
 8004270:	e011      	b.n	8004296 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fe f987 	bl	8002584 <HAL_GetTick>
 8004276:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427a:	f7fe f983 	bl	8002584 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b64      	cmp	r3, #100	@ 0x64
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e286      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800428c:	f7ff fbd2 	bl	8003a34 <LL_RCC_HSE_IsReady>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f1      	bne.n	800427a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d04c      	beq.n	800433c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a2:	f7ff fda8 	bl	8003df6 <LL_RCC_GetSysClkSource>
 80042a6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a8:	f7ff fea1 	bl	8003fee <LL_RCC_PLL_GetMainSource>
 80042ac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_OscConfig+0x200>
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d10e      	bne.n	80042d8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d10b      	bne.n	80042d8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e266      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fbf1 	bl	8003ab8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042d6:	e031      	b.n	800433c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d019      	beq.n	8004314 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e0:	f7ff fbba 	bl	8003a58 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fe f94e 	bl	8002584 <HAL_GetTick>
 80042e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ec:	f7fe f94a 	bl	8002584 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e24d      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80042fe:	f7ff fbc9 	bl	8003a94 <LL_RCC_HSI_IsReady>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f1      	beq.n	80042ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fbd3 	bl	8003ab8 <LL_RCC_HSI_SetCalibTrimming>
 8004312:	e013      	b.n	800433c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004314:	f7ff fbaf 	bl	8003a76 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fe f934 	bl	8002584 <HAL_GetTick>
 800431c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004320:	f7fe f930 	bl	8002584 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e233      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004332:	f7ff fbaf 	bl	8003a94 <LL_RCC_HSI_IsReady>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f1      	bne.n	8004320 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80a3 	beq.w	800449c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d076      	beq.n	800444c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	d046      	beq.n	80043f8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800436a:	f7ff fc66 	bl	8003c3a <LL_RCC_LSI1_IsReady>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d113      	bne.n	800439c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004374:	f7ff fc3f 	bl	8003bf6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004378:	f7fe f904 	bl	8002584 <HAL_GetTick>
 800437c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004380:	f7fe f900 	bl	8002584 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e203      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004392:	f7ff fc52 	bl	8003c3a <LL_RCC_LSI1_IsReady>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f1      	beq.n	8004380 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800439c:	f7ff fc5f 	bl	8003c5e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fe f8f0 	bl	8002584 <HAL_GetTick>
 80043a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043a8:	f7fe f8ec 	bl	8002584 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1ef      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043ba:	f7ff fc72 	bl	8003ca2 <LL_RCC_LSI2_IsReady>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f1      	beq.n	80043a8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fc7c 	bl	8003cc6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80043ce:	f7ff fc23 	bl	8003c18 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fe f8d7 	bl	8002584 <HAL_GetTick>
 80043d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043da:	f7fe f8d3 	bl	8002584 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e1d6      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80043ec:	f7ff fc25 	bl	8003c3a <LL_RCC_LSI1_IsReady>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f1      	bne.n	80043da <HAL_RCC_OscConfig+0x31a>
 80043f6:	e051      	b.n	800449c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80043f8:	f7ff fbfd 	bl	8003bf6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fe f8c2 	bl	8002584 <HAL_GetTick>
 8004400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004402:	e00c      	b.n	800441e <HAL_RCC_OscConfig+0x35e>
 8004404:	20000008 	.word	0x20000008
 8004408:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800440c:	f7fe f8ba 	bl	8002584 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1bd      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800441e:	f7ff fc0c 	bl	8003c3a <LL_RCC_LSI1_IsReady>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f1      	beq.n	800440c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004428:	f7ff fc2a 	bl	8003c80 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800442e:	f7fe f8a9 	bl	8002584 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b03      	cmp	r3, #3
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e1ac      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004440:	f7ff fc2f 	bl	8003ca2 <LL_RCC_LSI2_IsReady>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f1      	bne.n	800442e <HAL_RCC_OscConfig+0x36e>
 800444a:	e027      	b.n	800449c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800444c:	f7ff fc18 	bl	8003c80 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fe f898 	bl	8002584 <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004458:	f7fe f894 	bl	8002584 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b03      	cmp	r3, #3
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e197      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800446a:	f7ff fc1a 	bl	8003ca2 <LL_RCC_LSI2_IsReady>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f1      	bne.n	8004458 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004474:	f7ff fbd0 	bl	8003c18 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fe f884 	bl	8002584 <HAL_GetTick>
 800447c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004480:	f7fe f880 	bl	8002584 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e183      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004492:	f7ff fbd2 	bl	8003c3a <LL_RCC_LSI1_IsReady>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f1      	bne.n	8004480 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d05b      	beq.n	8004560 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a8:	4ba7      	ldr	r3, [pc, #668]	@ (8004748 <HAL_RCC_OscConfig+0x688>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d114      	bne.n	80044de <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80044b4:	f7ff fa70 	bl	8003998 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b8:	f7fe f864 	bl	8002584 <HAL_GetTick>
 80044bc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fe f860 	bl	8002584 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e163      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d2:	4b9d      	ldr	r3, [pc, #628]	@ (8004748 <HAL_RCC_OscConfig+0x688>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <HAL_RCC_OscConfig+0x42c>
 80044e6:	f7ff fb30 	bl	8003b4a <LL_RCC_LSE_Enable>
 80044ea:	e00c      	b.n	8004506 <HAL_RCC_OscConfig+0x446>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d104      	bne.n	80044fe <HAL_RCC_OscConfig+0x43e>
 80044f4:	f7ff fb4b 	bl	8003b8e <LL_RCC_LSE_EnableBypass>
 80044f8:	f7ff fb27 	bl	8003b4a <LL_RCC_LSE_Enable>
 80044fc:	e003      	b.n	8004506 <HAL_RCC_OscConfig+0x446>
 80044fe:	f7ff fb35 	bl	8003b6c <LL_RCC_LSE_Disable>
 8004502:	f7ff fb55 	bl	8003bb0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d014      	beq.n	8004538 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450e:	f7fe f839 	bl	8002584 <HAL_GetTick>
 8004512:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004514:	e00a      	b.n	800452c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f7fe f835 	bl	8002584 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004524:	4293      	cmp	r3, r2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e136      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800452c:	f7ff fb51 	bl	8003bd2 <LL_RCC_LSE_IsReady>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ef      	beq.n	8004516 <HAL_RCC_OscConfig+0x456>
 8004536:	e013      	b.n	8004560 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fe f824 	bl	8002584 <HAL_GetTick>
 800453c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fe f820 	bl	8002584 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e121      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004556:	f7ff fb3c 	bl	8003bd2 <LL_RCC_LSE_IsReady>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ef      	bne.n	8004540 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d02c      	beq.n	80045c6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d014      	beq.n	800459e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004574:	f7ff fab5 	bl	8003ae2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004578:	f7fe f804 	bl	8002584 <HAL_GetTick>
 800457c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004580:	f7fe f800 	bl	8002584 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e103      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004592:	f7ff fac8 	bl	8003b26 <LL_RCC_HSI48_IsReady>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f1      	beq.n	8004580 <HAL_RCC_OscConfig+0x4c0>
 800459c:	e013      	b.n	80045c6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800459e:	f7ff fab1 	bl	8003b04 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a2:	f7fd ffef 	bl	8002584 <HAL_GetTick>
 80045a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045aa:	f7fd ffeb 	bl	8002584 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e0ee      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045bc:	f7ff fab3 	bl	8003b26 <LL_RCC_HSI48_IsReady>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f1      	bne.n	80045aa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80e4 	beq.w	8004798 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045d0:	f7ff fc11 	bl	8003df6 <LL_RCC_GetSysClkSource>
 80045d4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80045d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	f040 80b4 	bne.w	8004750 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0203 	and.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d123      	bne.n	800463e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d11c      	bne.n	800463e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d114      	bne.n	800463e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d10d      	bne.n	800463e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d106      	bne.n	800463e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d05d      	beq.n	80046fa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d058      	beq.n	80046f6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0a1      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004656:	f7ff fc84 	bl	8003f62 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800465a:	f7fd ff93 	bl	8002584 <HAL_GetTick>
 800465e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004662:	f7fd ff8f 	bl	8002584 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e092      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ef      	bne.n	8004662 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	4b30      	ldr	r3, [pc, #192]	@ (800474c <HAL_RCC_OscConfig+0x68c>)
 800468a:	4013      	ands	r3, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800469a:	0212      	lsls	r2, r2, #8
 800469c:	4311      	orrs	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046a2:	4311      	orrs	r1, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80046ae:	430a      	orrs	r2, r1
 80046b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046b8:	f7ff fc44 	bl	8003f44 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046cc:	f7fd ff5a 	bl	8002584 <HAL_GetTick>
 80046d0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd ff56 	bl	8002584 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e059      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ef      	beq.n	80046d4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f4:	e050      	b.n	8004798 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e04f      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d147      	bne.n	8004798 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004708:	f7ff fc1c 	bl	8003f44 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800470c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800471c:	f7fd ff32 	bl	8002584 <HAL_GetTick>
 8004720:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fd ff2e 	bl	8002584 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e031      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ef      	beq.n	8004724 <HAL_RCC_OscConfig+0x664>
 8004744:	e028      	b.n	8004798 <HAL_RCC_OscConfig+0x6d8>
 8004746:	bf00      	nop
 8004748:	58000400 	.word	0x58000400
 800474c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d01e      	beq.n	8004794 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	f7ff fc04 	bl	8003f62 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fd ff13 	bl	8002584 <HAL_GetTick>
 800475e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004762:	f7fd ff0f 	bl	8002584 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e012      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1ef      	bne.n	8004762 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_RCC_OscConfig+0x6e4>)
 800478e:	4013      	ands	r3, r2
 8004790:	60cb      	str	r3, [r1, #12]
 8004792:	e001      	b.n	8004798 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3734      	adds	r7, #52	@ 0x34
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd90      	pop	{r4, r7, pc}
 80047a2:	bf00      	nop
 80047a4:	eefefffc 	.word	0xeefefffc

080047a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e12d      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047bc:	4b98      	ldr	r3, [pc, #608]	@ (8004a20 <HAL_RCC_ClockConfig+0x278>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d91b      	bls.n	8004802 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b95      	ldr	r3, [pc, #596]	@ (8004a20 <HAL_RCC_ClockConfig+0x278>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 0207 	bic.w	r2, r3, #7
 80047d2:	4993      	ldr	r1, [pc, #588]	@ (8004a20 <HAL_RCC_ClockConfig+0x278>)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047da:	f7fd fed3 	bl	8002584 <HAL_GetTick>
 80047de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047e2:	f7fd fecf 	bl	8002584 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e111      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004a20 <HAL_RCC_ClockConfig+0x278>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d1ef      	bne.n	80047e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d016      	beq.n	800483c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fafb 	bl	8003e0e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004818:	f7fd feb4 	bl	8002584 <HAL_GetTick>
 800481c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004820:	f7fd feb0 	bl	8002584 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e0f2      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004832:	f7ff fbe8 	bl	8004006 <LL_RCC_IsActiveFlag_HPRE>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f1      	beq.n	8004820 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d016      	beq.n	8004876 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff faf2 	bl	8003e36 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004852:	f7fd fe97 	bl	8002584 <HAL_GetTick>
 8004856:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004858:	e008      	b.n	800486c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800485a:	f7fd fe93 	bl	8002584 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e0d5      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800486c:	f7ff fbdd 	bl	800402a <LL_RCC_IsActiveFlag_C2HPRE>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f1      	beq.n	800485a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d016      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff faeb 	bl	8003e62 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800488c:	f7fd fe7a 	bl	8002584 <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004894:	f7fd fe76 	bl	8002584 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e0b8      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048a6:	f7ff fbd3 	bl	8004050 <LL_RCC_IsActiveFlag_SHDHPRE>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f1      	beq.n	8004894 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d016      	beq.n	80048ea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fae5 	bl	8003e90 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048c6:	f7fd fe5d 	bl	8002584 <HAL_GetTick>
 80048ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048ce:	f7fd fe59 	bl	8002584 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e09b      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048e0:	f7ff fbc9 	bl	8004076 <LL_RCC_IsActiveFlag_PPRE1>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f1      	beq.n	80048ce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d017      	beq.n	8004926 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff fadb 	bl	8003eb8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004902:	f7fd fe3f 	bl	8002584 <HAL_GetTick>
 8004906:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800490a:	f7fd fe3b 	bl	8002584 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e07d      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800491c:	f7ff fbbd 	bl	800409a <LL_RCC_IsActiveFlag_PPRE2>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f1      	beq.n	800490a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d043      	beq.n	80049ba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d106      	bne.n	8004948 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800493a:	f7ff f87b 	bl	8003a34 <LL_RCC_HSE_IsReady>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11e      	bne.n	8004982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e067      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d106      	bne.n	800495e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004950:	f7ff fb16 	bl	8003f80 <LL_RCC_PLL_IsReady>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d113      	bne.n	8004982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e05c      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004966:	f7ff f9e3 	bl	8003d30 <LL_RCC_MSI_IsReady>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d108      	bne.n	8004982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e051      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004974:	f7ff f88e 	bl	8003a94 <LL_RCC_HSI_IsReady>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e04a      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fa21 	bl	8003dce <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498c:	f7fd fdfa 	bl	8002584 <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004992:	e00a      	b.n	80049aa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004994:	f7fd fdf6 	bl	8002584 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e036      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049aa:	f7ff fa24 	bl	8003df6 <LL_RCC_GetSysClkSource>
 80049ae:	4602      	mov	r2, r0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d1ec      	bne.n	8004994 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049ba:	4b19      	ldr	r3, [pc, #100]	@ (8004a20 <HAL_RCC_ClockConfig+0x278>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d21b      	bcs.n	8004a00 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c8:	4b15      	ldr	r3, [pc, #84]	@ (8004a20 <HAL_RCC_ClockConfig+0x278>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 0207 	bic.w	r2, r3, #7
 80049d0:	4913      	ldr	r1, [pc, #76]	@ (8004a20 <HAL_RCC_ClockConfig+0x278>)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d8:	f7fd fdd4 	bl	8002584 <HAL_GetTick>
 80049dc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049e0:	f7fd fdd0 	bl	8002584 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e012      	b.n	8004a18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <HAL_RCC_ClockConfig+0x278>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1ef      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a00:	f000 f87e 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4a07      	ldr	r2, [pc, #28]	@ (8004a24 <HAL_RCC_ClockConfig+0x27c>)
 8004a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004a0a:	f7fd fdc7 	bl	800259c <HAL_GetTickPrio>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fd fd69 	bl	80024e8 <HAL_InitTick>
 8004a16:	4603      	mov	r3, r0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	58004000 	.word	0x58004000
 8004a24:	20000008 	.word	0x20000008

08004a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2e:	f7ff f9e2 	bl	8003df6 <LL_RCC_GetSysClkSource>
 8004a32:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10a      	bne.n	8004a50 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a3a:	f7ff f99e 	bl	8003d7a <LL_RCC_MSI_GetRange>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	091b      	lsrs	r3, r3, #4
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	4a2b      	ldr	r2, [pc, #172]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e04b      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d102      	bne.n	8004a5c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a56:	4b28      	ldr	r3, [pc, #160]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e045      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d10a      	bne.n	8004a78 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a62:	f7fe ffb7 	bl	80039d4 <LL_RCC_HSE_IsEnabledDiv2>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d102      	bne.n	8004a72 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004a6c:	4b22      	ldr	r3, [pc, #136]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e03a      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004a72:	4b22      	ldr	r3, [pc, #136]	@ (8004afc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e037      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004a78:	f7ff fab9 	bl	8003fee <LL_RCC_PLL_GetMainSource>
 8004a7c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d003      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x64>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d003      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0x6a>
 8004a8a:	e00d      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a8e:	60bb      	str	r3, [r7, #8]
        break;
 8004a90:	e015      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a92:	f7fe ff9f 	bl	80039d4 <LL_RCC_HSE_IsEnabledDiv2>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004a9c:	4b16      	ldr	r3, [pc, #88]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a9e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004aa0:	e00d      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004aa2:	4b16      	ldr	r3, [pc, #88]	@ (8004afc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004aa4:	60bb      	str	r3, [r7, #8]
        break;
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004aa8:	f7ff f967 	bl	8003d7a <LL_RCC_MSI_GetRange>
 8004aac:	4603      	mov	r3, r0
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aba:	60bb      	str	r3, [r7, #8]
        break;
 8004abc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004abe:	f7ff fa71 	bl	8003fa4 <LL_RCC_PLL_GetN>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	fb03 f402 	mul.w	r4, r3, r2
 8004aca:	f7ff fa84 	bl	8003fd6 <LL_RCC_PLL_GetDivider>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	fbb4 f4f3 	udiv	r4, r4, r3
 8004ad8:	f7ff fa71 	bl	8003fbe <LL_RCC_PLL_GetR>
 8004adc:	4603      	mov	r3, r0
 8004ade:	0f5b      	lsrs	r3, r3, #29
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ae6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd90      	pop	{r4, r7, pc}
 8004af2:	bf00      	nop
 8004af4:	08008610 	.word	0x08008610
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	01e84800 	.word	0x01e84800

08004b00 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b598      	push	{r3, r4, r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b04:	f7ff ff90 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8004b08:	4604      	mov	r4, r0
 8004b0a:	f7ff f9e9 	bl	8003ee0 <LL_RCC_GetAHBPrescaler>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	4a03      	ldr	r2, [pc, #12]	@ (8004b24 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd98      	pop	{r3, r4, r7, pc}
 8004b24:	080085b0 	.word	0x080085b0

08004b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b28:	b598      	push	{r3, r4, r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b2c:	f7ff ffe8 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b30:	4604      	mov	r4, r0
 8004b32:	f7ff f9ef 	bl	8003f14 <LL_RCC_GetAPB1Prescaler>
 8004b36:	4603      	mov	r3, r0
 8004b38:	0a1b      	lsrs	r3, r3, #8
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	4a04      	ldr	r2, [pc, #16]	@ (8004b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd98      	pop	{r3, r4, r7, pc}
 8004b50:	080085f0 	.word	0x080085f0

08004b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b54:	b598      	push	{r3, r4, r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b58:	f7ff ffd2 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	f7ff f9e5 	bl	8003f2c <LL_RCC_GetAPB2Prescaler>
 8004b62:	4603      	mov	r3, r0
 8004b64:	0adb      	lsrs	r3, r3, #11
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	4a04      	ldr	r2, [pc, #16]	@ (8004b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd98      	pop	{r3, r4, r7, pc}
 8004b7c:	080085f0 	.word	0x080085f0

08004b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2bb0      	cmp	r3, #176	@ 0xb0
 8004b8c:	d903      	bls.n	8004b96 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004b8e:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	e007      	b.n	8004ba6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004ba6:	f7ff f9a7 	bl	8003ef8 <LL_RCC_GetAHB4Prescaler>
 8004baa:	4603      	mov	r3, r0
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8004be8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	0c9c      	lsrs	r4, r3, #18
 8004bca:	f7fe fef5 	bl	80039b8 <HAL_PWREx_GetVoltageRange>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 f80c 	bl	8004bf0 <RCC_SetFlashLatency>
 8004bd8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd90      	pop	{r4, r7, pc}
 8004be2:	bf00      	nop
 8004be4:	08008610 	.word	0x08008610
 8004be8:	080085b0 	.word	0x080085b0
 8004bec:	431bde83 	.word	0x431bde83

08004bf0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b093      	sub	sp, #76	@ 0x4c
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004bfa:	4b37      	ldr	r3, [pc, #220]	@ (8004cd8 <RCC_SetFlashLatency+0xe8>)
 8004bfc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004c06:	4a35      	ldr	r2, [pc, #212]	@ (8004cdc <RCC_SetFlashLatency+0xec>)
 8004c08:	f107 031c 	add.w	r3, r7, #28
 8004c0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c12:	4b33      	ldr	r3, [pc, #204]	@ (8004ce0 <RCC_SetFlashLatency+0xf0>)
 8004c14:	f107 040c 	add.w	r4, r7, #12
 8004c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c1e:	2300      	movs	r3, #0
 8004c20:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c28:	d11a      	bne.n	8004c60 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c2e:	e013      	b.n	8004c58 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	3348      	adds	r3, #72	@ 0x48
 8004c36:	443b      	add	r3, r7
 8004c38:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d807      	bhi.n	8004c52 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	3348      	adds	r3, #72	@ 0x48
 8004c48:	443b      	add	r3, r7
 8004c4a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004c4e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004c50:	e020      	b.n	8004c94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c54:	3301      	adds	r3, #1
 8004c56:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d9e8      	bls.n	8004c30 <RCC_SetFlashLatency+0x40>
 8004c5e:	e019      	b.n	8004c94 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c64:	e013      	b.n	8004c8e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	3348      	adds	r3, #72	@ 0x48
 8004c6c:	443b      	add	r3, r7
 8004c6e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d807      	bhi.n	8004c88 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	3348      	adds	r3, #72	@ 0x48
 8004c7e:	443b      	add	r3, r7
 8004c80:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004c84:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004c86:	e005      	b.n	8004c94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d9e8      	bls.n	8004c66 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004c94:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <RCC_SetFlashLatency+0xf4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f023 0207 	bic.w	r2, r3, #7
 8004c9c:	4911      	ldr	r1, [pc, #68]	@ (8004ce4 <RCC_SetFlashLatency+0xf4>)
 8004c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ca4:	f7fd fc6e 	bl	8002584 <HAL_GetTick>
 8004ca8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004caa:	e008      	b.n	8004cbe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cac:	f7fd fc6a 	bl	8002584 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e007      	b.n	8004cce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cbe:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <RCC_SetFlashLatency+0xf4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d1ef      	bne.n	8004cac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	374c      	adds	r7, #76	@ 0x4c
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd90      	pop	{r4, r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	08008584 	.word	0x08008584
 8004cdc:	08008594 	.word	0x08008594
 8004ce0:	080085a0 	.word	0x080085a0
 8004ce4:	58004000 	.word	0x58004000

08004ce8 <LL_RCC_LSE_IsEnabled>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <LL_RCC_LSE_IsEnabled+0x18>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <LL_RCC_LSE_IsEnabled+0x1a>
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <LL_RCC_LSE_IsReady>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d101      	bne.n	8004d24 <LL_RCC_LSE_IsReady+0x18>
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <LL_RCC_LSE_IsReady+0x1a>
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <LL_RCC_SetRFWKPClockSource>:
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <LL_RCC_SetSMPSClockSource>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	f023 0203 	bic.w	r2, r3, #3
 8004d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <LL_RCC_SetSMPSPrescaler>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <LL_RCC_SetUSARTClockSource>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbc:	f023 0203 	bic.w	r2, r3, #3
 8004dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <LL_RCC_SetLPUARTClockSource>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_RCC_SetI2CClockSource>:
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e10:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	401a      	ands	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004e28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <LL_RCC_SetLPTIMClockSource>:
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0c1b      	lsrs	r3, r3, #16
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	43db      	mvns	r3, r3
 8004e56:	401a      	ands	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_RCC_SetSAIClockSource>:
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <LL_RCC_SetRNGClockSource>:
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004eb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <LL_RCC_SetCLK48ClockSource>:
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ede:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <LL_RCC_SetUSBClockSource>:
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff ffe3 	bl	8004eca <LL_RCC_SetCLK48ClockSource>
}
 8004f04:	bf00      	nop
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <LL_RCC_SetADCClockSource>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_RCC_SetRTCClockSource>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <LL_RCC_GetRTCClockSource>:
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <LL_RCC_ForceBackupDomainReset>:
{
 8004f7e:	b480      	push	{r7}
 8004f80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f96:	bf00      	nop
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <LL_RCC_PLLSAI1_Enable>:
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fd4:	6013      	str	r3, [r2, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <LL_RCC_PLLSAI1_Disable>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ff2:	6013      	str	r3, [r2, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_RCC_PLLSAI1_IsReady>:
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800500c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005010:	d101      	bne.n	8005016 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b088      	sub	sp, #32
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800502a:	2300      	movs	r3, #0
 800502c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800502e:	2300      	movs	r3, #0
 8005030:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d034      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005042:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005046:	d021      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005048:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800504c:	d81b      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800504e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005052:	d01d      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005054:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005058:	d815      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800505e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005062:	d110      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800506e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005072:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005074:	e00d      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3304      	adds	r3, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f947 	bl	800530e <RCCEx_PLLSAI1_ConfigNP>
 8005080:	4603      	mov	r3, r0
 8005082:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005084:	e005      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	77fb      	strb	r3, [r7, #31]
        break;
 800508a:	e002      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800508c:	bf00      	nop
 800508e:	e000      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005092:	7ffb      	ldrb	r3, [r7, #31]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fee8 	bl	8004e72 <LL_RCC_SetSAIClockSource>
 80050a2:	e001      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a4:	7ffb      	ldrb	r3, [r7, #31]
 80050a6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d046      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80050b4:	f7ff ff56 	bl	8004f64 <LL_RCC_GetRTCClockSource>
 80050b8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d03c      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80050c4:	f7fe fc68 	bl	8003998 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d105      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff ff30 	bl	8004f38 <LL_RCC_SetRTCClockSource>
 80050d8:	e02e      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80050da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80050e4:	f7ff ff4b 	bl	8004f7e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80050e8:	f7ff ff5a 	bl	8004fa0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80050fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005104:	f7ff fdf0 	bl	8004ce8 <LL_RCC_LSE_IsEnabled>
 8005108:	4603      	mov	r3, r0
 800510a:	2b01      	cmp	r3, #1
 800510c:	d114      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800510e:	f7fd fa39 	bl	8002584 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005114:	e00b      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005116:	f7fd fa35 	bl	8002584 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005124:	4293      	cmp	r3, r2
 8005126:	d902      	bls.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	77fb      	strb	r3, [r7, #31]
              break;
 800512c:	e004      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800512e:	f7ff fded 	bl	8004d0c <LL_RCC_LSE_IsReady>
 8005132:	4603      	mov	r3, r0
 8005134:	2b01      	cmp	r3, #1
 8005136:	d1ee      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005138:	7ffb      	ldrb	r3, [r7, #31]
 800513a:	77bb      	strb	r3, [r7, #30]
 800513c:	e001      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513e:	7ffb      	ldrb	r3, [r7, #31]
 8005140:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fe2a 	bl	8004dac <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff fe35 	bl	8004dd8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fe5d 	bl	8004e3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff fe52 	bl	8004e3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d004      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fe2a 	bl	8004e04 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d004      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fe1f 	bl	8004e04 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d022      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fe8d 	bl	8004ef6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051e4:	d107      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051f4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051fe:	d10b      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f8dd 	bl	80053c4 <RCCEx_PLLSAI1_ConfigNQ>
 800520a:	4603      	mov	r3, r0
 800520c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800520e:	7ffb      	ldrb	r3, [r7, #31]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005214:	7ffb      	ldrb	r3, [r7, #31]
 8005216:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02b      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522c:	d008      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005236:	d003      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fe2a 	bl	8004e9e <LL_RCC_SetRNGClockSource>
 800524a:	e00a      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	2000      	movs	r0, #0
 8005258:	f7ff fe21 	bl	8004e9e <LL_RCC_SetRNGClockSource>
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff fe34 	bl	8004eca <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005266:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800526a:	d107      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800526c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800527a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005284:	2b00      	cmp	r3, #0
 8005286:	d022      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fe3d 	bl	8004f0c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800529a:	d107      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800529c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052aa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052b4:	d10b      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f8dd 	bl	800547a <RCCEx_PLLSAI1_ConfigNR>
 80052c0:	4603      	mov	r3, r0
 80052c2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052c4:	7ffb      	ldrb	r3, [r7, #31]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80052ca:	7ffb      	ldrb	r3, [r7, #31]
 80052cc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fd26 	bl	8004d30 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d009      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fd45 	bl	8004d84 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff fd2c 	bl	8004d5c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005304:	7fbb      	ldrb	r3, [r7, #30]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800531a:	f7ff fe61 	bl	8004fe0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800531e:	f7fd f931 	bl	8002584 <HAL_GetTick>
 8005322:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005324:	e009      	b.n	800533a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005326:	f7fd f92d 	bl	8002584 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d902      	bls.n	800533a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	73fb      	strb	r3, [r7, #15]
      break;
 8005338:	e004      	b.n	8005344 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800533a:	f7ff fe60 	bl	8004ffe <LL_RCC_PLLSAI1_IsReady>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f0      	bne.n	8005326 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d137      	bne.n	80053ba <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800535e:	4313      	orrs	r3, r2
 8005360:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005374:	4313      	orrs	r3, r2
 8005376:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005378:	f7ff fe23 	bl	8004fc2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537c:	f7fd f902 	bl	8002584 <HAL_GetTick>
 8005380:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005382:	e009      	b.n	8005398 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005384:	f7fd f8fe 	bl	8002584 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d902      	bls.n	8005398 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	73fb      	strb	r3, [r7, #15]
        break;
 8005396:	e004      	b.n	80053a2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005398:	f7ff fe31 	bl	8004ffe <LL_RCC_PLLSAI1_IsReady>
 800539c:	4603      	mov	r3, r0
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d1f0      	bne.n	8005384 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d108      	bne.n	80053ba <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053b6:	4313      	orrs	r3, r2
 80053b8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053d0:	f7ff fe06 	bl	8004fe0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053d4:	f7fd f8d6 	bl	8002584 <HAL_GetTick>
 80053d8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053da:	e009      	b.n	80053f0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053dc:	f7fd f8d2 	bl	8002584 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d902      	bls.n	80053f0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	73fb      	strb	r3, [r7, #15]
      break;
 80053ee:	e004      	b.n	80053fa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053f0:	f7ff fe05 	bl	8004ffe <LL_RCC_PLLSAI1_IsReady>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d137      	bne.n	8005470 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005414:	4313      	orrs	r3, r2
 8005416:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800542a:	4313      	orrs	r3, r2
 800542c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800542e:	f7ff fdc8 	bl	8004fc2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005432:	f7fd f8a7 	bl	8002584 <HAL_GetTick>
 8005436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005438:	e009      	b.n	800544e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800543a:	f7fd f8a3 	bl	8002584 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d902      	bls.n	800544e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	73fb      	strb	r3, [r7, #15]
        break;
 800544c:	e004      	b.n	8005458 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800544e:	f7ff fdd6 	bl	8004ffe <LL_RCC_PLLSAI1_IsReady>
 8005452:	4603      	mov	r3, r0
 8005454:	2b01      	cmp	r3, #1
 8005456:	d1f0      	bne.n	800543a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d108      	bne.n	8005470 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800545e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800546c:	4313      	orrs	r3, r2
 800546e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005486:	f7ff fdab 	bl	8004fe0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800548a:	f7fd f87b 	bl	8002584 <HAL_GetTick>
 800548e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005490:	e009      	b.n	80054a6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005492:	f7fd f877 	bl	8002584 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d902      	bls.n	80054a6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	73fb      	strb	r3, [r7, #15]
      break;
 80054a4:	e004      	b.n	80054b0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054a6:	f7ff fdaa 	bl	8004ffe <LL_RCC_PLLSAI1_IsReady>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f0      	bne.n	8005492 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d137      	bne.n	8005526 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054ca:	4313      	orrs	r3, r2
 80054cc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80054ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054e0:	4313      	orrs	r3, r2
 80054e2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80054e4:	f7ff fd6d 	bl	8004fc2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e8:	f7fd f84c 	bl	8002584 <HAL_GetTick>
 80054ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054ee:	e009      	b.n	8005504 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054f0:	f7fd f848 	bl	8002584 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d902      	bls.n	8005504 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	73fb      	strb	r3, [r7, #15]
        break;
 8005502:	e004      	b.n	800550e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005504:	f7ff fd7b 	bl	8004ffe <LL_RCC_PLLSAI1_IsReady>
 8005508:	4603      	mov	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d1f0      	bne.n	80054f0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d108      	bne.n	8005526 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005522:	4313      	orrs	r3, r2
 8005524:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005526:	7bfb      	ldrb	r3, [r7, #15]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e049      	b.n	80055d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fc fc08 	bl	8001d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f000 fcce 	bl	8005f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d001      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e036      	b.n	8005666 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a17      	ldr	r2, [pc, #92]	@ (8005674 <HAL_TIM_Base_Start_IT+0x94>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x44>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005622:	d115      	bne.n	8005650 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	4b13      	ldr	r3, [pc, #76]	@ (8005678 <HAL_TIM_Base_Start_IT+0x98>)
 800562c:	4013      	ands	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b06      	cmp	r3, #6
 8005634:	d015      	beq.n	8005662 <HAL_TIM_Base_Start_IT+0x82>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563c:	d011      	beq.n	8005662 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564e:	e008      	b.n	8005662 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	e000      	b.n	8005664 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005662:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40012c00 	.word	0x40012c00
 8005678:	00010007 	.word	0x00010007

0800567c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e049      	b.n	8005722 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f841 	bl	800572a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f000 fc28 	bl	8005f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <HAL_TIM_PWM_Start+0x24>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	bf14      	ite	ne
 800575c:	2301      	movne	r3, #1
 800575e:	2300      	moveq	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	e03c      	b.n	80057de <HAL_TIM_PWM_Start+0x9e>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b04      	cmp	r3, #4
 8005768:	d109      	bne.n	800577e <HAL_TIM_PWM_Start+0x3e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b01      	cmp	r3, #1
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	e02f      	b.n	80057de <HAL_TIM_PWM_Start+0x9e>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b08      	cmp	r3, #8
 8005782:	d109      	bne.n	8005798 <HAL_TIM_PWM_Start+0x58>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	bf14      	ite	ne
 8005790:	2301      	movne	r3, #1
 8005792:	2300      	moveq	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	e022      	b.n	80057de <HAL_TIM_PWM_Start+0x9e>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b0c      	cmp	r3, #12
 800579c:	d109      	bne.n	80057b2 <HAL_TIM_PWM_Start+0x72>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	bf14      	ite	ne
 80057aa:	2301      	movne	r3, #1
 80057ac:	2300      	moveq	r3, #0
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	e015      	b.n	80057de <HAL_TIM_PWM_Start+0x9e>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d109      	bne.n	80057cc <HAL_TIM_PWM_Start+0x8c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	e008      	b.n	80057de <HAL_TIM_PWM_Start+0x9e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e079      	b.n	80058da <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Start+0xb6>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057f4:	e023      	b.n	800583e <HAL_TIM_PWM_Start+0xfe>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start+0xc6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005804:	e01b      	b.n	800583e <HAL_TIM_PWM_Start+0xfe>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d104      	bne.n	8005816 <HAL_TIM_PWM_Start+0xd6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005814:	e013      	b.n	800583e <HAL_TIM_PWM_Start+0xfe>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start+0xe6>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005824:	e00b      	b.n	800583e <HAL_TIM_PWM_Start+0xfe>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b10      	cmp	r3, #16
 800582a:	d104      	bne.n	8005836 <HAL_TIM_PWM_Start+0xf6>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005834:	e003      	b.n	800583e <HAL_TIM_PWM_Start+0xfe>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2201      	movs	r2, #1
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 feec 	bl	8006624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a24      	ldr	r2, [pc, #144]	@ (80058e4 <HAL_TIM_PWM_Start+0x1a4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_TIM_PWM_Start+0x12a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a23      	ldr	r2, [pc, #140]	@ (80058e8 <HAL_TIM_PWM_Start+0x1a8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_TIM_PWM_Start+0x12a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a21      	ldr	r2, [pc, #132]	@ (80058ec <HAL_TIM_PWM_Start+0x1ac>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <HAL_TIM_PWM_Start+0x12e>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_TIM_PWM_Start+0x130>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005882:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a16      	ldr	r2, [pc, #88]	@ (80058e4 <HAL_TIM_PWM_Start+0x1a4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_TIM_PWM_Start+0x158>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005896:	d115      	bne.n	80058c4 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	4b14      	ldr	r3, [pc, #80]	@ (80058f0 <HAL_TIM_PWM_Start+0x1b0>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d015      	beq.n	80058d6 <HAL_TIM_PWM_Start+0x196>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058b0:	d011      	beq.n	80058d6 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	e008      	b.n	80058d6 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	e000      	b.n	80058d8 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40012c00 	.word	0x40012c00
 80058e8:	40014400 	.word	0x40014400
 80058ec:	40014800 	.word	0x40014800
 80058f0:	00010007 	.word	0x00010007

080058f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d020      	beq.n	8005958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01b      	beq.n	8005958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0202 	mvn.w	r2, #2
 8005928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fac7 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fab9 	bl	8005ebe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 faca 	bl	8005ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d020      	beq.n	80059a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0204 	mvn.w	r2, #4
 8005974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 faa1 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fa93 	bl	8005ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 faa4 	bl	8005ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d020      	beq.n	80059f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01b      	beq.n	80059f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0208 	mvn.w	r2, #8
 80059c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2204      	movs	r2, #4
 80059c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa7b 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa6d 	bl	8005ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa7e 	bl	8005ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d020      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01b      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0210 	mvn.w	r2, #16
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2208      	movs	r2, #8
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa55 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa47 	bl	8005ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fa58 	bl	8005ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0201 	mvn.w	r2, #1
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fc f8b6 	bl	8001bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00c      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fee1 	bl	8006850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fed9 	bl	8006864 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00c      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fa12 	bl	8005efa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00c      	beq.n	8005afa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f06f 0220 	mvn.w	r2, #32
 8005af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fea1 	bl	800683c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e0ff      	b.n	8005d22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b14      	cmp	r3, #20
 8005b2e:	f200 80f0 	bhi.w	8005d12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b32:	a201      	add	r2, pc, #4	@ (adr r2, 8005b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b8d 	.word	0x08005b8d
 8005b3c:	08005d13 	.word	0x08005d13
 8005b40:	08005d13 	.word	0x08005d13
 8005b44:	08005d13 	.word	0x08005d13
 8005b48:	08005bcd 	.word	0x08005bcd
 8005b4c:	08005d13 	.word	0x08005d13
 8005b50:	08005d13 	.word	0x08005d13
 8005b54:	08005d13 	.word	0x08005d13
 8005b58:	08005c0f 	.word	0x08005c0f
 8005b5c:	08005d13 	.word	0x08005d13
 8005b60:	08005d13 	.word	0x08005d13
 8005b64:	08005d13 	.word	0x08005d13
 8005b68:	08005c4f 	.word	0x08005c4f
 8005b6c:	08005d13 	.word	0x08005d13
 8005b70:	08005d13 	.word	0x08005d13
 8005b74:	08005d13 	.word	0x08005d13
 8005b78:	08005c91 	.word	0x08005c91
 8005b7c:	08005d13 	.word	0x08005d13
 8005b80:	08005d13 	.word	0x08005d13
 8005b84:	08005d13 	.word	0x08005d13
 8005b88:	08005cd1 	.word	0x08005cd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fa2c 	bl	8005ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0208 	orr.w	r2, r2, #8
 8005ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0204 	bic.w	r2, r2, #4
 8005bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6999      	ldr	r1, [r3, #24]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	619a      	str	r2, [r3, #24]
      break;
 8005bca:	e0a5      	b.n	8005d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fa88 	bl	80060e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6999      	ldr	r1, [r3, #24]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	021a      	lsls	r2, r3, #8
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	619a      	str	r2, [r3, #24]
      break;
 8005c0c:	e084      	b.n	8005d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fae1 	bl	80061dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0208 	orr.w	r2, r2, #8
 8005c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0204 	bic.w	r2, r2, #4
 8005c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	61da      	str	r2, [r3, #28]
      break;
 8005c4c:	e064      	b.n	8005d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fb39 	bl	80062cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69d9      	ldr	r1, [r3, #28]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	021a      	lsls	r2, r3, #8
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	61da      	str	r2, [r3, #28]
      break;
 8005c8e:	e043      	b.n	8005d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fb76 	bl	8006388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0208 	orr.w	r2, r2, #8
 8005caa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0204 	bic.w	r2, r2, #4
 8005cba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	691a      	ldr	r2, [r3, #16]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cce:	e023      	b.n	8005d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fbae 	bl	8006438 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cfa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	021a      	lsls	r2, r3, #8
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d10:	e002      	b.n	8005d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	75fb      	strb	r3, [r7, #23]
      break;
 8005d16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop

08005d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_TIM_ConfigClockSource+0x1c>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e0b6      	b.n	8005eb6 <HAL_TIM_ConfigClockSource+0x18a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005d66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d84:	d03e      	beq.n	8005e04 <HAL_TIM_ConfigClockSource+0xd8>
 8005d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d8a:	f200 8087 	bhi.w	8005e9c <HAL_TIM_ConfigClockSource+0x170>
 8005d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d92:	f000 8086 	beq.w	8005ea2 <HAL_TIM_ConfigClockSource+0x176>
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d9a:	d87f      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x170>
 8005d9c:	2b70      	cmp	r3, #112	@ 0x70
 8005d9e:	d01a      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0xaa>
 8005da0:	2b70      	cmp	r3, #112	@ 0x70
 8005da2:	d87b      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x170>
 8005da4:	2b60      	cmp	r3, #96	@ 0x60
 8005da6:	d050      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x11e>
 8005da8:	2b60      	cmp	r3, #96	@ 0x60
 8005daa:	d877      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x170>
 8005dac:	2b50      	cmp	r3, #80	@ 0x50
 8005dae:	d03c      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0xfe>
 8005db0:	2b50      	cmp	r3, #80	@ 0x50
 8005db2:	d873      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x170>
 8005db4:	2b40      	cmp	r3, #64	@ 0x40
 8005db6:	d058      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x13e>
 8005db8:	2b40      	cmp	r3, #64	@ 0x40
 8005dba:	d86f      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x170>
 8005dbc:	2b30      	cmp	r3, #48	@ 0x30
 8005dbe:	d064      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x15e>
 8005dc0:	2b30      	cmp	r3, #48	@ 0x30
 8005dc2:	d86b      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x170>
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d060      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x15e>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d867      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x170>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d05c      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x15e>
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	d05a      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x15e>
 8005dd4:	e062      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005de6:	f000 fbfd 	bl	80065e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	609a      	str	r2, [r3, #8]
      break;
 8005e02:	e04f      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e14:	f000 fbe6 	bl	80065e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e26:	609a      	str	r2, [r3, #8]
      break;
 8005e28:	e03c      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e36:	461a      	mov	r2, r3
 8005e38:	f000 fb58 	bl	80064ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2150      	movs	r1, #80	@ 0x50
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fbb1 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 8005e48:	e02c      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e56:	461a      	mov	r2, r3
 8005e58:	f000 fb77 	bl	800654a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2160      	movs	r1, #96	@ 0x60
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fba1 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 8005e68:	e01c      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e76:	461a      	mov	r2, r3
 8005e78:	f000 fb38 	bl	80064ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2140      	movs	r1, #64	@ 0x40
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fb91 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 8005e88:	e00c      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f000 fb88 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 8005e9a:	e003      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea0:	e000      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a30      	ldr	r2, [pc, #192]	@ (8005fe4 <TIM_Base_SetConfig+0xd4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0x20>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f2e:	d108      	bne.n	8005f42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a27      	ldr	r2, [pc, #156]	@ (8005fe4 <TIM_Base_SetConfig+0xd4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00b      	beq.n	8005f62 <TIM_Base_SetConfig+0x52>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f50:	d007      	beq.n	8005f62 <TIM_Base_SetConfig+0x52>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a24      	ldr	r2, [pc, #144]	@ (8005fe8 <TIM_Base_SetConfig+0xd8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d003      	beq.n	8005f62 <TIM_Base_SetConfig+0x52>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a23      	ldr	r2, [pc, #140]	@ (8005fec <TIM_Base_SetConfig+0xdc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d108      	bne.n	8005f74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a12      	ldr	r2, [pc, #72]	@ (8005fe4 <TIM_Base_SetConfig+0xd4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d007      	beq.n	8005fb0 <TIM_Base_SetConfig+0xa0>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a11      	ldr	r2, [pc, #68]	@ (8005fe8 <TIM_Base_SetConfig+0xd8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_Base_SetConfig+0xa0>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a10      	ldr	r2, [pc, #64]	@ (8005fec <TIM_Base_SetConfig+0xdc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d103      	bne.n	8005fb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d105      	bne.n	8005fd6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	611a      	str	r2, [r3, #16]
  }
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40012c00 	.word	0x40012c00
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f023 0201 	bic.w	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800601e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f023 0302 	bic.w	r3, r3, #2
 800603c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a24      	ldr	r2, [pc, #144]	@ (80060dc <TIM_OC1_SetConfig+0xec>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d007      	beq.n	8006060 <TIM_OC1_SetConfig+0x70>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a23      	ldr	r2, [pc, #140]	@ (80060e0 <TIM_OC1_SetConfig+0xf0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_OC1_SetConfig+0x70>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a22      	ldr	r2, [pc, #136]	@ (80060e4 <TIM_OC1_SetConfig+0xf4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10c      	bne.n	800607a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0308 	bic.w	r3, r3, #8
 8006066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f023 0304 	bic.w	r3, r3, #4
 8006078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a17      	ldr	r2, [pc, #92]	@ (80060dc <TIM_OC1_SetConfig+0xec>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <TIM_OC1_SetConfig+0xa2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a17      	ldr	r2, [pc, #92]	@ (80060e4 <TIM_OC1_SetConfig+0xf4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_OC1_SetConfig+0xa2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a14      	ldr	r2, [pc, #80]	@ (80060e0 <TIM_OC1_SetConfig+0xf0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d111      	bne.n	80060b6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	621a      	str	r2, [r3, #32]
}
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40014800 	.word	0x40014800
 80060e4:	40014400 	.word	0x40014400

080060e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f023 0210 	bic.w	r2, r3, #16
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0320 	bic.w	r3, r3, #32
 8006136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a22      	ldr	r2, [pc, #136]	@ (80061d0 <TIM_OC2_SetConfig+0xe8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10d      	bne.n	8006168 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006166:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a19      	ldr	r2, [pc, #100]	@ (80061d0 <TIM_OC2_SetConfig+0xe8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_OC2_SetConfig+0x98>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a18      	ldr	r2, [pc, #96]	@ (80061d4 <TIM_OC2_SetConfig+0xec>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_OC2_SetConfig+0x98>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a17      	ldr	r2, [pc, #92]	@ (80061d8 <TIM_OC2_SetConfig+0xf0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d113      	bne.n	80061a8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800618e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	621a      	str	r2, [r3, #32]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40014400 	.word	0x40014400
 80061d8:	40014800 	.word	0x40014800

080061dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800620a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a21      	ldr	r2, [pc, #132]	@ (80062c0 <TIM_OC3_SetConfig+0xe4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d10d      	bne.n	800625a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a18      	ldr	r2, [pc, #96]	@ (80062c0 <TIM_OC3_SetConfig+0xe4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d007      	beq.n	8006272 <TIM_OC3_SetConfig+0x96>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a17      	ldr	r2, [pc, #92]	@ (80062c4 <TIM_OC3_SetConfig+0xe8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d003      	beq.n	8006272 <TIM_OC3_SetConfig+0x96>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a16      	ldr	r2, [pc, #88]	@ (80062c8 <TIM_OC3_SetConfig+0xec>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d113      	bne.n	800629a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40014400 	.word	0x40014400
 80062c8:	40014800 	.word	0x40014800

080062cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800631a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a14      	ldr	r2, [pc, #80]	@ (800637c <TIM_OC4_SetConfig+0xb0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <TIM_OC4_SetConfig+0x74>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a13      	ldr	r2, [pc, #76]	@ (8006380 <TIM_OC4_SetConfig+0xb4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_OC4_SetConfig+0x74>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a12      	ldr	r2, [pc, #72]	@ (8006384 <TIM_OC4_SetConfig+0xb8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d109      	bne.n	8006354 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	019b      	lsls	r3, r3, #6
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40014400 	.word	0x40014400
 8006384:	40014800 	.word	0x40014800

08006388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80063cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	041b      	lsls	r3, r3, #16
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a13      	ldr	r2, [pc, #76]	@ (800642c <TIM_OC5_SetConfig+0xa4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d007      	beq.n	80063f2 <TIM_OC5_SetConfig+0x6a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a12      	ldr	r2, [pc, #72]	@ (8006430 <TIM_OC5_SetConfig+0xa8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_OC5_SetConfig+0x6a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a11      	ldr	r2, [pc, #68]	@ (8006434 <TIM_OC5_SetConfig+0xac>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d109      	bne.n	8006406 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	621a      	str	r2, [r3, #32]
}
 8006420:	bf00      	nop
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40014400 	.word	0x40014400
 8006434:	40014800 	.word	0x40014800

08006438 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800647e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	051b      	lsls	r3, r3, #20
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a14      	ldr	r2, [pc, #80]	@ (80064e0 <TIM_OC6_SetConfig+0xa8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d007      	beq.n	80064a4 <TIM_OC6_SetConfig+0x6c>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a13      	ldr	r2, [pc, #76]	@ (80064e4 <TIM_OC6_SetConfig+0xac>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_OC6_SetConfig+0x6c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a12      	ldr	r2, [pc, #72]	@ (80064e8 <TIM_OC6_SetConfig+0xb0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d109      	bne.n	80064b8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800

080064ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0201 	bic.w	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f023 030a 	bic.w	r3, r3, #10
 8006528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800654a:	b480      	push	{r7}
 800654c:	b087      	sub	sp, #28
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f023 0210 	bic.w	r2, r3, #16
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	031b      	lsls	r3, r3, #12
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006586:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	621a      	str	r2, [r3, #32]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80065c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f043 0307 	orr.w	r3, r3, #7
 80065d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	609a      	str	r2, [r3, #8]
}
 80065d8:	bf00      	nop
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	021a      	lsls	r2, r3, #8
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	431a      	orrs	r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4313      	orrs	r3, r2
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	609a      	str	r2, [r3, #8]
}
 8006618:	bf00      	nop
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2201      	movs	r2, #1
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a1a      	ldr	r2, [r3, #32]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	43db      	mvns	r3, r3
 8006646:	401a      	ands	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a1a      	ldr	r2, [r3, #32]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	fa01 f303 	lsl.w	r3, r1, r3
 800665c:	431a      	orrs	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
	...

08006670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006684:	2302      	movs	r3, #2
 8006686:	e04a      	b.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a1f      	ldr	r2, [pc, #124]	@ (800672c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d108      	bne.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80066b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a12      	ldr	r2, [pc, #72]	@ (800672c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f0:	d10c      	bne.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	4313      	orrs	r3, r2
 8006702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40012c00 	.word	0x40012c00

08006730 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006748:	2302      	movs	r3, #2
 800674a:	e06e      	b.n	800682a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a17      	ldr	r2, [pc, #92]	@ (8006838 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d11c      	bne.n	8006818 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e8:	051b      	lsls	r3, r3, #20
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40012c00 	.word	0x40012c00

0800683c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <LL_RCC_GetUSARTClockSource>:
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006884:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4013      	ands	r3, r2
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <LL_RCC_GetLPUARTClockSource>:
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80068a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4013      	ands	r3, r2
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e042      	b.n	8006950 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d106      	bne.n	80068e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f83b 	bl	8006958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2224      	movs	r2, #36	@ 0x24
 80068e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0201 	bic.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa5a 	bl	8006dbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f82f 	bl	800696c <UART_SetConfig>
 800690e:	4603      	mov	r3, r0
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e01b      	b.n	8006950 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fad9 	bl	8006f00 <UART_CheckIdleState>
 800694e:	4603      	mov	r3, r0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800696c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006970:	b08c      	sub	sp, #48	@ 0x30
 8006972:	af00      	add	r7, sp, #0
 8006974:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	431a      	orrs	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	431a      	orrs	r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	4313      	orrs	r3, r2
 8006992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4baf      	ldr	r3, [pc, #700]	@ (8006c58 <UART_SetConfig+0x2ec>)
 800699c:	4013      	ands	r3, r2
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	6812      	ldr	r2, [r2, #0]
 80069a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069a4:	430b      	orrs	r3, r1
 80069a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4aa4      	ldr	r2, [pc, #656]	@ (8006c5c <UART_SetConfig+0x2f0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d004      	beq.n	80069d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d4:	4313      	orrs	r3, r2
 80069d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f6:	f023 010f 	bic.w	r1, r3, #15
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a95      	ldr	r2, [pc, #596]	@ (8006c60 <UART_SetConfig+0x2f4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d125      	bne.n	8006a5c <UART_SetConfig+0xf0>
 8006a10:	2003      	movs	r0, #3
 8006a12:	f7ff ff31 	bl	8006878 <LL_RCC_GetUSARTClockSource>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d81b      	bhi.n	8006a54 <UART_SetConfig+0xe8>
 8006a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a24 <UART_SetConfig+0xb8>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006a35 	.word	0x08006a35
 8006a28:	08006a45 	.word	0x08006a45
 8006a2c:	08006a3d 	.word	0x08006a3d
 8006a30:	08006a4d 	.word	0x08006a4d
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3a:	e042      	b.n	8006ac2 <UART_SetConfig+0x156>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a42:	e03e      	b.n	8006ac2 <UART_SetConfig+0x156>
 8006a44:	2304      	movs	r3, #4
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4a:	e03a      	b.n	8006ac2 <UART_SetConfig+0x156>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a52:	e036      	b.n	8006ac2 <UART_SetConfig+0x156>
 8006a54:	2310      	movs	r3, #16
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5a:	e032      	b.n	8006ac2 <UART_SetConfig+0x156>
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a7e      	ldr	r2, [pc, #504]	@ (8006c5c <UART_SetConfig+0x2f0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d12a      	bne.n	8006abc <UART_SetConfig+0x150>
 8006a66:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006a6a:	f7ff ff15 	bl	8006898 <LL_RCC_GetLPUARTClockSource>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a74:	d01a      	beq.n	8006aac <UART_SetConfig+0x140>
 8006a76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a7a:	d81b      	bhi.n	8006ab4 <UART_SetConfig+0x148>
 8006a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a80:	d00c      	beq.n	8006a9c <UART_SetConfig+0x130>
 8006a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a86:	d815      	bhi.n	8006ab4 <UART_SetConfig+0x148>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <UART_SetConfig+0x128>
 8006a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a90:	d008      	beq.n	8006aa4 <UART_SetConfig+0x138>
 8006a92:	e00f      	b.n	8006ab4 <UART_SetConfig+0x148>
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9a:	e012      	b.n	8006ac2 <UART_SetConfig+0x156>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa2:	e00e      	b.n	8006ac2 <UART_SetConfig+0x156>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aaa:	e00a      	b.n	8006ac2 <UART_SetConfig+0x156>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab2:	e006      	b.n	8006ac2 <UART_SetConfig+0x156>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aba:	e002      	b.n	8006ac2 <UART_SetConfig+0x156>
 8006abc:	2310      	movs	r3, #16
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a65      	ldr	r2, [pc, #404]	@ (8006c5c <UART_SetConfig+0x2f0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	f040 8097 	bne.w	8006bfc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ace:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d823      	bhi.n	8006b1e <UART_SetConfig+0x1b2>
 8006ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8006adc <UART_SetConfig+0x170>)
 8006ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006adc:	08006b01 	.word	0x08006b01
 8006ae0:	08006b1f 	.word	0x08006b1f
 8006ae4:	08006b09 	.word	0x08006b09
 8006ae8:	08006b1f 	.word	0x08006b1f
 8006aec:	08006b0f 	.word	0x08006b0f
 8006af0:	08006b1f 	.word	0x08006b1f
 8006af4:	08006b1f 	.word	0x08006b1f
 8006af8:	08006b1f 	.word	0x08006b1f
 8006afc:	08006b17 	.word	0x08006b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b00:	f7fe f812 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8006b04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b06:	e010      	b.n	8006b2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b08:	4b56      	ldr	r3, [pc, #344]	@ (8006c64 <UART_SetConfig+0x2f8>)
 8006b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b0c:	e00d      	b.n	8006b2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b0e:	f7fd ff8b 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8006b12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b14:	e009      	b.n	8006b2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b1c:	e005      	b.n	8006b2a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 812b 	beq.w	8006d88 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b36:	4a4c      	ldr	r2, [pc, #304]	@ (8006c68 <UART_SetConfig+0x2fc>)
 8006b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	4413      	add	r3, r2
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d305      	bcc.n	8006b62 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d903      	bls.n	8006b6a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b68:	e10e      	b.n	8006d88 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	60bb      	str	r3, [r7, #8]
 8006b70:	60fa      	str	r2, [r7, #12]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b76:	4a3c      	ldr	r2, [pc, #240]	@ (8006c68 <UART_SetConfig+0x2fc>)
 8006b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2200      	movs	r2, #0
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b8c:	f7f9 ffb4 	bl	8000af8 <__aeabi_uldivmod>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4610      	mov	r0, r2
 8006b96:	4619      	mov	r1, r3
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	020b      	lsls	r3, r1, #8
 8006ba2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ba6:	0202      	lsls	r2, r0, #8
 8006ba8:	6979      	ldr	r1, [r7, #20]
 8006baa:	6849      	ldr	r1, [r1, #4]
 8006bac:	0849      	lsrs	r1, r1, #1
 8006bae:	2000      	movs	r0, #0
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	eb12 0804 	adds.w	r8, r2, r4
 8006bb8:	eb43 0905 	adc.w	r9, r3, r5
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	469a      	mov	sl, r3
 8006bc4:	4693      	mov	fp, r2
 8006bc6:	4652      	mov	r2, sl
 8006bc8:	465b      	mov	r3, fp
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	f7f9 ff93 	bl	8000af8 <__aeabi_uldivmod>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006be0:	d308      	bcc.n	8006bf4 <UART_SetConfig+0x288>
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006be8:	d204      	bcs.n	8006bf4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6a3a      	ldr	r2, [r7, #32]
 8006bf0:	60da      	str	r2, [r3, #12]
 8006bf2:	e0c9      	b.n	8006d88 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bfa:	e0c5      	b.n	8006d88 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c04:	d16d      	bne.n	8006ce2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006c06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	2b07      	cmp	r3, #7
 8006c0e:	d82d      	bhi.n	8006c6c <UART_SetConfig+0x300>
 8006c10:	a201      	add	r2, pc, #4	@ (adr r2, 8006c18 <UART_SetConfig+0x2ac>)
 8006c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c16:	bf00      	nop
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c6d 	.word	0x08006c6d
 8006c24:	08006c47 	.word	0x08006c47
 8006c28:	08006c6d 	.word	0x08006c6d
 8006c2c:	08006c6d 	.word	0x08006c6d
 8006c30:	08006c6d 	.word	0x08006c6d
 8006c34:	08006c4f 	.word	0x08006c4f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c38:	f7fd ff8c 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8006c3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c3e:	e01b      	b.n	8006c78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c40:	4b08      	ldr	r3, [pc, #32]	@ (8006c64 <UART_SetConfig+0x2f8>)
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c44:	e018      	b.n	8006c78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c46:	f7fd feef 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8006c4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c4c:	e014      	b.n	8006c78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c54:	e010      	b.n	8006c78 <UART_SetConfig+0x30c>
 8006c56:	bf00      	nop
 8006c58:	cfff69f3 	.word	0xcfff69f3
 8006c5c:	40008000 	.word	0x40008000
 8006c60:	40013800 	.word	0x40013800
 8006c64:	00f42400 	.word	0x00f42400
 8006c68:	08008664 	.word	0x08008664
      default:
        pclk = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 8084 	beq.w	8006d88 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	4a4b      	ldr	r2, [pc, #300]	@ (8006db4 <UART_SetConfig+0x448>)
 8006c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c92:	005a      	lsls	r2, r3, #1
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	085b      	lsrs	r3, r3, #1
 8006c9a:	441a      	add	r2, r3
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	2b0f      	cmp	r3, #15
 8006caa:	d916      	bls.n	8006cda <UART_SetConfig+0x36e>
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb2:	d212      	bcs.n	8006cda <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f023 030f 	bic.w	r3, r3, #15
 8006cbc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	8bfb      	ldrh	r3, [r7, #30]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	8bfa      	ldrh	r2, [r7, #30]
 8006cd6:	60da      	str	r2, [r3, #12]
 8006cd8:	e056      	b.n	8006d88 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ce0:	e052      	b.n	8006d88 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ce2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	2b07      	cmp	r3, #7
 8006cea:	d822      	bhi.n	8006d32 <UART_SetConfig+0x3c6>
 8006cec:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf4 <UART_SetConfig+0x388>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d15 	.word	0x08006d15
 8006cf8:	08006d1d 	.word	0x08006d1d
 8006cfc:	08006d33 	.word	0x08006d33
 8006d00:	08006d23 	.word	0x08006d23
 8006d04:	08006d33 	.word	0x08006d33
 8006d08:	08006d33 	.word	0x08006d33
 8006d0c:	08006d33 	.word	0x08006d33
 8006d10:	08006d2b 	.word	0x08006d2b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d14:	f7fd ff1e 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8006d18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d1a:	e010      	b.n	8006d3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d1c:	4b26      	ldr	r3, [pc, #152]	@ (8006db8 <UART_SetConfig+0x44c>)
 8006d1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d20:	e00d      	b.n	8006d3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d22:	f7fd fe81 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8006d26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d28:	e009      	b.n	8006d3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d30:	e005      	b.n	8006d3e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d021      	beq.n	8006d88 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d48:	4a1a      	ldr	r2, [pc, #104]	@ (8006db4 <UART_SetConfig+0x448>)
 8006d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	441a      	add	r2, r3
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	2b0f      	cmp	r3, #15
 8006d6c:	d909      	bls.n	8006d82 <UART_SetConfig+0x416>
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d74:	d205      	bcs.n	8006d82 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60da      	str	r2, [r3, #12]
 8006d80:	e002      	b.n	8006d88 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2200      	movs	r2, #0
 8006da2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006da4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3730      	adds	r7, #48	@ 0x30
 8006dac:	46bd      	mov	sp, r7
 8006dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006db2:	bf00      	nop
 8006db4:	08008664 	.word	0x08008664
 8006db8:	00f42400 	.word	0x00f42400

08006dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01a      	beq.n	8006ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eba:	d10a      	bne.n	8006ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]
  }
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b098      	sub	sp, #96	@ 0x60
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f10:	f7fb fb38 	bl	8002584 <HAL_GetTick>
 8006f14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d12f      	bne.n	8006f84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f88e 	bl	8007054 <UART_WaitOnFlagUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d022      	beq.n	8006f84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e6      	bne.n	8006f3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e063      	b.n	800704c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0304 	and.w	r3, r3, #4
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d149      	bne.n	8007026 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f857 	bl	8007054 <UART_WaitOnFlagUntilTimeout>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d03c      	beq.n	8007026 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e6      	bne.n	8006fac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f023 0301 	bic.w	r3, r3, #1
 8006ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ffe:	61fa      	str	r2, [r7, #28]
 8007000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	69b9      	ldr	r1, [r7, #24]
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	617b      	str	r3, [r7, #20]
   return(result);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e5      	bne.n	8006fde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e012      	b.n	800704c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3758      	adds	r7, #88	@ 0x58
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007064:	e04f      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d04b      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800706e:	f7fb fa89 	bl	8002584 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	429a      	cmp	r2, r3
 800707c:	d302      	bcc.n	8007084 <UART_WaitOnFlagUntilTimeout+0x30>
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e04e      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0304 	and.w	r3, r3, #4
 8007092:	2b00      	cmp	r3, #0
 8007094:	d037      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b80      	cmp	r3, #128	@ 0x80
 800709a:	d034      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b40      	cmp	r3, #64	@ 0x40
 80070a0:	d031      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d110      	bne.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2208      	movs	r2, #8
 80070b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f838 	bl	800712e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2208      	movs	r2, #8
 80070c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e029      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070e0:	d111      	bne.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f81e 	bl	800712e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e00f      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69da      	ldr	r2, [r3, #28]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4013      	ands	r3, r2
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	bf0c      	ite	eq
 8007116:	2301      	moveq	r3, #1
 8007118:	2300      	movne	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	429a      	cmp	r2, r3
 8007122:	d0a0      	beq.n	8007066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800712e:	b480      	push	{r7}
 8007130:	b095      	sub	sp, #84	@ 0x54
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800714a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007154:	643b      	str	r3, [r7, #64]	@ 0x40
 8007156:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800715a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e6      	bne.n	8007136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	61fb      	str	r3, [r7, #28]
   return(result);
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3308      	adds	r3, #8
 800718a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800718c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800718e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e3      	bne.n	8007168 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d118      	bne.n	80071da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 0310 	bic.w	r3, r3, #16
 80071bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071c6:	61bb      	str	r3, [r7, #24]
 80071c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6979      	ldr	r1, [r7, #20]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e6      	bne.n	80071a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071ee:	bf00      	nop
 80071f0:	3754      	adds	r7, #84	@ 0x54
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007202:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007206:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	b29b      	uxth	r3, r3
 8007214:	43db      	mvns	r3, r3
 8007216:	b29b      	uxth	r3, r3
 8007218:	4013      	ands	r3, r2
 800721a:	b29a      	uxth	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	1d3b      	adds	r3, r7, #4
 800723a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <std>:
 800726c:	2300      	movs	r3, #0
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	e9c0 3300 	strd	r3, r3, [r0]
 8007276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727a:	6083      	str	r3, [r0, #8]
 800727c:	8181      	strh	r1, [r0, #12]
 800727e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007280:	81c2      	strh	r2, [r0, #14]
 8007282:	6183      	str	r3, [r0, #24]
 8007284:	4619      	mov	r1, r3
 8007286:	2208      	movs	r2, #8
 8007288:	305c      	adds	r0, #92	@ 0x5c
 800728a:	f000 f9e7 	bl	800765c <memset>
 800728e:	4b0d      	ldr	r3, [pc, #52]	@ (80072c4 <std+0x58>)
 8007290:	6263      	str	r3, [r4, #36]	@ 0x24
 8007292:	4b0d      	ldr	r3, [pc, #52]	@ (80072c8 <std+0x5c>)
 8007294:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <std+0x60>)
 8007298:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800729a:	4b0d      	ldr	r3, [pc, #52]	@ (80072d0 <std+0x64>)
 800729c:	6323      	str	r3, [r4, #48]	@ 0x30
 800729e:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <std+0x68>)
 80072a0:	6224      	str	r4, [r4, #32]
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d006      	beq.n	80072b4 <std+0x48>
 80072a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072aa:	4294      	cmp	r4, r2
 80072ac:	d002      	beq.n	80072b4 <std+0x48>
 80072ae:	33d0      	adds	r3, #208	@ 0xd0
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d105      	bne.n	80072c0 <std+0x54>
 80072b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072bc:	f000 ba46 	b.w	800774c <__retarget_lock_init_recursive>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	bf00      	nop
 80072c4:	080074ad 	.word	0x080074ad
 80072c8:	080074cf 	.word	0x080074cf
 80072cc:	08007507 	.word	0x08007507
 80072d0:	0800752b 	.word	0x0800752b
 80072d4:	200005ac 	.word	0x200005ac

080072d8 <stdio_exit_handler>:
 80072d8:	4a02      	ldr	r2, [pc, #8]	@ (80072e4 <stdio_exit_handler+0xc>)
 80072da:	4903      	ldr	r1, [pc, #12]	@ (80072e8 <stdio_exit_handler+0x10>)
 80072dc:	4803      	ldr	r0, [pc, #12]	@ (80072ec <stdio_exit_handler+0x14>)
 80072de:	f000 b869 	b.w	80073b4 <_fwalk_sglue>
 80072e2:	bf00      	nop
 80072e4:	20000030 	.word	0x20000030
 80072e8:	08007a4d 	.word	0x08007a4d
 80072ec:	20000040 	.word	0x20000040

080072f0 <cleanup_stdio>:
 80072f0:	6841      	ldr	r1, [r0, #4]
 80072f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007324 <cleanup_stdio+0x34>)
 80072f4:	4299      	cmp	r1, r3
 80072f6:	b510      	push	{r4, lr}
 80072f8:	4604      	mov	r4, r0
 80072fa:	d001      	beq.n	8007300 <cleanup_stdio+0x10>
 80072fc:	f000 fba6 	bl	8007a4c <_fflush_r>
 8007300:	68a1      	ldr	r1, [r4, #8]
 8007302:	4b09      	ldr	r3, [pc, #36]	@ (8007328 <cleanup_stdio+0x38>)
 8007304:	4299      	cmp	r1, r3
 8007306:	d002      	beq.n	800730e <cleanup_stdio+0x1e>
 8007308:	4620      	mov	r0, r4
 800730a:	f000 fb9f 	bl	8007a4c <_fflush_r>
 800730e:	68e1      	ldr	r1, [r4, #12]
 8007310:	4b06      	ldr	r3, [pc, #24]	@ (800732c <cleanup_stdio+0x3c>)
 8007312:	4299      	cmp	r1, r3
 8007314:	d004      	beq.n	8007320 <cleanup_stdio+0x30>
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800731c:	f000 bb96 	b.w	8007a4c <_fflush_r>
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	200005ac 	.word	0x200005ac
 8007328:	20000614 	.word	0x20000614
 800732c:	2000067c 	.word	0x2000067c

08007330 <global_stdio_init.part.0>:
 8007330:	b510      	push	{r4, lr}
 8007332:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <global_stdio_init.part.0+0x30>)
 8007334:	4c0b      	ldr	r4, [pc, #44]	@ (8007364 <global_stdio_init.part.0+0x34>)
 8007336:	4a0c      	ldr	r2, [pc, #48]	@ (8007368 <global_stdio_init.part.0+0x38>)
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	4620      	mov	r0, r4
 800733c:	2200      	movs	r2, #0
 800733e:	2104      	movs	r1, #4
 8007340:	f7ff ff94 	bl	800726c <std>
 8007344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007348:	2201      	movs	r2, #1
 800734a:	2109      	movs	r1, #9
 800734c:	f7ff ff8e 	bl	800726c <std>
 8007350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007354:	2202      	movs	r2, #2
 8007356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735a:	2112      	movs	r1, #18
 800735c:	f7ff bf86 	b.w	800726c <std>
 8007360:	200006e4 	.word	0x200006e4
 8007364:	200005ac 	.word	0x200005ac
 8007368:	080072d9 	.word	0x080072d9

0800736c <__sfp_lock_acquire>:
 800736c:	4801      	ldr	r0, [pc, #4]	@ (8007374 <__sfp_lock_acquire+0x8>)
 800736e:	f000 b9ee 	b.w	800774e <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	200006ed 	.word	0x200006ed

08007378 <__sfp_lock_release>:
 8007378:	4801      	ldr	r0, [pc, #4]	@ (8007380 <__sfp_lock_release+0x8>)
 800737a:	f000 b9e9 	b.w	8007750 <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	200006ed 	.word	0x200006ed

08007384 <__sinit>:
 8007384:	b510      	push	{r4, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	f7ff fff0 	bl	800736c <__sfp_lock_acquire>
 800738c:	6a23      	ldr	r3, [r4, #32]
 800738e:	b11b      	cbz	r3, 8007398 <__sinit+0x14>
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f7ff bff0 	b.w	8007378 <__sfp_lock_release>
 8007398:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <__sinit+0x28>)
 800739a:	6223      	str	r3, [r4, #32]
 800739c:	4b04      	ldr	r3, [pc, #16]	@ (80073b0 <__sinit+0x2c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f5      	bne.n	8007390 <__sinit+0xc>
 80073a4:	f7ff ffc4 	bl	8007330 <global_stdio_init.part.0>
 80073a8:	e7f2      	b.n	8007390 <__sinit+0xc>
 80073aa:	bf00      	nop
 80073ac:	080072f1 	.word	0x080072f1
 80073b0:	200006e4 	.word	0x200006e4

080073b4 <_fwalk_sglue>:
 80073b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b8:	4607      	mov	r7, r0
 80073ba:	4688      	mov	r8, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	2600      	movs	r6, #0
 80073c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c4:	f1b9 0901 	subs.w	r9, r9, #1
 80073c8:	d505      	bpl.n	80073d6 <_fwalk_sglue+0x22>
 80073ca:	6824      	ldr	r4, [r4, #0]
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d1f7      	bne.n	80073c0 <_fwalk_sglue+0xc>
 80073d0:	4630      	mov	r0, r6
 80073d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d907      	bls.n	80073ec <_fwalk_sglue+0x38>
 80073dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073e0:	3301      	adds	r3, #1
 80073e2:	d003      	beq.n	80073ec <_fwalk_sglue+0x38>
 80073e4:	4629      	mov	r1, r5
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c0      	blx	r8
 80073ea:	4306      	orrs	r6, r0
 80073ec:	3568      	adds	r5, #104	@ 0x68
 80073ee:	e7e9      	b.n	80073c4 <_fwalk_sglue+0x10>

080073f0 <_puts_r>:
 80073f0:	6a03      	ldr	r3, [r0, #32]
 80073f2:	b570      	push	{r4, r5, r6, lr}
 80073f4:	6884      	ldr	r4, [r0, #8]
 80073f6:	4605      	mov	r5, r0
 80073f8:	460e      	mov	r6, r1
 80073fa:	b90b      	cbnz	r3, 8007400 <_puts_r+0x10>
 80073fc:	f7ff ffc2 	bl	8007384 <__sinit>
 8007400:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007402:	07db      	lsls	r3, r3, #31
 8007404:	d405      	bmi.n	8007412 <_puts_r+0x22>
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	0598      	lsls	r0, r3, #22
 800740a:	d402      	bmi.n	8007412 <_puts_r+0x22>
 800740c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800740e:	f000 f99e 	bl	800774e <__retarget_lock_acquire_recursive>
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	0719      	lsls	r1, r3, #28
 8007416:	d502      	bpl.n	800741e <_puts_r+0x2e>
 8007418:	6923      	ldr	r3, [r4, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d135      	bne.n	800748a <_puts_r+0x9a>
 800741e:	4621      	mov	r1, r4
 8007420:	4628      	mov	r0, r5
 8007422:	f000 f8c5 	bl	80075b0 <__swsetup_r>
 8007426:	b380      	cbz	r0, 800748a <_puts_r+0x9a>
 8007428:	f04f 35ff 	mov.w	r5, #4294967295
 800742c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800742e:	07da      	lsls	r2, r3, #31
 8007430:	d405      	bmi.n	800743e <_puts_r+0x4e>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	059b      	lsls	r3, r3, #22
 8007436:	d402      	bmi.n	800743e <_puts_r+0x4e>
 8007438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800743a:	f000 f989 	bl	8007750 <__retarget_lock_release_recursive>
 800743e:	4628      	mov	r0, r5
 8007440:	bd70      	pop	{r4, r5, r6, pc}
 8007442:	2b00      	cmp	r3, #0
 8007444:	da04      	bge.n	8007450 <_puts_r+0x60>
 8007446:	69a2      	ldr	r2, [r4, #24]
 8007448:	429a      	cmp	r2, r3
 800744a:	dc17      	bgt.n	800747c <_puts_r+0x8c>
 800744c:	290a      	cmp	r1, #10
 800744e:	d015      	beq.n	800747c <_puts_r+0x8c>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	6022      	str	r2, [r4, #0]
 8007456:	7019      	strb	r1, [r3, #0]
 8007458:	68a3      	ldr	r3, [r4, #8]
 800745a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800745e:	3b01      	subs	r3, #1
 8007460:	60a3      	str	r3, [r4, #8]
 8007462:	2900      	cmp	r1, #0
 8007464:	d1ed      	bne.n	8007442 <_puts_r+0x52>
 8007466:	2b00      	cmp	r3, #0
 8007468:	da11      	bge.n	800748e <_puts_r+0x9e>
 800746a:	4622      	mov	r2, r4
 800746c:	210a      	movs	r1, #10
 800746e:	4628      	mov	r0, r5
 8007470:	f000 f85f 	bl	8007532 <__swbuf_r>
 8007474:	3001      	adds	r0, #1
 8007476:	d0d7      	beq.n	8007428 <_puts_r+0x38>
 8007478:	250a      	movs	r5, #10
 800747a:	e7d7      	b.n	800742c <_puts_r+0x3c>
 800747c:	4622      	mov	r2, r4
 800747e:	4628      	mov	r0, r5
 8007480:	f000 f857 	bl	8007532 <__swbuf_r>
 8007484:	3001      	adds	r0, #1
 8007486:	d1e7      	bne.n	8007458 <_puts_r+0x68>
 8007488:	e7ce      	b.n	8007428 <_puts_r+0x38>
 800748a:	3e01      	subs	r6, #1
 800748c:	e7e4      	b.n	8007458 <_puts_r+0x68>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	6022      	str	r2, [r4, #0]
 8007494:	220a      	movs	r2, #10
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	e7ee      	b.n	8007478 <_puts_r+0x88>
	...

0800749c <puts>:
 800749c:	4b02      	ldr	r3, [pc, #8]	@ (80074a8 <puts+0xc>)
 800749e:	4601      	mov	r1, r0
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	f7ff bfa5 	b.w	80073f0 <_puts_r>
 80074a6:	bf00      	nop
 80074a8:	2000003c 	.word	0x2000003c

080074ac <__sread>:
 80074ac:	b510      	push	{r4, lr}
 80074ae:	460c      	mov	r4, r1
 80074b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b4:	f000 f8fc 	bl	80076b0 <_read_r>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	bfab      	itete	ge
 80074bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074be:	89a3      	ldrhlt	r3, [r4, #12]
 80074c0:	181b      	addge	r3, r3, r0
 80074c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074c6:	bfac      	ite	ge
 80074c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074ca:	81a3      	strhlt	r3, [r4, #12]
 80074cc:	bd10      	pop	{r4, pc}

080074ce <__swrite>:
 80074ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d2:	461f      	mov	r7, r3
 80074d4:	898b      	ldrh	r3, [r1, #12]
 80074d6:	05db      	lsls	r3, r3, #23
 80074d8:	4605      	mov	r5, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	4616      	mov	r6, r2
 80074de:	d505      	bpl.n	80074ec <__swrite+0x1e>
 80074e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e4:	2302      	movs	r3, #2
 80074e6:	2200      	movs	r2, #0
 80074e8:	f000 f8d0 	bl	800768c <_lseek_r>
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074f6:	81a3      	strh	r3, [r4, #12]
 80074f8:	4632      	mov	r2, r6
 80074fa:	463b      	mov	r3, r7
 80074fc:	4628      	mov	r0, r5
 80074fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007502:	f000 b8e7 	b.w	80076d4 <_write_r>

08007506 <__sseek>:
 8007506:	b510      	push	{r4, lr}
 8007508:	460c      	mov	r4, r1
 800750a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750e:	f000 f8bd 	bl	800768c <_lseek_r>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	bf15      	itete	ne
 8007518:	6560      	strne	r0, [r4, #84]	@ 0x54
 800751a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800751e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007522:	81a3      	strheq	r3, [r4, #12]
 8007524:	bf18      	it	ne
 8007526:	81a3      	strhne	r3, [r4, #12]
 8007528:	bd10      	pop	{r4, pc}

0800752a <__sclose>:
 800752a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752e:	f000 b89d 	b.w	800766c <_close_r>

08007532 <__swbuf_r>:
 8007532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007534:	460e      	mov	r6, r1
 8007536:	4614      	mov	r4, r2
 8007538:	4605      	mov	r5, r0
 800753a:	b118      	cbz	r0, 8007544 <__swbuf_r+0x12>
 800753c:	6a03      	ldr	r3, [r0, #32]
 800753e:	b90b      	cbnz	r3, 8007544 <__swbuf_r+0x12>
 8007540:	f7ff ff20 	bl	8007384 <__sinit>
 8007544:	69a3      	ldr	r3, [r4, #24]
 8007546:	60a3      	str	r3, [r4, #8]
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	071a      	lsls	r2, r3, #28
 800754c:	d501      	bpl.n	8007552 <__swbuf_r+0x20>
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	b943      	cbnz	r3, 8007564 <__swbuf_r+0x32>
 8007552:	4621      	mov	r1, r4
 8007554:	4628      	mov	r0, r5
 8007556:	f000 f82b 	bl	80075b0 <__swsetup_r>
 800755a:	b118      	cbz	r0, 8007564 <__swbuf_r+0x32>
 800755c:	f04f 37ff 	mov.w	r7, #4294967295
 8007560:	4638      	mov	r0, r7
 8007562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	6922      	ldr	r2, [r4, #16]
 8007568:	1a98      	subs	r0, r3, r2
 800756a:	6963      	ldr	r3, [r4, #20]
 800756c:	b2f6      	uxtb	r6, r6
 800756e:	4283      	cmp	r3, r0
 8007570:	4637      	mov	r7, r6
 8007572:	dc05      	bgt.n	8007580 <__swbuf_r+0x4e>
 8007574:	4621      	mov	r1, r4
 8007576:	4628      	mov	r0, r5
 8007578:	f000 fa68 	bl	8007a4c <_fflush_r>
 800757c:	2800      	cmp	r0, #0
 800757e:	d1ed      	bne.n	800755c <__swbuf_r+0x2a>
 8007580:	68a3      	ldr	r3, [r4, #8]
 8007582:	3b01      	subs	r3, #1
 8007584:	60a3      	str	r3, [r4, #8]
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	6022      	str	r2, [r4, #0]
 800758c:	701e      	strb	r6, [r3, #0]
 800758e:	6962      	ldr	r2, [r4, #20]
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	429a      	cmp	r2, r3
 8007594:	d004      	beq.n	80075a0 <__swbuf_r+0x6e>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	07db      	lsls	r3, r3, #31
 800759a:	d5e1      	bpl.n	8007560 <__swbuf_r+0x2e>
 800759c:	2e0a      	cmp	r6, #10
 800759e:	d1df      	bne.n	8007560 <__swbuf_r+0x2e>
 80075a0:	4621      	mov	r1, r4
 80075a2:	4628      	mov	r0, r5
 80075a4:	f000 fa52 	bl	8007a4c <_fflush_r>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d0d9      	beq.n	8007560 <__swbuf_r+0x2e>
 80075ac:	e7d6      	b.n	800755c <__swbuf_r+0x2a>
	...

080075b0 <__swsetup_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4b29      	ldr	r3, [pc, #164]	@ (8007658 <__swsetup_r+0xa8>)
 80075b4:	4605      	mov	r5, r0
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	460c      	mov	r4, r1
 80075ba:	b118      	cbz	r0, 80075c4 <__swsetup_r+0x14>
 80075bc:	6a03      	ldr	r3, [r0, #32]
 80075be:	b90b      	cbnz	r3, 80075c4 <__swsetup_r+0x14>
 80075c0:	f7ff fee0 	bl	8007384 <__sinit>
 80075c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c8:	0719      	lsls	r1, r3, #28
 80075ca:	d422      	bmi.n	8007612 <__swsetup_r+0x62>
 80075cc:	06da      	lsls	r2, r3, #27
 80075ce:	d407      	bmi.n	80075e0 <__swsetup_r+0x30>
 80075d0:	2209      	movs	r2, #9
 80075d2:	602a      	str	r2, [r5, #0]
 80075d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	f04f 30ff 	mov.w	r0, #4294967295
 80075de:	e033      	b.n	8007648 <__swsetup_r+0x98>
 80075e0:	0758      	lsls	r0, r3, #29
 80075e2:	d512      	bpl.n	800760a <__swsetup_r+0x5a>
 80075e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075e6:	b141      	cbz	r1, 80075fa <__swsetup_r+0x4a>
 80075e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075ec:	4299      	cmp	r1, r3
 80075ee:	d002      	beq.n	80075f6 <__swsetup_r+0x46>
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 f8af 	bl	8007754 <_free_r>
 80075f6:	2300      	movs	r3, #0
 80075f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	2300      	movs	r3, #0
 8007604:	6063      	str	r3, [r4, #4]
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	f043 0308 	orr.w	r3, r3, #8
 8007610:	81a3      	strh	r3, [r4, #12]
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	b94b      	cbnz	r3, 800762a <__swsetup_r+0x7a>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800761c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007620:	d003      	beq.n	800762a <__swsetup_r+0x7a>
 8007622:	4621      	mov	r1, r4
 8007624:	4628      	mov	r0, r5
 8007626:	f000 fa5f 	bl	8007ae8 <__smakebuf_r>
 800762a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800762e:	f013 0201 	ands.w	r2, r3, #1
 8007632:	d00a      	beq.n	800764a <__swsetup_r+0x9a>
 8007634:	2200      	movs	r2, #0
 8007636:	60a2      	str	r2, [r4, #8]
 8007638:	6962      	ldr	r2, [r4, #20]
 800763a:	4252      	negs	r2, r2
 800763c:	61a2      	str	r2, [r4, #24]
 800763e:	6922      	ldr	r2, [r4, #16]
 8007640:	b942      	cbnz	r2, 8007654 <__swsetup_r+0xa4>
 8007642:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007646:	d1c5      	bne.n	80075d4 <__swsetup_r+0x24>
 8007648:	bd38      	pop	{r3, r4, r5, pc}
 800764a:	0799      	lsls	r1, r3, #30
 800764c:	bf58      	it	pl
 800764e:	6962      	ldrpl	r2, [r4, #20]
 8007650:	60a2      	str	r2, [r4, #8]
 8007652:	e7f4      	b.n	800763e <__swsetup_r+0x8e>
 8007654:	2000      	movs	r0, #0
 8007656:	e7f7      	b.n	8007648 <__swsetup_r+0x98>
 8007658:	2000003c 	.word	0x2000003c

0800765c <memset>:
 800765c:	4402      	add	r2, r0
 800765e:	4603      	mov	r3, r0
 8007660:	4293      	cmp	r3, r2
 8007662:	d100      	bne.n	8007666 <memset+0xa>
 8007664:	4770      	bx	lr
 8007666:	f803 1b01 	strb.w	r1, [r3], #1
 800766a:	e7f9      	b.n	8007660 <memset+0x4>

0800766c <_close_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4d06      	ldr	r5, [pc, #24]	@ (8007688 <_close_r+0x1c>)
 8007670:	2300      	movs	r3, #0
 8007672:	4604      	mov	r4, r0
 8007674:	4608      	mov	r0, r1
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	f7fa fc97 	bl	8001faa <_close>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d102      	bne.n	8007686 <_close_r+0x1a>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	b103      	cbz	r3, 8007686 <_close_r+0x1a>
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	200006e8 	.word	0x200006e8

0800768c <_lseek_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4d07      	ldr	r5, [pc, #28]	@ (80076ac <_lseek_r+0x20>)
 8007690:	4604      	mov	r4, r0
 8007692:	4608      	mov	r0, r1
 8007694:	4611      	mov	r1, r2
 8007696:	2200      	movs	r2, #0
 8007698:	602a      	str	r2, [r5, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	f7fa fcac 	bl	8001ff8 <_lseek>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_lseek_r+0x1e>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_lseek_r+0x1e>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	200006e8 	.word	0x200006e8

080076b0 <_read_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4d07      	ldr	r5, [pc, #28]	@ (80076d0 <_read_r+0x20>)
 80076b4:	4604      	mov	r4, r0
 80076b6:	4608      	mov	r0, r1
 80076b8:	4611      	mov	r1, r2
 80076ba:	2200      	movs	r2, #0
 80076bc:	602a      	str	r2, [r5, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	f7fa fc56 	bl	8001f70 <_read>
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	d102      	bne.n	80076ce <_read_r+0x1e>
 80076c8:	682b      	ldr	r3, [r5, #0]
 80076ca:	b103      	cbz	r3, 80076ce <_read_r+0x1e>
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	200006e8 	.word	0x200006e8

080076d4 <_write_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4d07      	ldr	r5, [pc, #28]	@ (80076f4 <_write_r+0x20>)
 80076d8:	4604      	mov	r4, r0
 80076da:	4608      	mov	r0, r1
 80076dc:	4611      	mov	r1, r2
 80076de:	2200      	movs	r2, #0
 80076e0:	602a      	str	r2, [r5, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	f7fa fa55 	bl	8001b92 <_write>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_write_r+0x1e>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_write_r+0x1e>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	200006e8 	.word	0x200006e8

080076f8 <__errno>:
 80076f8:	4b01      	ldr	r3, [pc, #4]	@ (8007700 <__errno+0x8>)
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	2000003c 	.word	0x2000003c

08007704 <__libc_init_array>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	4d0d      	ldr	r5, [pc, #52]	@ (800773c <__libc_init_array+0x38>)
 8007708:	4c0d      	ldr	r4, [pc, #52]	@ (8007740 <__libc_init_array+0x3c>)
 800770a:	1b64      	subs	r4, r4, r5
 800770c:	10a4      	asrs	r4, r4, #2
 800770e:	2600      	movs	r6, #0
 8007710:	42a6      	cmp	r6, r4
 8007712:	d109      	bne.n	8007728 <__libc_init_array+0x24>
 8007714:	4d0b      	ldr	r5, [pc, #44]	@ (8007744 <__libc_init_array+0x40>)
 8007716:	4c0c      	ldr	r4, [pc, #48]	@ (8007748 <__libc_init_array+0x44>)
 8007718:	f000 ff0c 	bl	8008534 <_init>
 800771c:	1b64      	subs	r4, r4, r5
 800771e:	10a4      	asrs	r4, r4, #2
 8007720:	2600      	movs	r6, #0
 8007722:	42a6      	cmp	r6, r4
 8007724:	d105      	bne.n	8007732 <__libc_init_array+0x2e>
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	f855 3b04 	ldr.w	r3, [r5], #4
 800772c:	4798      	blx	r3
 800772e:	3601      	adds	r6, #1
 8007730:	e7ee      	b.n	8007710 <__libc_init_array+0xc>
 8007732:	f855 3b04 	ldr.w	r3, [r5], #4
 8007736:	4798      	blx	r3
 8007738:	3601      	adds	r6, #1
 800773a:	e7f2      	b.n	8007722 <__libc_init_array+0x1e>
 800773c:	080086d8 	.word	0x080086d8
 8007740:	080086d8 	.word	0x080086d8
 8007744:	080086d8 	.word	0x080086d8
 8007748:	080086dc 	.word	0x080086dc

0800774c <__retarget_lock_init_recursive>:
 800774c:	4770      	bx	lr

0800774e <__retarget_lock_acquire_recursive>:
 800774e:	4770      	bx	lr

08007750 <__retarget_lock_release_recursive>:
 8007750:	4770      	bx	lr
	...

08007754 <_free_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4605      	mov	r5, r0
 8007758:	2900      	cmp	r1, #0
 800775a:	d041      	beq.n	80077e0 <_free_r+0x8c>
 800775c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007760:	1f0c      	subs	r4, r1, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	bfb8      	it	lt
 8007766:	18e4      	addlt	r4, r4, r3
 8007768:	f000 f8e0 	bl	800792c <__malloc_lock>
 800776c:	4a1d      	ldr	r2, [pc, #116]	@ (80077e4 <_free_r+0x90>)
 800776e:	6813      	ldr	r3, [r2, #0]
 8007770:	b933      	cbnz	r3, 8007780 <_free_r+0x2c>
 8007772:	6063      	str	r3, [r4, #4]
 8007774:	6014      	str	r4, [r2, #0]
 8007776:	4628      	mov	r0, r5
 8007778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800777c:	f000 b8dc 	b.w	8007938 <__malloc_unlock>
 8007780:	42a3      	cmp	r3, r4
 8007782:	d908      	bls.n	8007796 <_free_r+0x42>
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	1821      	adds	r1, r4, r0
 8007788:	428b      	cmp	r3, r1
 800778a:	bf01      	itttt	eq
 800778c:	6819      	ldreq	r1, [r3, #0]
 800778e:	685b      	ldreq	r3, [r3, #4]
 8007790:	1809      	addeq	r1, r1, r0
 8007792:	6021      	streq	r1, [r4, #0]
 8007794:	e7ed      	b.n	8007772 <_free_r+0x1e>
 8007796:	461a      	mov	r2, r3
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	b10b      	cbz	r3, 80077a0 <_free_r+0x4c>
 800779c:	42a3      	cmp	r3, r4
 800779e:	d9fa      	bls.n	8007796 <_free_r+0x42>
 80077a0:	6811      	ldr	r1, [r2, #0]
 80077a2:	1850      	adds	r0, r2, r1
 80077a4:	42a0      	cmp	r0, r4
 80077a6:	d10b      	bne.n	80077c0 <_free_r+0x6c>
 80077a8:	6820      	ldr	r0, [r4, #0]
 80077aa:	4401      	add	r1, r0
 80077ac:	1850      	adds	r0, r2, r1
 80077ae:	4283      	cmp	r3, r0
 80077b0:	6011      	str	r1, [r2, #0]
 80077b2:	d1e0      	bne.n	8007776 <_free_r+0x22>
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	6053      	str	r3, [r2, #4]
 80077ba:	4408      	add	r0, r1
 80077bc:	6010      	str	r0, [r2, #0]
 80077be:	e7da      	b.n	8007776 <_free_r+0x22>
 80077c0:	d902      	bls.n	80077c8 <_free_r+0x74>
 80077c2:	230c      	movs	r3, #12
 80077c4:	602b      	str	r3, [r5, #0]
 80077c6:	e7d6      	b.n	8007776 <_free_r+0x22>
 80077c8:	6820      	ldr	r0, [r4, #0]
 80077ca:	1821      	adds	r1, r4, r0
 80077cc:	428b      	cmp	r3, r1
 80077ce:	bf04      	itt	eq
 80077d0:	6819      	ldreq	r1, [r3, #0]
 80077d2:	685b      	ldreq	r3, [r3, #4]
 80077d4:	6063      	str	r3, [r4, #4]
 80077d6:	bf04      	itt	eq
 80077d8:	1809      	addeq	r1, r1, r0
 80077da:	6021      	streq	r1, [r4, #0]
 80077dc:	6054      	str	r4, [r2, #4]
 80077de:	e7ca      	b.n	8007776 <_free_r+0x22>
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	bf00      	nop
 80077e4:	200006f4 	.word	0x200006f4

080077e8 <sbrk_aligned>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007828 <sbrk_aligned+0x40>)
 80077ec:	460c      	mov	r4, r1
 80077ee:	6831      	ldr	r1, [r6, #0]
 80077f0:	4605      	mov	r5, r0
 80077f2:	b911      	cbnz	r1, 80077fa <sbrk_aligned+0x12>
 80077f4:	f000 f9d6 	bl	8007ba4 <_sbrk_r>
 80077f8:	6030      	str	r0, [r6, #0]
 80077fa:	4621      	mov	r1, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	f000 f9d1 	bl	8007ba4 <_sbrk_r>
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	d103      	bne.n	800780e <sbrk_aligned+0x26>
 8007806:	f04f 34ff 	mov.w	r4, #4294967295
 800780a:	4620      	mov	r0, r4
 800780c:	bd70      	pop	{r4, r5, r6, pc}
 800780e:	1cc4      	adds	r4, r0, #3
 8007810:	f024 0403 	bic.w	r4, r4, #3
 8007814:	42a0      	cmp	r0, r4
 8007816:	d0f8      	beq.n	800780a <sbrk_aligned+0x22>
 8007818:	1a21      	subs	r1, r4, r0
 800781a:	4628      	mov	r0, r5
 800781c:	f000 f9c2 	bl	8007ba4 <_sbrk_r>
 8007820:	3001      	adds	r0, #1
 8007822:	d1f2      	bne.n	800780a <sbrk_aligned+0x22>
 8007824:	e7ef      	b.n	8007806 <sbrk_aligned+0x1e>
 8007826:	bf00      	nop
 8007828:	200006f0 	.word	0x200006f0

0800782c <_malloc_r>:
 800782c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007830:	1ccd      	adds	r5, r1, #3
 8007832:	f025 0503 	bic.w	r5, r5, #3
 8007836:	3508      	adds	r5, #8
 8007838:	2d0c      	cmp	r5, #12
 800783a:	bf38      	it	cc
 800783c:	250c      	movcc	r5, #12
 800783e:	2d00      	cmp	r5, #0
 8007840:	4606      	mov	r6, r0
 8007842:	db01      	blt.n	8007848 <_malloc_r+0x1c>
 8007844:	42a9      	cmp	r1, r5
 8007846:	d904      	bls.n	8007852 <_malloc_r+0x26>
 8007848:	230c      	movs	r3, #12
 800784a:	6033      	str	r3, [r6, #0]
 800784c:	2000      	movs	r0, #0
 800784e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007928 <_malloc_r+0xfc>
 8007856:	f000 f869 	bl	800792c <__malloc_lock>
 800785a:	f8d8 3000 	ldr.w	r3, [r8]
 800785e:	461c      	mov	r4, r3
 8007860:	bb44      	cbnz	r4, 80078b4 <_malloc_r+0x88>
 8007862:	4629      	mov	r1, r5
 8007864:	4630      	mov	r0, r6
 8007866:	f7ff ffbf 	bl	80077e8 <sbrk_aligned>
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	4604      	mov	r4, r0
 800786e:	d158      	bne.n	8007922 <_malloc_r+0xf6>
 8007870:	f8d8 4000 	ldr.w	r4, [r8]
 8007874:	4627      	mov	r7, r4
 8007876:	2f00      	cmp	r7, #0
 8007878:	d143      	bne.n	8007902 <_malloc_r+0xd6>
 800787a:	2c00      	cmp	r4, #0
 800787c:	d04b      	beq.n	8007916 <_malloc_r+0xea>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	4639      	mov	r1, r7
 8007882:	4630      	mov	r0, r6
 8007884:	eb04 0903 	add.w	r9, r4, r3
 8007888:	f000 f98c 	bl	8007ba4 <_sbrk_r>
 800788c:	4581      	cmp	r9, r0
 800788e:	d142      	bne.n	8007916 <_malloc_r+0xea>
 8007890:	6821      	ldr	r1, [r4, #0]
 8007892:	1a6d      	subs	r5, r5, r1
 8007894:	4629      	mov	r1, r5
 8007896:	4630      	mov	r0, r6
 8007898:	f7ff ffa6 	bl	80077e8 <sbrk_aligned>
 800789c:	3001      	adds	r0, #1
 800789e:	d03a      	beq.n	8007916 <_malloc_r+0xea>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	442b      	add	r3, r5
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	f8d8 3000 	ldr.w	r3, [r8]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	bb62      	cbnz	r2, 8007908 <_malloc_r+0xdc>
 80078ae:	f8c8 7000 	str.w	r7, [r8]
 80078b2:	e00f      	b.n	80078d4 <_malloc_r+0xa8>
 80078b4:	6822      	ldr	r2, [r4, #0]
 80078b6:	1b52      	subs	r2, r2, r5
 80078b8:	d420      	bmi.n	80078fc <_malloc_r+0xd0>
 80078ba:	2a0b      	cmp	r2, #11
 80078bc:	d917      	bls.n	80078ee <_malloc_r+0xc2>
 80078be:	1961      	adds	r1, r4, r5
 80078c0:	42a3      	cmp	r3, r4
 80078c2:	6025      	str	r5, [r4, #0]
 80078c4:	bf18      	it	ne
 80078c6:	6059      	strne	r1, [r3, #4]
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	bf08      	it	eq
 80078cc:	f8c8 1000 	streq.w	r1, [r8]
 80078d0:	5162      	str	r2, [r4, r5]
 80078d2:	604b      	str	r3, [r1, #4]
 80078d4:	4630      	mov	r0, r6
 80078d6:	f000 f82f 	bl	8007938 <__malloc_unlock>
 80078da:	f104 000b 	add.w	r0, r4, #11
 80078de:	1d23      	adds	r3, r4, #4
 80078e0:	f020 0007 	bic.w	r0, r0, #7
 80078e4:	1ac2      	subs	r2, r0, r3
 80078e6:	bf1c      	itt	ne
 80078e8:	1a1b      	subne	r3, r3, r0
 80078ea:	50a3      	strne	r3, [r4, r2]
 80078ec:	e7af      	b.n	800784e <_malloc_r+0x22>
 80078ee:	6862      	ldr	r2, [r4, #4]
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	bf0c      	ite	eq
 80078f4:	f8c8 2000 	streq.w	r2, [r8]
 80078f8:	605a      	strne	r2, [r3, #4]
 80078fa:	e7eb      	b.n	80078d4 <_malloc_r+0xa8>
 80078fc:	4623      	mov	r3, r4
 80078fe:	6864      	ldr	r4, [r4, #4]
 8007900:	e7ae      	b.n	8007860 <_malloc_r+0x34>
 8007902:	463c      	mov	r4, r7
 8007904:	687f      	ldr	r7, [r7, #4]
 8007906:	e7b6      	b.n	8007876 <_malloc_r+0x4a>
 8007908:	461a      	mov	r2, r3
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	42a3      	cmp	r3, r4
 800790e:	d1fb      	bne.n	8007908 <_malloc_r+0xdc>
 8007910:	2300      	movs	r3, #0
 8007912:	6053      	str	r3, [r2, #4]
 8007914:	e7de      	b.n	80078d4 <_malloc_r+0xa8>
 8007916:	230c      	movs	r3, #12
 8007918:	6033      	str	r3, [r6, #0]
 800791a:	4630      	mov	r0, r6
 800791c:	f000 f80c 	bl	8007938 <__malloc_unlock>
 8007920:	e794      	b.n	800784c <_malloc_r+0x20>
 8007922:	6005      	str	r5, [r0, #0]
 8007924:	e7d6      	b.n	80078d4 <_malloc_r+0xa8>
 8007926:	bf00      	nop
 8007928:	200006f4 	.word	0x200006f4

0800792c <__malloc_lock>:
 800792c:	4801      	ldr	r0, [pc, #4]	@ (8007934 <__malloc_lock+0x8>)
 800792e:	f7ff bf0e 	b.w	800774e <__retarget_lock_acquire_recursive>
 8007932:	bf00      	nop
 8007934:	200006ec 	.word	0x200006ec

08007938 <__malloc_unlock>:
 8007938:	4801      	ldr	r0, [pc, #4]	@ (8007940 <__malloc_unlock+0x8>)
 800793a:	f7ff bf09 	b.w	8007750 <__retarget_lock_release_recursive>
 800793e:	bf00      	nop
 8007940:	200006ec 	.word	0x200006ec

08007944 <__sflush_r>:
 8007944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794c:	0716      	lsls	r6, r2, #28
 800794e:	4605      	mov	r5, r0
 8007950:	460c      	mov	r4, r1
 8007952:	d454      	bmi.n	80079fe <__sflush_r+0xba>
 8007954:	684b      	ldr	r3, [r1, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	dc02      	bgt.n	8007960 <__sflush_r+0x1c>
 800795a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	dd48      	ble.n	80079f2 <__sflush_r+0xae>
 8007960:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007962:	2e00      	cmp	r6, #0
 8007964:	d045      	beq.n	80079f2 <__sflush_r+0xae>
 8007966:	2300      	movs	r3, #0
 8007968:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800796c:	682f      	ldr	r7, [r5, #0]
 800796e:	6a21      	ldr	r1, [r4, #32]
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	d030      	beq.n	80079d6 <__sflush_r+0x92>
 8007974:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	0759      	lsls	r1, r3, #29
 800797a:	d505      	bpl.n	8007988 <__sflush_r+0x44>
 800797c:	6863      	ldr	r3, [r4, #4]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007982:	b10b      	cbz	r3, 8007988 <__sflush_r+0x44>
 8007984:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007986:	1ad2      	subs	r2, r2, r3
 8007988:	2300      	movs	r3, #0
 800798a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800798c:	6a21      	ldr	r1, [r4, #32]
 800798e:	4628      	mov	r0, r5
 8007990:	47b0      	blx	r6
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	d106      	bne.n	80079a6 <__sflush_r+0x62>
 8007998:	6829      	ldr	r1, [r5, #0]
 800799a:	291d      	cmp	r1, #29
 800799c:	d82b      	bhi.n	80079f6 <__sflush_r+0xb2>
 800799e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a48 <__sflush_r+0x104>)
 80079a0:	40ca      	lsrs	r2, r1
 80079a2:	07d6      	lsls	r6, r2, #31
 80079a4:	d527      	bpl.n	80079f6 <__sflush_r+0xb2>
 80079a6:	2200      	movs	r2, #0
 80079a8:	6062      	str	r2, [r4, #4]
 80079aa:	04d9      	lsls	r1, r3, #19
 80079ac:	6922      	ldr	r2, [r4, #16]
 80079ae:	6022      	str	r2, [r4, #0]
 80079b0:	d504      	bpl.n	80079bc <__sflush_r+0x78>
 80079b2:	1c42      	adds	r2, r0, #1
 80079b4:	d101      	bne.n	80079ba <__sflush_r+0x76>
 80079b6:	682b      	ldr	r3, [r5, #0]
 80079b8:	b903      	cbnz	r3, 80079bc <__sflush_r+0x78>
 80079ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80079bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079be:	602f      	str	r7, [r5, #0]
 80079c0:	b1b9      	cbz	r1, 80079f2 <__sflush_r+0xae>
 80079c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079c6:	4299      	cmp	r1, r3
 80079c8:	d002      	beq.n	80079d0 <__sflush_r+0x8c>
 80079ca:	4628      	mov	r0, r5
 80079cc:	f7ff fec2 	bl	8007754 <_free_r>
 80079d0:	2300      	movs	r3, #0
 80079d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80079d4:	e00d      	b.n	80079f2 <__sflush_r+0xae>
 80079d6:	2301      	movs	r3, #1
 80079d8:	4628      	mov	r0, r5
 80079da:	47b0      	blx	r6
 80079dc:	4602      	mov	r2, r0
 80079de:	1c50      	adds	r0, r2, #1
 80079e0:	d1c9      	bne.n	8007976 <__sflush_r+0x32>
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0c6      	beq.n	8007976 <__sflush_r+0x32>
 80079e8:	2b1d      	cmp	r3, #29
 80079ea:	d001      	beq.n	80079f0 <__sflush_r+0xac>
 80079ec:	2b16      	cmp	r3, #22
 80079ee:	d11e      	bne.n	8007a2e <__sflush_r+0xea>
 80079f0:	602f      	str	r7, [r5, #0]
 80079f2:	2000      	movs	r0, #0
 80079f4:	e022      	b.n	8007a3c <__sflush_r+0xf8>
 80079f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079fa:	b21b      	sxth	r3, r3
 80079fc:	e01b      	b.n	8007a36 <__sflush_r+0xf2>
 80079fe:	690f      	ldr	r7, [r1, #16]
 8007a00:	2f00      	cmp	r7, #0
 8007a02:	d0f6      	beq.n	80079f2 <__sflush_r+0xae>
 8007a04:	0793      	lsls	r3, r2, #30
 8007a06:	680e      	ldr	r6, [r1, #0]
 8007a08:	bf08      	it	eq
 8007a0a:	694b      	ldreq	r3, [r1, #20]
 8007a0c:	600f      	str	r7, [r1, #0]
 8007a0e:	bf18      	it	ne
 8007a10:	2300      	movne	r3, #0
 8007a12:	eba6 0807 	sub.w	r8, r6, r7
 8007a16:	608b      	str	r3, [r1, #8]
 8007a18:	f1b8 0f00 	cmp.w	r8, #0
 8007a1c:	dde9      	ble.n	80079f2 <__sflush_r+0xae>
 8007a1e:	6a21      	ldr	r1, [r4, #32]
 8007a20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a22:	4643      	mov	r3, r8
 8007a24:	463a      	mov	r2, r7
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b0      	blx	r6
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	dc08      	bgt.n	8007a40 <__sflush_r+0xfc>
 8007a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a36:	81a3      	strh	r3, [r4, #12]
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a40:	4407      	add	r7, r0
 8007a42:	eba8 0800 	sub.w	r8, r8, r0
 8007a46:	e7e7      	b.n	8007a18 <__sflush_r+0xd4>
 8007a48:	20400001 	.word	0x20400001

08007a4c <_fflush_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	690b      	ldr	r3, [r1, #16]
 8007a50:	4605      	mov	r5, r0
 8007a52:	460c      	mov	r4, r1
 8007a54:	b913      	cbnz	r3, 8007a5c <_fflush_r+0x10>
 8007a56:	2500      	movs	r5, #0
 8007a58:	4628      	mov	r0, r5
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	b118      	cbz	r0, 8007a66 <_fflush_r+0x1a>
 8007a5e:	6a03      	ldr	r3, [r0, #32]
 8007a60:	b90b      	cbnz	r3, 8007a66 <_fflush_r+0x1a>
 8007a62:	f7ff fc8f 	bl	8007384 <__sinit>
 8007a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0f3      	beq.n	8007a56 <_fflush_r+0xa>
 8007a6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a70:	07d0      	lsls	r0, r2, #31
 8007a72:	d404      	bmi.n	8007a7e <_fflush_r+0x32>
 8007a74:	0599      	lsls	r1, r3, #22
 8007a76:	d402      	bmi.n	8007a7e <_fflush_r+0x32>
 8007a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a7a:	f7ff fe68 	bl	800774e <__retarget_lock_acquire_recursive>
 8007a7e:	4628      	mov	r0, r5
 8007a80:	4621      	mov	r1, r4
 8007a82:	f7ff ff5f 	bl	8007944 <__sflush_r>
 8007a86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a88:	07da      	lsls	r2, r3, #31
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	d4e4      	bmi.n	8007a58 <_fflush_r+0xc>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	059b      	lsls	r3, r3, #22
 8007a92:	d4e1      	bmi.n	8007a58 <_fflush_r+0xc>
 8007a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a96:	f7ff fe5b 	bl	8007750 <__retarget_lock_release_recursive>
 8007a9a:	e7dd      	b.n	8007a58 <_fflush_r+0xc>

08007a9c <__swhatbuf_r>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	b096      	sub	sp, #88	@ 0x58
 8007aa8:	4615      	mov	r5, r2
 8007aaa:	461e      	mov	r6, r3
 8007aac:	da0d      	bge.n	8007aca <__swhatbuf_r+0x2e>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ab4:	f04f 0100 	mov.w	r1, #0
 8007ab8:	bf14      	ite	ne
 8007aba:	2340      	movne	r3, #64	@ 0x40
 8007abc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	6031      	str	r1, [r6, #0]
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	b016      	add	sp, #88	@ 0x58
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
 8007aca:	466a      	mov	r2, sp
 8007acc:	f000 f848 	bl	8007b60 <_fstat_r>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	dbec      	blt.n	8007aae <__swhatbuf_r+0x12>
 8007ad4:	9901      	ldr	r1, [sp, #4]
 8007ad6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ada:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ade:	4259      	negs	r1, r3
 8007ae0:	4159      	adcs	r1, r3
 8007ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ae6:	e7eb      	b.n	8007ac0 <__swhatbuf_r+0x24>

08007ae8 <__smakebuf_r>:
 8007ae8:	898b      	ldrh	r3, [r1, #12]
 8007aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aec:	079d      	lsls	r5, r3, #30
 8007aee:	4606      	mov	r6, r0
 8007af0:	460c      	mov	r4, r1
 8007af2:	d507      	bpl.n	8007b04 <__smakebuf_r+0x1c>
 8007af4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	6123      	str	r3, [r4, #16]
 8007afc:	2301      	movs	r3, #1
 8007afe:	6163      	str	r3, [r4, #20]
 8007b00:	b003      	add	sp, #12
 8007b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b04:	ab01      	add	r3, sp, #4
 8007b06:	466a      	mov	r2, sp
 8007b08:	f7ff ffc8 	bl	8007a9c <__swhatbuf_r>
 8007b0c:	9f00      	ldr	r7, [sp, #0]
 8007b0e:	4605      	mov	r5, r0
 8007b10:	4639      	mov	r1, r7
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7ff fe8a 	bl	800782c <_malloc_r>
 8007b18:	b948      	cbnz	r0, 8007b2e <__smakebuf_r+0x46>
 8007b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1e:	059a      	lsls	r2, r3, #22
 8007b20:	d4ee      	bmi.n	8007b00 <__smakebuf_r+0x18>
 8007b22:	f023 0303 	bic.w	r3, r3, #3
 8007b26:	f043 0302 	orr.w	r3, r3, #2
 8007b2a:	81a3      	strh	r3, [r4, #12]
 8007b2c:	e7e2      	b.n	8007af4 <__smakebuf_r+0xc>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	6020      	str	r0, [r4, #0]
 8007b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	9b01      	ldr	r3, [sp, #4]
 8007b3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b3e:	b15b      	cbz	r3, 8007b58 <__smakebuf_r+0x70>
 8007b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b44:	4630      	mov	r0, r6
 8007b46:	f000 f81d 	bl	8007b84 <_isatty_r>
 8007b4a:	b128      	cbz	r0, 8007b58 <__smakebuf_r+0x70>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f023 0303 	bic.w	r3, r3, #3
 8007b52:	f043 0301 	orr.w	r3, r3, #1
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	431d      	orrs	r5, r3
 8007b5c:	81a5      	strh	r5, [r4, #12]
 8007b5e:	e7cf      	b.n	8007b00 <__smakebuf_r+0x18>

08007b60 <_fstat_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d07      	ldr	r5, [pc, #28]	@ (8007b80 <_fstat_r+0x20>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	602b      	str	r3, [r5, #0]
 8007b6e:	f7fa fa28 	bl	8001fc2 <_fstat>
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	d102      	bne.n	8007b7c <_fstat_r+0x1c>
 8007b76:	682b      	ldr	r3, [r5, #0]
 8007b78:	b103      	cbz	r3, 8007b7c <_fstat_r+0x1c>
 8007b7a:	6023      	str	r3, [r4, #0]
 8007b7c:	bd38      	pop	{r3, r4, r5, pc}
 8007b7e:	bf00      	nop
 8007b80:	200006e8 	.word	0x200006e8

08007b84 <_isatty_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d06      	ldr	r5, [pc, #24]	@ (8007ba0 <_isatty_r+0x1c>)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	602b      	str	r3, [r5, #0]
 8007b90:	f7fa fa27 	bl	8001fe2 <_isatty>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_isatty_r+0x1a>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_isatty_r+0x1a>
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	200006e8 	.word	0x200006e8

08007ba4 <_sbrk_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4d06      	ldr	r5, [pc, #24]	@ (8007bc0 <_sbrk_r+0x1c>)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	4604      	mov	r4, r0
 8007bac:	4608      	mov	r0, r1
 8007bae:	602b      	str	r3, [r5, #0]
 8007bb0:	f7fa fa30 	bl	8002014 <_sbrk>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d102      	bne.n	8007bbe <_sbrk_r+0x1a>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	b103      	cbz	r3, 8007bbe <_sbrk_r+0x1a>
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
 8007bc0:	200006e8 	.word	0x200006e8

08007bc4 <asin>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	ed2d 8b02 	vpush	{d8}
 8007bca:	ec55 4b10 	vmov	r4, r5, d0
 8007bce:	f000 f9d7 	bl	8007f80 <__ieee754_asin>
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	eeb0 8a40 	vmov.f32	s16, s0
 8007bde:	eef0 8a60 	vmov.f32	s17, s1
 8007be2:	f7f8 ff23 	bl	8000a2c <__aeabi_dcmpun>
 8007be6:	b9a8      	cbnz	r0, 8007c14 <asin+0x50>
 8007be8:	ec45 4b10 	vmov	d0, r4, r5
 8007bec:	f000 f9b8 	bl	8007f60 <fabs>
 8007bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8007c24 <asin+0x60>)
 8007bf2:	ec51 0b10 	vmov	r0, r1, d0
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f7f8 ff0e 	bl	8000a18 <__aeabi_dcmpgt>
 8007bfc:	b150      	cbz	r0, 8007c14 <asin+0x50>
 8007bfe:	f7ff fd7b 	bl	80076f8 <__errno>
 8007c02:	ecbd 8b02 	vpop	{d8}
 8007c06:	2321      	movs	r3, #33	@ 0x21
 8007c08:	6003      	str	r3, [r0, #0]
 8007c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c0e:	4806      	ldr	r0, [pc, #24]	@ (8007c28 <asin+0x64>)
 8007c10:	f000 b9ae 	b.w	8007f70 <nan>
 8007c14:	eeb0 0a48 	vmov.f32	s0, s16
 8007c18:	eef0 0a68 	vmov.f32	s1, s17
 8007c1c:	ecbd 8b02 	vpop	{d8}
 8007c20:	bd38      	pop	{r3, r4, r5, pc}
 8007c22:	bf00      	nop
 8007c24:	3ff00000 	.word	0x3ff00000
 8007c28:	0800867c 	.word	0x0800867c
 8007c2c:	00000000 	.word	0x00000000

08007c30 <atan>:
 8007c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	ec55 4b10 	vmov	r4, r5, d0
 8007c38:	4bbf      	ldr	r3, [pc, #764]	@ (8007f38 <atan+0x308>)
 8007c3a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007c3e:	429e      	cmp	r6, r3
 8007c40:	46ab      	mov	fp, r5
 8007c42:	d918      	bls.n	8007c76 <atan+0x46>
 8007c44:	4bbd      	ldr	r3, [pc, #756]	@ (8007f3c <atan+0x30c>)
 8007c46:	429e      	cmp	r6, r3
 8007c48:	d801      	bhi.n	8007c4e <atan+0x1e>
 8007c4a:	d109      	bne.n	8007c60 <atan+0x30>
 8007c4c:	b144      	cbz	r4, 8007c60 <atan+0x30>
 8007c4e:	4622      	mov	r2, r4
 8007c50:	462b      	mov	r3, r5
 8007c52:	4620      	mov	r0, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	f7f8 fa99 	bl	800018c <__adddf3>
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	460d      	mov	r5, r1
 8007c5e:	e006      	b.n	8007c6e <atan+0x3e>
 8007c60:	f1bb 0f00 	cmp.w	fp, #0
 8007c64:	f340 812b 	ble.w	8007ebe <atan+0x28e>
 8007c68:	a597      	add	r5, pc, #604	@ (adr r5, 8007ec8 <atan+0x298>)
 8007c6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c6e:	ec45 4b10 	vmov	d0, r4, r5
 8007c72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c76:	4bb2      	ldr	r3, [pc, #712]	@ (8007f40 <atan+0x310>)
 8007c78:	429e      	cmp	r6, r3
 8007c7a:	d813      	bhi.n	8007ca4 <atan+0x74>
 8007c7c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007c80:	429e      	cmp	r6, r3
 8007c82:	d80c      	bhi.n	8007c9e <atan+0x6e>
 8007c84:	a392      	add	r3, pc, #584	@ (adr r3, 8007ed0 <atan+0x2a0>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	f7f8 fa7d 	bl	800018c <__adddf3>
 8007c92:	4bac      	ldr	r3, [pc, #688]	@ (8007f44 <atan+0x314>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	f7f8 febf 	bl	8000a18 <__aeabi_dcmpgt>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d1e7      	bne.n	8007c6e <atan+0x3e>
 8007c9e:	f04f 3aff 	mov.w	sl, #4294967295
 8007ca2:	e029      	b.n	8007cf8 <atan+0xc8>
 8007ca4:	f000 f95c 	bl	8007f60 <fabs>
 8007ca8:	4ba7      	ldr	r3, [pc, #668]	@ (8007f48 <atan+0x318>)
 8007caa:	429e      	cmp	r6, r3
 8007cac:	ec55 4b10 	vmov	r4, r5, d0
 8007cb0:	f200 80bc 	bhi.w	8007e2c <atan+0x1fc>
 8007cb4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007cb8:	429e      	cmp	r6, r3
 8007cba:	f200 809e 	bhi.w	8007dfa <atan+0x1ca>
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f7f8 fa61 	bl	800018c <__adddf3>
 8007cca:	4b9e      	ldr	r3, [pc, #632]	@ (8007f44 <atan+0x314>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f7f8 fa5b 	bl	8000188 <__aeabi_dsub>
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	460f      	mov	r7, r1
 8007cd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7f8 fa54 	bl	800018c <__adddf3>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4630      	mov	r0, r6
 8007cea:	4639      	mov	r1, r7
 8007cec:	f7f8 fd2e 	bl	800074c <__aeabi_ddiv>
 8007cf0:	f04f 0a00 	mov.w	sl, #0
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	460d      	mov	r5, r1
 8007cf8:	4622      	mov	r2, r4
 8007cfa:	462b      	mov	r3, r5
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	4629      	mov	r1, r5
 8007d00:	f7f8 fbfa 	bl	80004f8 <__aeabi_dmul>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4680      	mov	r8, r0
 8007d0a:	4689      	mov	r9, r1
 8007d0c:	f7f8 fbf4 	bl	80004f8 <__aeabi_dmul>
 8007d10:	a371      	add	r3, pc, #452	@ (adr r3, 8007ed8 <atan+0x2a8>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	f7f8 fbed 	bl	80004f8 <__aeabi_dmul>
 8007d1e:	a370      	add	r3, pc, #448	@ (adr r3, 8007ee0 <atan+0x2b0>)
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f7f8 fa32 	bl	800018c <__adddf3>
 8007d28:	4632      	mov	r2, r6
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	f7f8 fbe4 	bl	80004f8 <__aeabi_dmul>
 8007d30:	a36d      	add	r3, pc, #436	@ (adr r3, 8007ee8 <atan+0x2b8>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	f7f8 fa29 	bl	800018c <__adddf3>
 8007d3a:	4632      	mov	r2, r6
 8007d3c:	463b      	mov	r3, r7
 8007d3e:	f7f8 fbdb 	bl	80004f8 <__aeabi_dmul>
 8007d42:	a36b      	add	r3, pc, #428	@ (adr r3, 8007ef0 <atan+0x2c0>)
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	f7f8 fa20 	bl	800018c <__adddf3>
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	463b      	mov	r3, r7
 8007d50:	f7f8 fbd2 	bl	80004f8 <__aeabi_dmul>
 8007d54:	a368      	add	r3, pc, #416	@ (adr r3, 8007ef8 <atan+0x2c8>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fa17 	bl	800018c <__adddf3>
 8007d5e:	4632      	mov	r2, r6
 8007d60:	463b      	mov	r3, r7
 8007d62:	f7f8 fbc9 	bl	80004f8 <__aeabi_dmul>
 8007d66:	a366      	add	r3, pc, #408	@ (adr r3, 8007f00 <atan+0x2d0>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	f7f8 fa0e 	bl	800018c <__adddf3>
 8007d70:	4642      	mov	r2, r8
 8007d72:	464b      	mov	r3, r9
 8007d74:	f7f8 fbc0 	bl	80004f8 <__aeabi_dmul>
 8007d78:	a363      	add	r3, pc, #396	@ (adr r3, 8007f08 <atan+0x2d8>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	4680      	mov	r8, r0
 8007d80:	4689      	mov	r9, r1
 8007d82:	4630      	mov	r0, r6
 8007d84:	4639      	mov	r1, r7
 8007d86:	f7f8 fbb7 	bl	80004f8 <__aeabi_dmul>
 8007d8a:	a361      	add	r3, pc, #388	@ (adr r3, 8007f10 <atan+0x2e0>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 f9fa 	bl	8000188 <__aeabi_dsub>
 8007d94:	4632      	mov	r2, r6
 8007d96:	463b      	mov	r3, r7
 8007d98:	f7f8 fbae 	bl	80004f8 <__aeabi_dmul>
 8007d9c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007f18 <atan+0x2e8>)
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	f7f8 f9f1 	bl	8000188 <__aeabi_dsub>
 8007da6:	4632      	mov	r2, r6
 8007da8:	463b      	mov	r3, r7
 8007daa:	f7f8 fba5 	bl	80004f8 <__aeabi_dmul>
 8007dae:	a35c      	add	r3, pc, #368	@ (adr r3, 8007f20 <atan+0x2f0>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 f9e8 	bl	8000188 <__aeabi_dsub>
 8007db8:	4632      	mov	r2, r6
 8007dba:	463b      	mov	r3, r7
 8007dbc:	f7f8 fb9c 	bl	80004f8 <__aeabi_dmul>
 8007dc0:	a359      	add	r3, pc, #356	@ (adr r3, 8007f28 <atan+0x2f8>)
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	f7f8 f9df 	bl	8000188 <__aeabi_dsub>
 8007dca:	4632      	mov	r2, r6
 8007dcc:	463b      	mov	r3, r7
 8007dce:	f7f8 fb93 	bl	80004f8 <__aeabi_dmul>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	4649      	mov	r1, r9
 8007dda:	f7f8 f9d7 	bl	800018c <__adddf3>
 8007dde:	4622      	mov	r2, r4
 8007de0:	462b      	mov	r3, r5
 8007de2:	f7f8 fb89 	bl	80004f8 <__aeabi_dmul>
 8007de6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	d148      	bne.n	8007e82 <atan+0x252>
 8007df0:	4620      	mov	r0, r4
 8007df2:	4629      	mov	r1, r5
 8007df4:	f7f8 f9c8 	bl	8000188 <__aeabi_dsub>
 8007df8:	e72f      	b.n	8007c5a <atan+0x2a>
 8007dfa:	4b52      	ldr	r3, [pc, #328]	@ (8007f44 <atan+0x314>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4620      	mov	r0, r4
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7f8 f9c1 	bl	8000188 <__aeabi_dsub>
 8007e06:	4b4f      	ldr	r3, [pc, #316]	@ (8007f44 <atan+0x314>)
 8007e08:	4606      	mov	r6, r0
 8007e0a:	460f      	mov	r7, r1
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7f8 f9bb 	bl	800018c <__adddf3>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	4639      	mov	r1, r7
 8007e1e:	f7f8 fc95 	bl	800074c <__aeabi_ddiv>
 8007e22:	f04f 0a01 	mov.w	sl, #1
 8007e26:	4604      	mov	r4, r0
 8007e28:	460d      	mov	r5, r1
 8007e2a:	e765      	b.n	8007cf8 <atan+0xc8>
 8007e2c:	4b47      	ldr	r3, [pc, #284]	@ (8007f4c <atan+0x31c>)
 8007e2e:	429e      	cmp	r6, r3
 8007e30:	d21c      	bcs.n	8007e6c <atan+0x23c>
 8007e32:	4b47      	ldr	r3, [pc, #284]	@ (8007f50 <atan+0x320>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 f9a5 	bl	8000188 <__aeabi_dsub>
 8007e3e:	4b44      	ldr	r3, [pc, #272]	@ (8007f50 <atan+0x320>)
 8007e40:	4606      	mov	r6, r0
 8007e42:	460f      	mov	r7, r1
 8007e44:	2200      	movs	r2, #0
 8007e46:	4620      	mov	r0, r4
 8007e48:	4629      	mov	r1, r5
 8007e4a:	f7f8 fb55 	bl	80004f8 <__aeabi_dmul>
 8007e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8007f44 <atan+0x314>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	f7f8 f99b 	bl	800018c <__adddf3>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	f7f8 fc75 	bl	800074c <__aeabi_ddiv>
 8007e62:	f04f 0a02 	mov.w	sl, #2
 8007e66:	4604      	mov	r4, r0
 8007e68:	460d      	mov	r5, r1
 8007e6a:	e745      	b.n	8007cf8 <atan+0xc8>
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	462b      	mov	r3, r5
 8007e70:	4938      	ldr	r1, [pc, #224]	@ (8007f54 <atan+0x324>)
 8007e72:	2000      	movs	r0, #0
 8007e74:	f7f8 fc6a 	bl	800074c <__aeabi_ddiv>
 8007e78:	f04f 0a03 	mov.w	sl, #3
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	460d      	mov	r5, r1
 8007e80:	e73a      	b.n	8007cf8 <atan+0xc8>
 8007e82:	4b35      	ldr	r3, [pc, #212]	@ (8007f58 <atan+0x328>)
 8007e84:	4e35      	ldr	r6, [pc, #212]	@ (8007f5c <atan+0x32c>)
 8007e86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 f97b 	bl	8000188 <__aeabi_dsub>
 8007e92:	4622      	mov	r2, r4
 8007e94:	462b      	mov	r3, r5
 8007e96:	f7f8 f977 	bl	8000188 <__aeabi_dsub>
 8007e9a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007ea6:	f7f8 f96f 	bl	8000188 <__aeabi_dsub>
 8007eaa:	f1bb 0f00 	cmp.w	fp, #0
 8007eae:	4604      	mov	r4, r0
 8007eb0:	460d      	mov	r5, r1
 8007eb2:	f6bf aedc 	bge.w	8007c6e <atan+0x3e>
 8007eb6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007eba:	461d      	mov	r5, r3
 8007ebc:	e6d7      	b.n	8007c6e <atan+0x3e>
 8007ebe:	a51c      	add	r5, pc, #112	@ (adr r5, 8007f30 <atan+0x300>)
 8007ec0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ec4:	e6d3      	b.n	8007c6e <atan+0x3e>
 8007ec6:	bf00      	nop
 8007ec8:	54442d18 	.word	0x54442d18
 8007ecc:	3ff921fb 	.word	0x3ff921fb
 8007ed0:	8800759c 	.word	0x8800759c
 8007ed4:	7e37e43c 	.word	0x7e37e43c
 8007ed8:	e322da11 	.word	0xe322da11
 8007edc:	3f90ad3a 	.word	0x3f90ad3a
 8007ee0:	24760deb 	.word	0x24760deb
 8007ee4:	3fa97b4b 	.word	0x3fa97b4b
 8007ee8:	a0d03d51 	.word	0xa0d03d51
 8007eec:	3fb10d66 	.word	0x3fb10d66
 8007ef0:	c54c206e 	.word	0xc54c206e
 8007ef4:	3fb745cd 	.word	0x3fb745cd
 8007ef8:	920083ff 	.word	0x920083ff
 8007efc:	3fc24924 	.word	0x3fc24924
 8007f00:	5555550d 	.word	0x5555550d
 8007f04:	3fd55555 	.word	0x3fd55555
 8007f08:	2c6a6c2f 	.word	0x2c6a6c2f
 8007f0c:	bfa2b444 	.word	0xbfa2b444
 8007f10:	52defd9a 	.word	0x52defd9a
 8007f14:	3fadde2d 	.word	0x3fadde2d
 8007f18:	af749a6d 	.word	0xaf749a6d
 8007f1c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007f20:	fe231671 	.word	0xfe231671
 8007f24:	3fbc71c6 	.word	0x3fbc71c6
 8007f28:	9998ebc4 	.word	0x9998ebc4
 8007f2c:	3fc99999 	.word	0x3fc99999
 8007f30:	54442d18 	.word	0x54442d18
 8007f34:	bff921fb 	.word	0xbff921fb
 8007f38:	440fffff 	.word	0x440fffff
 8007f3c:	7ff00000 	.word	0x7ff00000
 8007f40:	3fdbffff 	.word	0x3fdbffff
 8007f44:	3ff00000 	.word	0x3ff00000
 8007f48:	3ff2ffff 	.word	0x3ff2ffff
 8007f4c:	40038000 	.word	0x40038000
 8007f50:	3ff80000 	.word	0x3ff80000
 8007f54:	bff00000 	.word	0xbff00000
 8007f58:	08008680 	.word	0x08008680
 8007f5c:	080086a0 	.word	0x080086a0

08007f60 <fabs>:
 8007f60:	ec51 0b10 	vmov	r0, r1, d0
 8007f64:	4602      	mov	r2, r0
 8007f66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007f6a:	ec43 2b10 	vmov	d0, r2, r3
 8007f6e:	4770      	bx	lr

08007f70 <nan>:
 8007f70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007f78 <nan+0x8>
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	00000000 	.word	0x00000000
 8007f7c:	7ff80000 	.word	0x7ff80000

08007f80 <__ieee754_asin>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	ec55 4b10 	vmov	r4, r5, d0
 8007f88:	4bc7      	ldr	r3, [pc, #796]	@ (80082a8 <__ieee754_asin+0x328>)
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007f90:	429e      	cmp	r6, r3
 8007f92:	9501      	str	r5, [sp, #4]
 8007f94:	d92d      	bls.n	8007ff2 <__ieee754_asin+0x72>
 8007f96:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8007f9a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007f9e:	4326      	orrs	r6, r4
 8007fa0:	d116      	bne.n	8007fd0 <__ieee754_asin+0x50>
 8007fa2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8008240 <__ieee754_asin+0x2c0>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	4629      	mov	r1, r5
 8007fac:	f7f8 faa4 	bl	80004f8 <__aeabi_dmul>
 8007fb0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8008248 <__ieee754_asin+0x2c8>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460f      	mov	r7, r1
 8007fba:	4620      	mov	r0, r4
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	f7f8 fa9b 	bl	80004f8 <__aeabi_dmul>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 f8df 	bl	800018c <__adddf3>
 8007fce:	e009      	b.n	8007fe4 <__ieee754_asin+0x64>
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	462b      	mov	r3, r5
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 f8d6 	bl	8000188 <__aeabi_dsub>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	f7f8 fbb4 	bl	800074c <__aeabi_ddiv>
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	460d      	mov	r5, r1
 8007fe8:	ec45 4b10 	vmov	d0, r4, r5
 8007fec:	b007      	add	sp, #28
 8007fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff2:	4bae      	ldr	r3, [pc, #696]	@ (80082ac <__ieee754_asin+0x32c>)
 8007ff4:	429e      	cmp	r6, r3
 8007ff6:	d810      	bhi.n	800801a <__ieee754_asin+0x9a>
 8007ff8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8007ffc:	f080 80ad 	bcs.w	800815a <__ieee754_asin+0x1da>
 8008000:	a393      	add	r3, pc, #588	@ (adr r3, 8008250 <__ieee754_asin+0x2d0>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 f8bf 	bl	800018c <__adddf3>
 800800e:	4ba8      	ldr	r3, [pc, #672]	@ (80082b0 <__ieee754_asin+0x330>)
 8008010:	2200      	movs	r2, #0
 8008012:	f7f8 fd01 	bl	8000a18 <__aeabi_dcmpgt>
 8008016:	2800      	cmp	r0, #0
 8008018:	d1e6      	bne.n	8007fe8 <__ieee754_asin+0x68>
 800801a:	ec45 4b10 	vmov	d0, r4, r5
 800801e:	f7ff ff9f 	bl	8007f60 <fabs>
 8008022:	49a3      	ldr	r1, [pc, #652]	@ (80082b0 <__ieee754_asin+0x330>)
 8008024:	ec53 2b10 	vmov	r2, r3, d0
 8008028:	2000      	movs	r0, #0
 800802a:	f7f8 f8ad 	bl	8000188 <__aeabi_dsub>
 800802e:	4ba1      	ldr	r3, [pc, #644]	@ (80082b4 <__ieee754_asin+0x334>)
 8008030:	2200      	movs	r2, #0
 8008032:	f7f8 fa61 	bl	80004f8 <__aeabi_dmul>
 8008036:	a388      	add	r3, pc, #544	@ (adr r3, 8008258 <__ieee754_asin+0x2d8>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	4604      	mov	r4, r0
 800803e:	460d      	mov	r5, r1
 8008040:	f7f8 fa5a 	bl	80004f8 <__aeabi_dmul>
 8008044:	a386      	add	r3, pc, #536	@ (adr r3, 8008260 <__ieee754_asin+0x2e0>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 f89f 	bl	800018c <__adddf3>
 800804e:	4622      	mov	r2, r4
 8008050:	462b      	mov	r3, r5
 8008052:	f7f8 fa51 	bl	80004f8 <__aeabi_dmul>
 8008056:	a384      	add	r3, pc, #528	@ (adr r3, 8008268 <__ieee754_asin+0x2e8>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f7f8 f894 	bl	8000188 <__aeabi_dsub>
 8008060:	4622      	mov	r2, r4
 8008062:	462b      	mov	r3, r5
 8008064:	f7f8 fa48 	bl	80004f8 <__aeabi_dmul>
 8008068:	a381      	add	r3, pc, #516	@ (adr r3, 8008270 <__ieee754_asin+0x2f0>)
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	f7f8 f88d 	bl	800018c <__adddf3>
 8008072:	4622      	mov	r2, r4
 8008074:	462b      	mov	r3, r5
 8008076:	f7f8 fa3f 	bl	80004f8 <__aeabi_dmul>
 800807a:	a37f      	add	r3, pc, #508	@ (adr r3, 8008278 <__ieee754_asin+0x2f8>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f7f8 f882 	bl	8000188 <__aeabi_dsub>
 8008084:	4622      	mov	r2, r4
 8008086:	462b      	mov	r3, r5
 8008088:	f7f8 fa36 	bl	80004f8 <__aeabi_dmul>
 800808c:	a37c      	add	r3, pc, #496	@ (adr r3, 8008280 <__ieee754_asin+0x300>)
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	f7f8 f87b 	bl	800018c <__adddf3>
 8008096:	4622      	mov	r2, r4
 8008098:	462b      	mov	r3, r5
 800809a:	f7f8 fa2d 	bl	80004f8 <__aeabi_dmul>
 800809e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008288 <__ieee754_asin+0x308>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080a8:	4620      	mov	r0, r4
 80080aa:	4629      	mov	r1, r5
 80080ac:	f7f8 fa24 	bl	80004f8 <__aeabi_dmul>
 80080b0:	a377      	add	r3, pc, #476	@ (adr r3, 8008290 <__ieee754_asin+0x310>)
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	f7f8 f867 	bl	8000188 <__aeabi_dsub>
 80080ba:	4622      	mov	r2, r4
 80080bc:	462b      	mov	r3, r5
 80080be:	f7f8 fa1b 	bl	80004f8 <__aeabi_dmul>
 80080c2:	a375      	add	r3, pc, #468	@ (adr r3, 8008298 <__ieee754_asin+0x318>)
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f7f8 f860 	bl	800018c <__adddf3>
 80080cc:	4622      	mov	r2, r4
 80080ce:	462b      	mov	r3, r5
 80080d0:	f7f8 fa12 	bl	80004f8 <__aeabi_dmul>
 80080d4:	a372      	add	r3, pc, #456	@ (adr r3, 80082a0 <__ieee754_asin+0x320>)
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	f7f8 f855 	bl	8000188 <__aeabi_dsub>
 80080de:	4622      	mov	r2, r4
 80080e0:	462b      	mov	r3, r5
 80080e2:	f7f8 fa09 	bl	80004f8 <__aeabi_dmul>
 80080e6:	4b72      	ldr	r3, [pc, #456]	@ (80082b0 <__ieee754_asin+0x330>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	f7f8 f84f 	bl	800018c <__adddf3>
 80080ee:	ec45 4b10 	vmov	d0, r4, r5
 80080f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080f6:	f000 f947 	bl	8008388 <__ieee754_sqrt>
 80080fa:	4b6f      	ldr	r3, [pc, #444]	@ (80082b8 <__ieee754_asin+0x338>)
 80080fc:	429e      	cmp	r6, r3
 80080fe:	ec5b ab10 	vmov	sl, fp, d0
 8008102:	f240 80db 	bls.w	80082bc <__ieee754_asin+0x33c>
 8008106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800810a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800810e:	f7f8 fb1d 	bl	800074c <__aeabi_ddiv>
 8008112:	4652      	mov	r2, sl
 8008114:	465b      	mov	r3, fp
 8008116:	f7f8 f9ef 	bl	80004f8 <__aeabi_dmul>
 800811a:	4652      	mov	r2, sl
 800811c:	465b      	mov	r3, fp
 800811e:	f7f8 f835 	bl	800018c <__adddf3>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	f7f8 f831 	bl	800018c <__adddf3>
 800812a:	a347      	add	r3, pc, #284	@ (adr r3, 8008248 <__ieee754_asin+0x2c8>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f7f8 f82a 	bl	8000188 <__aeabi_dsub>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	a141      	add	r1, pc, #260	@ (adr r1, 8008240 <__ieee754_asin+0x2c0>)
 800813a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800813e:	f7f8 f823 	bl	8000188 <__aeabi_dsub>
 8008142:	9b01      	ldr	r3, [sp, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	bfdc      	itt	le
 8008148:	4602      	movle	r2, r0
 800814a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800814e:	4604      	mov	r4, r0
 8008150:	460d      	mov	r5, r1
 8008152:	bfdc      	itt	le
 8008154:	4614      	movle	r4, r2
 8008156:	461d      	movle	r5, r3
 8008158:	e746      	b.n	8007fe8 <__ieee754_asin+0x68>
 800815a:	4622      	mov	r2, r4
 800815c:	462b      	mov	r3, r5
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f8 f9c9 	bl	80004f8 <__aeabi_dmul>
 8008166:	a33c      	add	r3, pc, #240	@ (adr r3, 8008258 <__ieee754_asin+0x2d8>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	4606      	mov	r6, r0
 800816e:	460f      	mov	r7, r1
 8008170:	f7f8 f9c2 	bl	80004f8 <__aeabi_dmul>
 8008174:	a33a      	add	r3, pc, #232	@ (adr r3, 8008260 <__ieee754_asin+0x2e0>)
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	f7f8 f807 	bl	800018c <__adddf3>
 800817e:	4632      	mov	r2, r6
 8008180:	463b      	mov	r3, r7
 8008182:	f7f8 f9b9 	bl	80004f8 <__aeabi_dmul>
 8008186:	a338      	add	r3, pc, #224	@ (adr r3, 8008268 <__ieee754_asin+0x2e8>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f7 fffc 	bl	8000188 <__aeabi_dsub>
 8008190:	4632      	mov	r2, r6
 8008192:	463b      	mov	r3, r7
 8008194:	f7f8 f9b0 	bl	80004f8 <__aeabi_dmul>
 8008198:	a335      	add	r3, pc, #212	@ (adr r3, 8008270 <__ieee754_asin+0x2f0>)
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	f7f7 fff5 	bl	800018c <__adddf3>
 80081a2:	4632      	mov	r2, r6
 80081a4:	463b      	mov	r3, r7
 80081a6:	f7f8 f9a7 	bl	80004f8 <__aeabi_dmul>
 80081aa:	a333      	add	r3, pc, #204	@ (adr r3, 8008278 <__ieee754_asin+0x2f8>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f7f7 ffea 	bl	8000188 <__aeabi_dsub>
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	f7f8 f99e 	bl	80004f8 <__aeabi_dmul>
 80081bc:	a330      	add	r3, pc, #192	@ (adr r3, 8008280 <__ieee754_asin+0x300>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f7 ffe3 	bl	800018c <__adddf3>
 80081c6:	4632      	mov	r2, r6
 80081c8:	463b      	mov	r3, r7
 80081ca:	f7f8 f995 	bl	80004f8 <__aeabi_dmul>
 80081ce:	a32e      	add	r3, pc, #184	@ (adr r3, 8008288 <__ieee754_asin+0x308>)
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	4680      	mov	r8, r0
 80081d6:	4689      	mov	r9, r1
 80081d8:	4630      	mov	r0, r6
 80081da:	4639      	mov	r1, r7
 80081dc:	f7f8 f98c 	bl	80004f8 <__aeabi_dmul>
 80081e0:	a32b      	add	r3, pc, #172	@ (adr r3, 8008290 <__ieee754_asin+0x310>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f7f7 ffcf 	bl	8000188 <__aeabi_dsub>
 80081ea:	4632      	mov	r2, r6
 80081ec:	463b      	mov	r3, r7
 80081ee:	f7f8 f983 	bl	80004f8 <__aeabi_dmul>
 80081f2:	a329      	add	r3, pc, #164	@ (adr r3, 8008298 <__ieee754_asin+0x318>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f7 ffc8 	bl	800018c <__adddf3>
 80081fc:	4632      	mov	r2, r6
 80081fe:	463b      	mov	r3, r7
 8008200:	f7f8 f97a 	bl	80004f8 <__aeabi_dmul>
 8008204:	a326      	add	r3, pc, #152	@ (adr r3, 80082a0 <__ieee754_asin+0x320>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f7f7 ffbd 	bl	8000188 <__aeabi_dsub>
 800820e:	4632      	mov	r2, r6
 8008210:	463b      	mov	r3, r7
 8008212:	f7f8 f971 	bl	80004f8 <__aeabi_dmul>
 8008216:	4b26      	ldr	r3, [pc, #152]	@ (80082b0 <__ieee754_asin+0x330>)
 8008218:	2200      	movs	r2, #0
 800821a:	f7f7 ffb7 	bl	800018c <__adddf3>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4640      	mov	r0, r8
 8008224:	4649      	mov	r1, r9
 8008226:	f7f8 fa91 	bl	800074c <__aeabi_ddiv>
 800822a:	4622      	mov	r2, r4
 800822c:	462b      	mov	r3, r5
 800822e:	f7f8 f963 	bl	80004f8 <__aeabi_dmul>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4620      	mov	r0, r4
 8008238:	4629      	mov	r1, r5
 800823a:	e6c6      	b.n	8007fca <__ieee754_asin+0x4a>
 800823c:	f3af 8000 	nop.w
 8008240:	54442d18 	.word	0x54442d18
 8008244:	3ff921fb 	.word	0x3ff921fb
 8008248:	33145c07 	.word	0x33145c07
 800824c:	3c91a626 	.word	0x3c91a626
 8008250:	8800759c 	.word	0x8800759c
 8008254:	7e37e43c 	.word	0x7e37e43c
 8008258:	0dfdf709 	.word	0x0dfdf709
 800825c:	3f023de1 	.word	0x3f023de1
 8008260:	7501b288 	.word	0x7501b288
 8008264:	3f49efe0 	.word	0x3f49efe0
 8008268:	b5688f3b 	.word	0xb5688f3b
 800826c:	3fa48228 	.word	0x3fa48228
 8008270:	0e884455 	.word	0x0e884455
 8008274:	3fc9c155 	.word	0x3fc9c155
 8008278:	03eb6f7d 	.word	0x03eb6f7d
 800827c:	3fd4d612 	.word	0x3fd4d612
 8008280:	55555555 	.word	0x55555555
 8008284:	3fc55555 	.word	0x3fc55555
 8008288:	b12e9282 	.word	0xb12e9282
 800828c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008290:	1b8d0159 	.word	0x1b8d0159
 8008294:	3fe6066c 	.word	0x3fe6066c
 8008298:	9c598ac8 	.word	0x9c598ac8
 800829c:	40002ae5 	.word	0x40002ae5
 80082a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80082a4:	40033a27 	.word	0x40033a27
 80082a8:	3fefffff 	.word	0x3fefffff
 80082ac:	3fdfffff 	.word	0x3fdfffff
 80082b0:	3ff00000 	.word	0x3ff00000
 80082b4:	3fe00000 	.word	0x3fe00000
 80082b8:	3fef3332 	.word	0x3fef3332
 80082bc:	4652      	mov	r2, sl
 80082be:	465b      	mov	r3, fp
 80082c0:	4650      	mov	r0, sl
 80082c2:	4659      	mov	r1, fp
 80082c4:	f7f7 ff62 	bl	800018c <__adddf3>
 80082c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082cc:	4606      	mov	r6, r0
 80082ce:	460f      	mov	r7, r1
 80082d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d4:	f7f8 fa3a 	bl	800074c <__aeabi_ddiv>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4630      	mov	r0, r6
 80082de:	4639      	mov	r1, r7
 80082e0:	f7f8 f90a 	bl	80004f8 <__aeabi_dmul>
 80082e4:	f04f 0800 	mov.w	r8, #0
 80082e8:	4606      	mov	r6, r0
 80082ea:	460f      	mov	r7, r1
 80082ec:	4642      	mov	r2, r8
 80082ee:	465b      	mov	r3, fp
 80082f0:	4640      	mov	r0, r8
 80082f2:	4659      	mov	r1, fp
 80082f4:	f7f8 f900 	bl	80004f8 <__aeabi_dmul>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4620      	mov	r0, r4
 80082fe:	4629      	mov	r1, r5
 8008300:	f7f7 ff42 	bl	8000188 <__aeabi_dsub>
 8008304:	4642      	mov	r2, r8
 8008306:	4604      	mov	r4, r0
 8008308:	460d      	mov	r5, r1
 800830a:	465b      	mov	r3, fp
 800830c:	4650      	mov	r0, sl
 800830e:	4659      	mov	r1, fp
 8008310:	f7f7 ff3c 	bl	800018c <__adddf3>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4620      	mov	r0, r4
 800831a:	4629      	mov	r1, r5
 800831c:	f7f8 fa16 	bl	800074c <__aeabi_ddiv>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	f7f7 ff32 	bl	800018c <__adddf3>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	a112      	add	r1, pc, #72	@ (adr r1, 8008378 <__ieee754_asin+0x3f8>)
 800832e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008332:	f7f7 ff29 	bl	8000188 <__aeabi_dsub>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4630      	mov	r0, r6
 800833c:	4639      	mov	r1, r7
 800833e:	f7f7 ff23 	bl	8000188 <__aeabi_dsub>
 8008342:	4642      	mov	r2, r8
 8008344:	4604      	mov	r4, r0
 8008346:	460d      	mov	r5, r1
 8008348:	465b      	mov	r3, fp
 800834a:	4640      	mov	r0, r8
 800834c:	4659      	mov	r1, fp
 800834e:	f7f7 ff1d 	bl	800018c <__adddf3>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	a10a      	add	r1, pc, #40	@ (adr r1, 8008380 <__ieee754_asin+0x400>)
 8008358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800835c:	f7f7 ff14 	bl	8000188 <__aeabi_dsub>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4620      	mov	r0, r4
 8008366:	4629      	mov	r1, r5
 8008368:	f7f7 ff0e 	bl	8000188 <__aeabi_dsub>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	a103      	add	r1, pc, #12	@ (adr r1, 8008380 <__ieee754_asin+0x400>)
 8008372:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008376:	e6e2      	b.n	800813e <__ieee754_asin+0x1be>
 8008378:	33145c07 	.word	0x33145c07
 800837c:	3c91a626 	.word	0x3c91a626
 8008380:	54442d18 	.word	0x54442d18
 8008384:	3fe921fb 	.word	0x3fe921fb

08008388 <__ieee754_sqrt>:
 8008388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	4a66      	ldr	r2, [pc, #408]	@ (8008528 <__ieee754_sqrt+0x1a0>)
 800838e:	ec55 4b10 	vmov	r4, r5, d0
 8008392:	43aa      	bics	r2, r5
 8008394:	462b      	mov	r3, r5
 8008396:	4621      	mov	r1, r4
 8008398:	d110      	bne.n	80083bc <__ieee754_sqrt+0x34>
 800839a:	4622      	mov	r2, r4
 800839c:	4620      	mov	r0, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	f7f8 f8aa 	bl	80004f8 <__aeabi_dmul>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4620      	mov	r0, r4
 80083aa:	4629      	mov	r1, r5
 80083ac:	f7f7 feee 	bl	800018c <__adddf3>
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	ec45 4b10 	vmov	d0, r4, r5
 80083b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083bc:	2d00      	cmp	r5, #0
 80083be:	dc0e      	bgt.n	80083de <__ieee754_sqrt+0x56>
 80083c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80083c4:	4322      	orrs	r2, r4
 80083c6:	d0f5      	beq.n	80083b4 <__ieee754_sqrt+0x2c>
 80083c8:	b19d      	cbz	r5, 80083f2 <__ieee754_sqrt+0x6a>
 80083ca:	4622      	mov	r2, r4
 80083cc:	4620      	mov	r0, r4
 80083ce:	4629      	mov	r1, r5
 80083d0:	f7f7 feda 	bl	8000188 <__aeabi_dsub>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	f7f8 f9b8 	bl	800074c <__aeabi_ddiv>
 80083dc:	e7e8      	b.n	80083b0 <__ieee754_sqrt+0x28>
 80083de:	152a      	asrs	r2, r5, #20
 80083e0:	d115      	bne.n	800840e <__ieee754_sqrt+0x86>
 80083e2:	2000      	movs	r0, #0
 80083e4:	e009      	b.n	80083fa <__ieee754_sqrt+0x72>
 80083e6:	0acb      	lsrs	r3, r1, #11
 80083e8:	3a15      	subs	r2, #21
 80083ea:	0549      	lsls	r1, r1, #21
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0fa      	beq.n	80083e6 <__ieee754_sqrt+0x5e>
 80083f0:	e7f7      	b.n	80083e2 <__ieee754_sqrt+0x5a>
 80083f2:	462a      	mov	r2, r5
 80083f4:	e7fa      	b.n	80083ec <__ieee754_sqrt+0x64>
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	3001      	adds	r0, #1
 80083fa:	02dc      	lsls	r4, r3, #11
 80083fc:	d5fb      	bpl.n	80083f6 <__ieee754_sqrt+0x6e>
 80083fe:	1e44      	subs	r4, r0, #1
 8008400:	1b12      	subs	r2, r2, r4
 8008402:	f1c0 0420 	rsb	r4, r0, #32
 8008406:	fa21 f404 	lsr.w	r4, r1, r4
 800840a:	4323      	orrs	r3, r4
 800840c:	4081      	lsls	r1, r0
 800840e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008412:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800841a:	07d2      	lsls	r2, r2, #31
 800841c:	bf5c      	itt	pl
 800841e:	005b      	lslpl	r3, r3, #1
 8008420:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008424:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008428:	bf58      	it	pl
 800842a:	0049      	lslpl	r1, r1, #1
 800842c:	2600      	movs	r6, #0
 800842e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008432:	107f      	asrs	r7, r7, #1
 8008434:	0049      	lsls	r1, r1, #1
 8008436:	2016      	movs	r0, #22
 8008438:	4632      	mov	r2, r6
 800843a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800843e:	1915      	adds	r5, r2, r4
 8008440:	429d      	cmp	r5, r3
 8008442:	bfde      	ittt	le
 8008444:	192a      	addle	r2, r5, r4
 8008446:	1b5b      	suble	r3, r3, r5
 8008448:	1936      	addle	r6, r6, r4
 800844a:	0fcd      	lsrs	r5, r1, #31
 800844c:	3801      	subs	r0, #1
 800844e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008452:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008456:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800845a:	d1f0      	bne.n	800843e <__ieee754_sqrt+0xb6>
 800845c:	4605      	mov	r5, r0
 800845e:	2420      	movs	r4, #32
 8008460:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008464:	4293      	cmp	r3, r2
 8008466:	eb0c 0e00 	add.w	lr, ip, r0
 800846a:	dc02      	bgt.n	8008472 <__ieee754_sqrt+0xea>
 800846c:	d113      	bne.n	8008496 <__ieee754_sqrt+0x10e>
 800846e:	458e      	cmp	lr, r1
 8008470:	d811      	bhi.n	8008496 <__ieee754_sqrt+0x10e>
 8008472:	f1be 0f00 	cmp.w	lr, #0
 8008476:	eb0e 000c 	add.w	r0, lr, ip
 800847a:	da3f      	bge.n	80084fc <__ieee754_sqrt+0x174>
 800847c:	2800      	cmp	r0, #0
 800847e:	db3d      	blt.n	80084fc <__ieee754_sqrt+0x174>
 8008480:	f102 0801 	add.w	r8, r2, #1
 8008484:	1a9b      	subs	r3, r3, r2
 8008486:	458e      	cmp	lr, r1
 8008488:	bf88      	it	hi
 800848a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800848e:	eba1 010e 	sub.w	r1, r1, lr
 8008492:	4465      	add	r5, ip
 8008494:	4642      	mov	r2, r8
 8008496:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800849a:	3c01      	subs	r4, #1
 800849c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80084a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80084a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80084a8:	d1dc      	bne.n	8008464 <__ieee754_sqrt+0xdc>
 80084aa:	4319      	orrs	r1, r3
 80084ac:	d01b      	beq.n	80084e6 <__ieee754_sqrt+0x15e>
 80084ae:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800852c <__ieee754_sqrt+0x1a4>
 80084b2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008530 <__ieee754_sqrt+0x1a8>
 80084b6:	e9da 0100 	ldrd	r0, r1, [sl]
 80084ba:	e9db 2300 	ldrd	r2, r3, [fp]
 80084be:	f7f7 fe63 	bl	8000188 <__aeabi_dsub>
 80084c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4640      	mov	r0, r8
 80084cc:	4649      	mov	r1, r9
 80084ce:	f7f8 fa8f 	bl	80009f0 <__aeabi_dcmple>
 80084d2:	b140      	cbz	r0, 80084e6 <__ieee754_sqrt+0x15e>
 80084d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80084d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80084dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80084e0:	d10e      	bne.n	8008500 <__ieee754_sqrt+0x178>
 80084e2:	3601      	adds	r6, #1
 80084e4:	4625      	mov	r5, r4
 80084e6:	1073      	asrs	r3, r6, #1
 80084e8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80084ec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80084f0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80084f4:	086b      	lsrs	r3, r5, #1
 80084f6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80084fa:	e759      	b.n	80083b0 <__ieee754_sqrt+0x28>
 80084fc:	4690      	mov	r8, r2
 80084fe:	e7c1      	b.n	8008484 <__ieee754_sqrt+0xfc>
 8008500:	f7f7 fe44 	bl	800018c <__adddf3>
 8008504:	e9da 8900 	ldrd	r8, r9, [sl]
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4640      	mov	r0, r8
 800850e:	4649      	mov	r1, r9
 8008510:	f7f8 fa64 	bl	80009dc <__aeabi_dcmplt>
 8008514:	b120      	cbz	r0, 8008520 <__ieee754_sqrt+0x198>
 8008516:	1cab      	adds	r3, r5, #2
 8008518:	bf08      	it	eq
 800851a:	3601      	addeq	r6, #1
 800851c:	3502      	adds	r5, #2
 800851e:	e7e2      	b.n	80084e6 <__ieee754_sqrt+0x15e>
 8008520:	1c6b      	adds	r3, r5, #1
 8008522:	f023 0501 	bic.w	r5, r3, #1
 8008526:	e7de      	b.n	80084e6 <__ieee754_sqrt+0x15e>
 8008528:	7ff00000 	.word	0x7ff00000
 800852c:	080086c8 	.word	0x080086c8
 8008530:	080086c0 	.word	0x080086c0

08008534 <_init>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	bf00      	nop
 8008538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853a:	bc08      	pop	{r3}
 800853c:	469e      	mov	lr, r3
 800853e:	4770      	bx	lr

08008540 <_fini>:
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	bf00      	nop
 8008544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008546:	bc08      	pop	{r3}
 8008548:	469e      	mov	lr, r3
 800854a:	4770      	bx	lr
