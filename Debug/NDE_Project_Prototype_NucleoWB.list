
NDE_Project_Prototype_NucleoWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084fc  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08008640  08008640  00009640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080087c0  080087c0  000097c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080087c8  080087c8  000097c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080087cc  080087cc  000097cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  20000008  080087d0  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000066c  2000008c  08008854  0000a08c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006f8  08008854  0000a6f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d5be  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000038dc  00000000  00000000  0002767a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e20  00000000  00000000  0002af58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001749  00000000  00000000  0002cd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025489  00000000  00000000  0002e4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e05c  00000000  00000000  0005394a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000eaad0  00000000  00000000  000719a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0015c476  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a30  00000000  00000000  0015c4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  00164eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000008c 	.word	0x2000008c
 800015c:	00000000 	.word	0x00000000
 8000160:	08008624 	.word	0x08008624

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000090 	.word	0x20000090
 800017c:	08008624 	.word	0x08008624

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2f>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a60:	bf24      	itt	cs
 8000a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6a:	d90d      	bls.n	8000a88 <__aeabi_d2f+0x30>
 8000a6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a80:	bf08      	it	eq
 8000a82:	f020 0001 	biceq.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a8c:	d121      	bne.n	8000ad2 <__aeabi_d2f+0x7a>
 8000a8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a92:	bfbc      	itt	lt
 8000a94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	4770      	bxlt	lr
 8000a9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa2:	f1c2 0218 	rsb	r2, r2, #24
 8000aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aae:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	f040 0001 	orrne.w	r0, r0, #1
 8000ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac4:	ea40 000c 	orr.w	r0, r0, ip
 8000ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8000acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad0:	e7cc      	b.n	8000a6c <__aeabi_d2f+0x14>
 8000ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad6:	d107      	bne.n	8000ae8 <__aeabi_d2f+0x90>
 8000ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000adc:	bf1e      	ittt	ne
 8000ade:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ae6:	4770      	bxne	lr
 8000ae8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_uldivmod>:
 8000af8:	b953      	cbnz	r3, 8000b10 <__aeabi_uldivmod+0x18>
 8000afa:	b94a      	cbnz	r2, 8000b10 <__aeabi_uldivmod+0x18>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bf08      	it	eq
 8000b00:	2800      	cmpeq	r0, #0
 8000b02:	bf1c      	itt	ne
 8000b04:	f04f 31ff 	movne.w	r1, #4294967295
 8000b08:	f04f 30ff 	movne.w	r0, #4294967295
 8000b0c:	f000 b988 	b.w	8000e20 <__aeabi_idiv0>
 8000b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b18:	f000 f806 	bl	8000b28 <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4770      	bx	lr

08000b28 <__udivmoddi4>:
 8000b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b2c:	9d08      	ldr	r5, [sp, #32]
 8000b2e:	468e      	mov	lr, r1
 8000b30:	4604      	mov	r4, r0
 8000b32:	4688      	mov	r8, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14a      	bne.n	8000bce <__udivmoddi4+0xa6>
 8000b38:	428a      	cmp	r2, r1
 8000b3a:	4617      	mov	r7, r2
 8000b3c:	d962      	bls.n	8000c04 <__udivmoddi4+0xdc>
 8000b3e:	fab2 f682 	clz	r6, r2
 8000b42:	b14e      	cbz	r6, 8000b58 <__udivmoddi4+0x30>
 8000b44:	f1c6 0320 	rsb	r3, r6, #32
 8000b48:	fa01 f806 	lsl.w	r8, r1, r6
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	40b7      	lsls	r7, r6
 8000b52:	ea43 0808 	orr.w	r8, r3, r8
 8000b56:	40b4      	lsls	r4, r6
 8000b58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b5c:	fa1f fc87 	uxth.w	ip, r7
 8000b60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b64:	0c23      	lsrs	r3, r4, #16
 8000b66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0x62>
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b7c:	f080 80ea 	bcs.w	8000d54 <__udivmoddi4+0x22c>
 8000b80:	429a      	cmp	r2, r3
 8000b82:	f240 80e7 	bls.w	8000d54 <__udivmoddi4+0x22c>
 8000b86:	3902      	subs	r1, #2
 8000b88:	443b      	add	r3, r7
 8000b8a:	1a9a      	subs	r2, r3, r2
 8000b8c:	b2a3      	uxth	r3, r4
 8000b8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b9e:	459c      	cmp	ip, r3
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0x8e>
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba8:	f080 80d6 	bcs.w	8000d58 <__udivmoddi4+0x230>
 8000bac:	459c      	cmp	ip, r3
 8000bae:	f240 80d3 	bls.w	8000d58 <__udivmoddi4+0x230>
 8000bb2:	443b      	add	r3, r7
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bba:	eba3 030c 	sub.w	r3, r3, ip
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	b11d      	cbz	r5, 8000bca <__udivmoddi4+0xa2>
 8000bc2:	40f3      	lsrs	r3, r6
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d905      	bls.n	8000bde <__udivmoddi4+0xb6>
 8000bd2:	b10d      	cbz	r5, 8000bd8 <__udivmoddi4+0xb0>
 8000bd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	e7f5      	b.n	8000bca <__udivmoddi4+0xa2>
 8000bde:	fab3 f183 	clz	r1, r3
 8000be2:	2900      	cmp	r1, #0
 8000be4:	d146      	bne.n	8000c74 <__udivmoddi4+0x14c>
 8000be6:	4573      	cmp	r3, lr
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xc8>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 8105 	bhi.w	8000dfa <__udivmoddi4+0x2d2>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	4690      	mov	r8, r2
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e5      	beq.n	8000bca <__udivmoddi4+0xa2>
 8000bfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000c02:	e7e2      	b.n	8000bca <__udivmoddi4+0xa2>
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	f000 8090 	beq.w	8000d2a <__udivmoddi4+0x202>
 8000c0a:	fab2 f682 	clz	r6, r2
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	f040 80a4 	bne.w	8000d5c <__udivmoddi4+0x234>
 8000c14:	1a8a      	subs	r2, r1, r2
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	b2bc      	uxth	r4, r7
 8000c20:	2101      	movs	r1, #1
 8000c22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x11e>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c3c:	d202      	bcs.n	8000c44 <__udivmoddi4+0x11c>
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	f200 80e0 	bhi.w	8000e04 <__udivmoddi4+0x2dc>
 8000c44:	46c4      	mov	ip, r8
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c54:	fb02 f404 	mul.w	r4, r2, r4
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x144>
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x142>
 8000c64:	429c      	cmp	r4, r3
 8000c66:	f200 80ca 	bhi.w	8000dfe <__udivmoddi4+0x2d6>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c72:	e7a5      	b.n	8000bc0 <__udivmoddi4+0x98>
 8000c74:	f1c1 0620 	rsb	r6, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c7e:	431f      	orrs	r7, r3
 8000c80:	fa0e f401 	lsl.w	r4, lr, r1
 8000c84:	fa20 f306 	lsr.w	r3, r0, r6
 8000c88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fa00 f801 	lsl.w	r8, r0, r1
 8000c96:	fa1f fc87 	uxth.w	ip, r7
 8000c9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ca8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x1a0>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cba:	f080 809c 	bcs.w	8000df6 <__udivmoddi4+0x2ce>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f240 8099 	bls.w	8000df6 <__udivmoddi4+0x2ce>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	fa1f fe83 	uxth.w	lr, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cdc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce0:	45a4      	cmp	ip, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1ce>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cea:	f080 8082 	bcs.w	8000df2 <__udivmoddi4+0x2ca>
 8000cee:	45a4      	cmp	ip, r4
 8000cf0:	d97f      	bls.n	8000df2 <__udivmoddi4+0x2ca>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	443c      	add	r4, r7
 8000cf6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfa:	eba4 040c 	sub.w	r4, r4, ip
 8000cfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d02:	4564      	cmp	r4, ip
 8000d04:	4673      	mov	r3, lr
 8000d06:	46e1      	mov	r9, ip
 8000d08:	d362      	bcc.n	8000dd0 <__udivmoddi4+0x2a8>
 8000d0a:	d05f      	beq.n	8000dcc <__udivmoddi4+0x2a4>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x1fe>
 8000d0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d12:	eb64 0409 	sbc.w	r4, r4, r9
 8000d16:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d1e:	431e      	orrs	r6, r3
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	e9c5 6400 	strd	r6, r4, [r5]
 8000d26:	2100      	movs	r1, #0
 8000d28:	e74f      	b.n	8000bca <__udivmoddi4+0xa2>
 8000d2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d2e:	0c01      	lsrs	r1, r0, #16
 8000d30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d34:	b280      	uxth	r0, r0
 8000d36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4638      	mov	r0, r7
 8000d3e:	463c      	mov	r4, r7
 8000d40:	46b8      	mov	r8, r7
 8000d42:	46be      	mov	lr, r7
 8000d44:	2620      	movs	r6, #32
 8000d46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4a:	eba2 0208 	sub.w	r2, r2, r8
 8000d4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d52:	e766      	b.n	8000c22 <__udivmoddi4+0xfa>
 8000d54:	4601      	mov	r1, r0
 8000d56:	e718      	b.n	8000b8a <__udivmoddi4+0x62>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	e72c      	b.n	8000bb6 <__udivmoddi4+0x8e>
 8000d5c:	f1c6 0220 	rsb	r2, r6, #32
 8000d60:	fa2e f302 	lsr.w	r3, lr, r2
 8000d64:	40b7      	lsls	r7, r6
 8000d66:	40b1      	lsls	r1, r6
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	430a      	orrs	r2, r1
 8000d72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d76:	b2bc      	uxth	r4, r7
 8000d78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d7c:	0c11      	lsrs	r1, r2, #16
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb08 f904 	mul.w	r9, r8, r4
 8000d86:	40b0      	lsls	r0, r6
 8000d88:	4589      	cmp	r9, r1
 8000d8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d8e:	b280      	uxth	r0, r0
 8000d90:	d93e      	bls.n	8000e10 <__udivmoddi4+0x2e8>
 8000d92:	1879      	adds	r1, r7, r1
 8000d94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d98:	d201      	bcs.n	8000d9e <__udivmoddi4+0x276>
 8000d9a:	4589      	cmp	r9, r1
 8000d9c:	d81f      	bhi.n	8000dde <__udivmoddi4+0x2b6>
 8000d9e:	eba1 0109 	sub.w	r1, r1, r9
 8000da2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da6:	fb09 f804 	mul.w	r8, r9, r4
 8000daa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dae:	b292      	uxth	r2, r2
 8000db0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db4:	4542      	cmp	r2, r8
 8000db6:	d229      	bcs.n	8000e0c <__udivmoddi4+0x2e4>
 8000db8:	18ba      	adds	r2, r7, r2
 8000dba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dbe:	d2c4      	bcs.n	8000d4a <__udivmoddi4+0x222>
 8000dc0:	4542      	cmp	r2, r8
 8000dc2:	d2c2      	bcs.n	8000d4a <__udivmoddi4+0x222>
 8000dc4:	f1a9 0102 	sub.w	r1, r9, #2
 8000dc8:	443a      	add	r2, r7
 8000dca:	e7be      	b.n	8000d4a <__udivmoddi4+0x222>
 8000dcc:	45f0      	cmp	r8, lr
 8000dce:	d29d      	bcs.n	8000d0c <__udivmoddi4+0x1e4>
 8000dd0:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dd8:	3801      	subs	r0, #1
 8000dda:	46e1      	mov	r9, ip
 8000ddc:	e796      	b.n	8000d0c <__udivmoddi4+0x1e4>
 8000dde:	eba7 0909 	sub.w	r9, r7, r9
 8000de2:	4449      	add	r1, r9
 8000de4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000de8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dec:	fb09 f804 	mul.w	r8, r9, r4
 8000df0:	e7db      	b.n	8000daa <__udivmoddi4+0x282>
 8000df2:	4673      	mov	r3, lr
 8000df4:	e77f      	b.n	8000cf6 <__udivmoddi4+0x1ce>
 8000df6:	4650      	mov	r0, sl
 8000df8:	e766      	b.n	8000cc8 <__udivmoddi4+0x1a0>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e6fd      	b.n	8000bfa <__udivmoddi4+0xd2>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3a02      	subs	r2, #2
 8000e02:	e733      	b.n	8000c6c <__udivmoddi4+0x144>
 8000e04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e08:	443b      	add	r3, r7
 8000e0a:	e71c      	b.n	8000c46 <__udivmoddi4+0x11e>
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	e79c      	b.n	8000d4a <__udivmoddi4+0x222>
 8000e10:	eba1 0109 	sub.w	r1, r1, r9
 8000e14:	46c4      	mov	ip, r8
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	e7c4      	b.n	8000daa <__udivmoddi4+0x282>

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <init_fan>:
 uint32_t *INC;
 uint32_t *IND;


void init_fan(uint32_t* motor_PWM_INA, uint32_t* motor_PWM_INB, uint32_t* motor_PWM_INC, uint32_t* motor_PWM_IND)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	603b      	str	r3, [r7, #0]
	INA = motor_PWM_INA;
 8000e32:	4a11      	ldr	r2, [pc, #68]	@ (8000e78 <init_fan+0x54>)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6013      	str	r3, [r2, #0]
	INB = motor_PWM_INB;
 8000e38:	4a10      	ldr	r2, [pc, #64]	@ (8000e7c <init_fan+0x58>)
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	6013      	str	r3, [r2, #0]
	INC = motor_PWM_INC;
 8000e3e:	4a10      	ldr	r2, [pc, #64]	@ (8000e80 <init_fan+0x5c>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6013      	str	r3, [r2, #0]
	IND = motor_PWM_IND;
 8000e44:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <init_fan+0x60>)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	6013      	str	r3, [r2, #0]
	*INA = 0;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <init_fan+0x54>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
	*INB = 0;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <init_fan+0x58>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
	*INC = 0;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <init_fan+0x5c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
	*IND = 0;
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <init_fan+0x60>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200000a8 	.word	0x200000a8
 8000e7c:	200000ac 	.word	0x200000ac
 8000e80:	200000b0 	.word	0x200000b0
 8000e84:	200000b4 	.word	0x200000b4

08000e88 <set_fan_speed>:

// speed has to be integer from -1000 to 1000
void set_fan_speed(int16_t speed){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
	if (0 <= speed && speed <= 1000){
 8000e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0e      	blt.n	8000eb8 <set_fan_speed+0x30>
 8000e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea2:	dc09      	bgt.n	8000eb8 <set_fan_speed+0x30>
		*INB = 0;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <set_fan_speed+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
		*INA = speed;
 8000eac:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <set_fan_speed+0x68>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000eb4:	601a      	str	r2, [r3, #0]
	}else if (-1000 <= speed && speed < 0){
		*INA = 0;
		*INB = -1*speed;
	}
}
 8000eb6:	e012      	b.n	8000ede <set_fan_speed+0x56>
	}else if (-1000 <= speed && speed < 0){
 8000eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ebc:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000ec0:	db0d      	blt.n	8000ede <set_fan_speed+0x56>
 8000ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da09      	bge.n	8000ede <set_fan_speed+0x56>
		*INA = 0;
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <set_fan_speed+0x68>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
		*INB = -1*speed;
 8000ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed6:	425a      	negs	r2, r3
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <set_fan_speed+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200000ac 	.word	0x200000ac
 8000ef0:	200000a8 	.word	0x200000a8

08000ef4 <set_fan_speed2>:

void set_fan_speed2(int16_t speed2){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
	if (0 <= speed2 && speed2 <= 1000){
 8000efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0e      	blt.n	8000f24 <set_fan_speed2+0x30>
 8000f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f0e:	dc09      	bgt.n	8000f24 <set_fan_speed2+0x30>
		*IND = 0;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <set_fan_speed2+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
		*INC = speed2;
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <set_fan_speed2+0x68>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f20:	601a      	str	r2, [r3, #0]
	}else if (-1000 <= speed2 && speed2 < 0){
		*INC = 0;
		*IND = -1*speed2;
	}
}
 8000f22:	e012      	b.n	8000f4a <set_fan_speed2+0x56>
	}else if (-1000 <= speed2 && speed2 < 0){
 8000f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f28:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000f2c:	db0d      	blt.n	8000f4a <set_fan_speed2+0x56>
 8000f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	da09      	bge.n	8000f4a <set_fan_speed2+0x56>
		*INC = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <set_fan_speed2+0x68>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
		*IND = -1*speed2;
 8000f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f42:	425a      	negs	r2, r3
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <set_fan_speed2+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200000b4 	.word	0x200000b4
 8000f5c:	200000b0 	.word	0x200000b0

08000f60 <MPU6050_Init>:

// set i2c timeout
const uint16_t i2c_timeout = 100;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af04      	add	r7, sp, #16
 8000f66:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, i2c_timeout);
 8000f68:	2364      	movs	r3, #100	@ 0x64
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	f107 030f 	add.w	r3, r7, #15
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	2275      	movs	r2, #117	@ 0x75
 8000f7a:	21d0      	movs	r1, #208	@ 0xd0
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f002 f819 	bl	8002fb4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b68      	cmp	r3, #104	@ 0x68
 8000f86:	d13d      	bne.n	8001004 <MPU6050_Init+0xa4>
    {
        // wake sensor up using power management register
        Data = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, i2c_timeout);
 8000f8c:	2364      	movs	r3, #100	@ 0x64
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f107 030e 	add.w	r3, r7, #14
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	226b      	movs	r2, #107	@ 0x6b
 8000f9e:	21d0      	movs	r1, #208	@ 0xd0
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f001 fef3 	bl	8002d8c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, i2c_timeout);
 8000faa:	2364      	movs	r3, #100	@ 0x64
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	f107 030e 	add.w	r3, r7, #14
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2219      	movs	r2, #25
 8000fbc:	21d0      	movs	r1, #208	@ 0xd0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f001 fee4 	bl	8002d8c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register AFS_SEL=0
        Data = 0x00;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
 8000fc8:	2364      	movs	r3, #100	@ 0x64
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	f107 030e 	add.w	r3, r7, #14
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	221c      	movs	r2, #28
 8000fda:	21d0      	movs	r1, #208	@ 0xd0
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f001 fed5 	bl	8002d8c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register FS_SEL=0
        Data = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, i2c_timeout);
 8000fe6:	2364      	movs	r3, #100	@ 0x64
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	2301      	movs	r3, #1
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	f107 030e 	add.w	r3, r7, #14
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	221b      	movs	r2, #27
 8000ff8:	21d0      	movs	r1, #208	@ 0xd0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 fec6 	bl	8002d8c <HAL_I2C_Mem_Write>
        return 0;
 8001000:	2300      	movs	r3, #0
 8001002:	e000      	b.n	8001006 <MPU6050_Init+0xa6>
    }
    return 1;
 8001004:	2301      	movs	r3, #1
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <MPU6050_Read_MPU>:

void MPU6050_Read_MPU(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b088      	sub	sp, #32
 8001012:	af04      	add	r7, sp, #16
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_R_GYRO_XOUT, 1, Rec_Data, 6, i2c_timeout);
 8001018:	2364      	movs	r3, #100	@ 0x64
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2306      	movs	r3, #6
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	2243      	movs	r2, #67	@ 0x43
 800102a:	21d0      	movs	r1, #208	@ 0xd0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f001 ffc1 	bl	8002fb4 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001032:	7a3b      	ldrb	r3, [r7, #8]
 8001034:	b21b      	sxth	r3, r3
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7a7b      	ldrb	r3, [r7, #9]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001046:	7abb      	ldrb	r3, [r7, #10]
 8001048:	b21b      	sxth	r3, r3
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21a      	sxth	r2, r3
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	805a      	strh	r2, [r3, #2]
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	b21b      	sxth	r3, r3
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21a      	sxth	r2, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	809a      	strh	r2, [r3, #4]

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_R_ACCEL_XOUT, 1, Rec_Data, 6, i2c_timeout);
 800106e:	2364      	movs	r3, #100	@ 0x64
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2306      	movs	r3, #6
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	223b      	movs	r2, #59	@ 0x3b
 8001080:	21d0      	movs	r1, #208	@ 0xd0
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f001 ff96 	bl	8002fb4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001088:	7a3b      	ldrb	r3, [r7, #8]
 800108a:	b21b      	sxth	r3, r3
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	7a7b      	ldrb	r3, [r7, #9]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21a      	sxth	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	839a      	strh	r2, [r3, #28]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800109c:	7abb      	ldrb	r3, [r7, #10]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7afb      	ldrb	r3, [r7, #11]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	83da      	strh	r2, [r3, #30]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80010b0:	7b3b      	ldrb	r3, [r7, #12]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21a      	sxth	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	841a      	strh	r2, [r3, #32]


}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0000      	movs	r0, r0
	...

080010d0 <Calculate_Accel_Values>:

void Calculate_Accel_Values(MPU6050_t *Raw_Values){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    //Scale values
	Raw_Values-> Accel_X = Raw_Values-> Accel_X_RAW*((2*G)/32768); //Values for AFS_SEL = 0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f9a0 	bl	8000424 <__aeabi_i2d>
 80010e4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001158 <Calculate_Accel_Values+0x88>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fa05 	bl	80004f8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fcaf 	bl	8000a58 <__aeabi_d2f>
 80010fa:	4602      	mov	r2, r0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	625a      	str	r2, [r3, #36]	@ 0x24
	Raw_Values-> Accel_Y = Raw_Values-> Accel_Y_RAW*((2*G)/32768);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f98c 	bl	8000424 <__aeabi_i2d>
 800110c:	a312      	add	r3, pc, #72	@ (adr r3, 8001158 <Calculate_Accel_Values+0x88>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff f9f1 	bl	80004f8 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fc9b 	bl	8000a58 <__aeabi_d2f>
 8001122:	4602      	mov	r2, r0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
	Raw_Values-> Accel_Z = Raw_Values-> Accel_Z_RAW*((2*G)/32768);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f978 	bl	8000424 <__aeabi_i2d>
 8001134:	a308      	add	r3, pc, #32	@ (adr r3, 8001158 <Calculate_Accel_Values+0x88>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff f9dd 	bl	80004f8 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fc87 	bl	8000a58 <__aeabi_d2f>
 800114a:	4602      	mov	r2, r0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	62da      	str	r2, [r3, #44]	@ 0x2c
};
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	51eb851f 	.word	0x51eb851f
 800115c:	3f439eb8 	.word	0x3f439eb8

08001160 <Calculate_Gyro_Values>:

void Calculate_Gyro_Values(MPU6050_t *Raw_Values){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    //Scale values 
	Raw_Values-> Gyro_X = Raw_Values-> Gyro_X_RAW/131.0; //Values for FS_SEL = 0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f958 	bl	8000424 <__aeabi_i2d>
 8001174:	a31c      	add	r3, pc, #112	@ (adr r3, 80011e8 <Calculate_Gyro_Values+0x88>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fae7 	bl	800074c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fc67 	bl	8000a58 <__aeabi_d2f>
 800118a:	4602      	mov	r2, r0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
	Raw_Values-> Gyro_Y = Raw_Values-> Gyro_Y_RAW/131.0;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f944 	bl	8000424 <__aeabi_i2d>
 800119c:	a312      	add	r3, pc, #72	@ (adr r3, 80011e8 <Calculate_Gyro_Values+0x88>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff fad3 	bl	800074c <__aeabi_ddiv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fc53 	bl	8000a58 <__aeabi_d2f>
 80011b2:	4602      	mov	r2, r0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60da      	str	r2, [r3, #12]
	Raw_Values-> Gyro_Z = Raw_Values-> Gyro_Z_RAW/131.0;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f930 	bl	8000424 <__aeabi_i2d>
 80011c4:	a308      	add	r3, pc, #32	@ (adr r3, 80011e8 <Calculate_Gyro_Values+0x88>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fabf 	bl	800074c <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fc3f 	bl	8000a58 <__aeabi_d2f>
 80011da:	4602      	mov	r2, r0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
};
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40606000 	.word	0x40606000

080011f0 <Get_Accel_Angles>:


void Get_Accel_Angles(MPU6050_t *Raw_Values){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    
    //     explanation in /Datasheets/MPU-6050-math.pdf
    
    // Calculate Pitch using RPY
	float pitch_tmp =  RAD_TO_DEG * asin(Raw_Values->Accel_X / G);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f923 	bl	8000448 <__aeabi_f2d>
 8001202:	a33f      	add	r3, pc, #252	@ (adr r3, 8001300 <Get_Accel_Angles+0x110>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff faa0 	bl	800074c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	ec43 2b17 	vmov	d7, r2, r3
 8001214:	eeb0 0a47 	vmov.f32	s0, s14
 8001218:	eef0 0a67 	vmov.f32	s1, s15
 800121c:	f006 fd4c 	bl	8007cb8 <asin>
 8001220:	ec51 0b10 	vmov	r0, r1, d0
 8001224:	a332      	add	r3, pc, #200	@ (adr r3, 80012f0 <Get_Accel_Angles+0x100>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f965 	bl	80004f8 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc0f 	bl	8000a58 <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	60fb      	str	r3, [r7, #12]
	Raw_Values->Accel_Pitch = Raw_Values->Accel_Pitch * (1 - ACCEL_LPF_ALPHA) + pitch_tmp * ACCEL_LPF_ALPHA;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001244:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80012f8 <Get_Accel_Angles+0x108>
 8001248:	ee27 7a87 	vmul.f32	s14, s15, s14
 800124c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001250:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80012fc <Get_Accel_Angles+0x10c>
 8001254:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    // Check for potential division by zero
    if (Raw_Values->Accel_Z != 0) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001268:	eef5 7a40 	vcmp.f32	s15, #0.0
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	d033      	beq.n	80012da <Get_Accel_Angles+0xea>
    	float roll_tmp = RAD_TO_DEG * atan(Raw_Values->Accel_Y / Raw_Values->Accel_Z);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800127e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001282:	ee16 0a90 	vmov	r0, s13
 8001286:	f7ff f8df 	bl	8000448 <__aeabi_f2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	ec43 2b10 	vmov	d0, r2, r3
 8001292:	f006 fd45 	bl	8007d20 <atan>
 8001296:	ec51 0b10 	vmov	r0, r1, d0
 800129a:	a315      	add	r3, pc, #84	@ (adr r3, 80012f0 <Get_Accel_Angles+0x100>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7ff f92a 	bl	80004f8 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fbd4 	bl	8000a58 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	60bb      	str	r3, [r7, #8]
    	Raw_Values->Accel_Roll = Raw_Values->Accel_Roll * (1 - ACCEL_LPF_ALPHA) + roll_tmp * ACCEL_LPF_ALPHA;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80012ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80012f8 <Get_Accel_Angles+0x108>
 80012be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80012fc <Get_Accel_Angles+0x10c>
 80012ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    } else {
        // Handle division by zero error (if necessary)
    	Raw_Values->Accel_Roll = 0.0;  // Set a default value or handle it according to your application logic
    }
}
 80012d8:	e003      	b.n	80012e2 <Get_Accel_Angles+0xf2>
    	Raw_Values->Accel_Roll = 0.0;  // Set a default value or handle it according to your application logic
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	b851eb85 	.word	0xb851eb85
 80012f4:	404ca51e 	.word	0x404ca51e
 80012f8:	3f666666 	.word	0x3f666666
 80012fc:	3dcccccd 	.word	0x3dcccccd
 8001300:	51eb851f 	.word	0x51eb851f
 8001304:	40239eb8 	.word	0x40239eb8

08001308 <Get_Gyro_Angles>:



void Get_Gyro_Angles(MPU6050_t *Raw_Values, double Sample_Time){
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	ed87 0b00 	vstr	d0, [r7]

    //     explanation in /Datasheets/MPU-6050-math.pdf


	float pitch_tmp = Raw_Values->Gyro_Pitch + Raw_Values->Gyro_Y*Sample_Time;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f895 	bl	8000448 <__aeabi_f2d>
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f88e 	bl	8000448 <__aeabi_f2d>
 800132c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001330:	f7ff f8e2 	bl	80004f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ff26 	bl	800018c <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fb86 	bl	8000a58 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	617b      	str	r3, [r7, #20]
	Raw_Values->Gyro_Pitch = Raw_Values->Gyro_Pitch * (1 - GYRO_LPF_ALPHA) + pitch_tmp * GYRO_LPF_ALPHA;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	edd3 7a05 	vldr	s15, [r3, #20]
 8001356:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80013dc <Get_Gyro_Angles+0xd4>
 800135a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800135e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001362:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80013e0 <Get_Gyro_Angles+0xd8>
 8001366:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	edc3 7a05 	vstr	s15, [r3, #20]

	float roll_tmp = Raw_Values->Gyro_Roll + Raw_Values->Gyro_X*Sample_Time;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f865 	bl	8000448 <__aeabi_f2d>
 800137e:	4604      	mov	r4, r0
 8001380:	460d      	mov	r5, r1
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f85e 	bl	8000448 <__aeabi_f2d>
 800138c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001390:	f7ff f8b2 	bl	80004f8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7fe fef6 	bl	800018c <__adddf3>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fb56 	bl	8000a58 <__aeabi_d2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	613b      	str	r3, [r7, #16]
	Raw_Values->Gyro_Roll = Raw_Values->Gyro_Roll * (1 - GYRO_LPF_ALPHA) + roll_tmp * GYRO_LPF_ALPHA;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80013b6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80013dc <Get_Gyro_Angles+0xd4>
 80013ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013be:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c2:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80013e0 <Get_Gyro_Angles+0xd8>
 80013c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	edc3 7a06 	vstr	s15, [r3, #24]

};
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bdb0      	pop	{r4, r5, r7, pc}
 80013dc:	3d4cccd0 	.word	0x3d4cccd0
 80013e0:	3f733333 	.word	0x3f733333

080013e4 <Comp_Filter_Results>:

void Comp_Filter_Results(MPU6050_t *Results){
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    
    //     explanation in /Datasheets/MPU-6050-math.pdf

	float pitch_tmp = Results->Gyro_Pitch * COMPLEMENTARY_ALPHA + (1-COMPLEMENTARY_ALPHA) * Results->Accel_Pitch;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80013f2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001458 <Comp_Filter_Results+0x74>
 80013f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001400:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800145c <Comp_Filter_Results+0x78>
 8001404:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	edc7 7a03 	vstr	s15, [r7, #12]
	Results->Accel_Pitch = pitch_tmp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30
	Results->Gyro_Pitch = pitch_tmp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	615a      	str	r2, [r3, #20]

	float roll_tmp = Results->Gyro_Roll * COMPLEMENTARY_ALPHA + (1-COMPLEMENTARY_ALPHA) * Results->Accel_Roll;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001422:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001458 <Comp_Filter_Results+0x74>
 8001426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001430:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800145c <Comp_Filter_Results+0x78>
 8001434:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	edc7 7a02 	vstr	s15, [r7, #8]
	Results->Accel_Roll = roll_tmp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34
	Results->Gyro_Roll = roll_tmp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	619a      	str	r2, [r3, #24]

}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	3dba2e8c 	.word	0x3dba2e8c
 800145c:	3f68ba2e 	.word	0x3f68ba2e

08001460 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001468:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800146c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001478:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800147c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001480:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00b      	beq.n	80014a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001488:	e000      	b.n	800148c <ITM_SendChar+0x2c>
    {
      __NOP();
 800148a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800148c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f9      	beq.n	800148a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001496:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4013      	ands	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <control_rotation>:
static void MX_USB_PCD_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */
float fan_speed_1, fan_speed_2 = 0;

void control_rotation(float desired_rotation, float actual_rotation) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ea:	edc7 0a00 	vstr	s1, [r7]
	if (actual_rotation-desired_rotation > 10.5) {
 80014ee:	ed97 7a00 	vldr	s14, [r7]
 80014f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fa:	eeb2 7a05 	vmov.f32	s14, #37	@ 0x41280000  10.5
 80014fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	dd1c      	ble.n	8001542 <control_rotation+0x62>
		fan_speed_1 = -1000;
 8001508:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <control_rotation+0xfc>)
 800150a:	4a35      	ldr	r2, [pc, #212]	@ (80015e0 <control_rotation+0x100>)
 800150c:	601a      	str	r2, [r3, #0]
		fan_speed_2 = -1000;
 800150e:	4b35      	ldr	r3, [pc, #212]	@ (80015e4 <control_rotation+0x104>)
 8001510:	4a33      	ldr	r2, [pc, #204]	@ (80015e0 <control_rotation+0x100>)
 8001512:	601a      	str	r2, [r3, #0]
		set_fan_speed(fan_speed_1);
 8001514:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <control_rotation+0xfc>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 3a90 	vmov	r3, s15
 8001522:	b21b      	sxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fcaf 	bl	8000e88 <set_fan_speed>
		set_fan_speed2(fan_speed_2);
 800152a:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <control_rotation+0x104>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001534:	ee17 3a90 	vmov	r3, s15
 8001538:	b21b      	sxth	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fcda 	bl	8000ef4 <set_fan_speed2>
		fan_speed_1 = 0;
		fan_speed_2 = 0;
		set_fan_speed(fan_speed_1);
		set_fan_speed2(fan_speed_2);
	}
}
 8001540:	e047      	b.n	80015d2 <control_rotation+0xf2>
	}else if (actual_rotation-desired_rotation < -10.5){
 8001542:	ed97 7a00 	vldr	s14, [r7]
 8001546:	edd7 7a01 	vldr	s15, [r7, #4]
 800154a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154e:	eeba 7a05 	vmov.f32	s14, #165	@ 0xc1280000 -10.5
 8001552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	d51c      	bpl.n	8001596 <control_rotation+0xb6>
		fan_speed_1 = 1000;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <control_rotation+0xfc>)
 800155e:	4a22      	ldr	r2, [pc, #136]	@ (80015e8 <control_rotation+0x108>)
 8001560:	601a      	str	r2, [r3, #0]
		fan_speed_2 = 1000;
 8001562:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <control_rotation+0x104>)
 8001564:	4a20      	ldr	r2, [pc, #128]	@ (80015e8 <control_rotation+0x108>)
 8001566:	601a      	str	r2, [r3, #0]
		set_fan_speed(fan_speed_1);
 8001568:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <control_rotation+0xfc>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001572:	ee17 3a90 	vmov	r3, s15
 8001576:	b21b      	sxth	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fc85 	bl	8000e88 <set_fan_speed>
		set_fan_speed2(fan_speed_2);
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <control_rotation+0x104>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001588:	ee17 3a90 	vmov	r3, s15
 800158c:	b21b      	sxth	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fcb0 	bl	8000ef4 <set_fan_speed2>
}
 8001594:	e01d      	b.n	80015d2 <control_rotation+0xf2>
		fan_speed_1 = 0;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <control_rotation+0xfc>)
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
		fan_speed_2 = 0;
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <control_rotation+0x104>)
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
		set_fan_speed(fan_speed_1);
 80015a6:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <control_rotation+0xfc>)
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b0:	ee17 3a90 	vmov	r3, s15
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fc66 	bl	8000e88 <set_fan_speed>
		set_fan_speed2(fan_speed_2);
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <control_rotation+0x104>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c6:	ee17 3a90 	vmov	r3, s15
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fc91 	bl	8000ef4 <set_fan_speed2>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200004dc 	.word	0x200004dc
 80015e0:	c47a0000 	.word	0xc47a0000
 80015e4:	200004e0 	.word	0x200004e0
 80015e8:	447a0000 	.word	0x447a0000
 80015ec:	00000000 	.word	0x00000000

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	@ 0x38
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f6:	f000 ffd1 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fa:	f000 f8e5 	bl	80017c8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015fe:	f000 f93d 	bl	800187c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001602:	f000 fb33 	bl	8001c6c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001606:	f000 f997 	bl	8001938 <MX_TIM1_Init>
  MX_TIM2_Init();
 800160a:	f000 fa5d 	bl	8001ac8 <MX_TIM2_Init>
  MX_I2C3_Init();
 800160e:	f000 f953 	bl	80018b8 <MX_I2C3_Init>
  MX_USB_PCD_Init();
 8001612:	f000 fb03 	bl	8001c1c <MX_USB_PCD_Init>
  MX_TIM16_Init();
 8001616:	f000 fad9 	bl	8001bcc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_t MPU6050;

  // Initialize MPU6050 (see library sample code)
  while (MPU6050_Init(&hi2c3) == 1){
 800161a:	e002      	b.n	8001622 <main+0x32>
	  printf("Unable to Init MPU6050\n");
 800161c:	4852      	ldr	r0, [pc, #328]	@ (8001768 <main+0x178>)
 800161e:	f005 ffb7 	bl	8007590 <puts>
  while (MPU6050_Init(&hi2c3) == 1){
 8001622:	4852      	ldr	r0, [pc, #328]	@ (800176c <main+0x17c>)
 8001624:	f7ff fc9c 	bl	8000f60 <MPU6050_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b01      	cmp	r3, #1
 800162c:	d0f6      	beq.n	800161c <main+0x2c>
  }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 fe5e 	bl	80022f0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8001634:	2001      	movs	r0, #1
 8001636:	f000 fe5b 	bl	80022f0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800163a:	2002      	movs	r0, #2
 800163c:	f000 fe58 	bl	80022f0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001640:	2101      	movs	r1, #1
 8001642:	2000      	movs	r0, #0
 8001644:	f000 fea8 	bl	8002398 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001648:	2101      	movs	r1, #1
 800164a:	2001      	movs	r0, #1
 800164c:	f000 fea4 	bl	8002398 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8001650:	2101      	movs	r1, #1
 8001652:	2002      	movs	r0, #2
 8001654:	f000 fea0 	bl	8002398 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001658:	4b45      	ldr	r3, [pc, #276]	@ (8001770 <main+0x180>)
 800165a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800165e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001660:	4b43      	ldr	r3, [pc, #268]	@ (8001770 <main+0x180>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001666:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <main+0x180>)
 8001668:	2200      	movs	r2, #0
 800166a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800166c:	4b40      	ldr	r3, [pc, #256]	@ (8001770 <main+0x180>)
 800166e:	2200      	movs	r2, #0
 8001670:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001672:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <main+0x180>)
 8001674:	2200      	movs	r2, #0
 8001676:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001678:	493d      	ldr	r1, [pc, #244]	@ (8001770 <main+0x180>)
 800167a:	2000      	movs	r0, #0
 800167c:	f000 fefc 	bl	8002478 <BSP_COM_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <main+0x9a>
  {
    Error_Handler();
 8001686:	f000 fb4d 	bl	8001d24 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800168a:	2100      	movs	r1, #0
 800168c:	4839      	ldr	r0, [pc, #228]	@ (8001774 <main+0x184>)
 800168e:	f004 f8d1 	bl	8005834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001692:	2104      	movs	r1, #4
 8001694:	4837      	ldr	r0, [pc, #220]	@ (8001774 <main+0x184>)
 8001696:	f004 f8cd 	bl	8005834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800169a:	2100      	movs	r1, #0
 800169c:	4836      	ldr	r0, [pc, #216]	@ (8001778 <main+0x188>)
 800169e:	f004 f8c9 	bl	8005834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016a2:	2104      	movs	r1, #4
 80016a4:	4834      	ldr	r0, [pc, #208]	@ (8001778 <main+0x188>)
 80016a6:	f004 f8c5 	bl	8005834 <HAL_TIM_PWM_Start>
  init_fan(&(TIM1->CCR1), &(TIM1->CCR2), &(TIM2->CCR1), &(TIM2->CCR2));
 80016aa:	4b34      	ldr	r3, [pc, #208]	@ (800177c <main+0x18c>)
 80016ac:	4a34      	ldr	r2, [pc, #208]	@ (8001780 <main+0x190>)
 80016ae:	4935      	ldr	r1, [pc, #212]	@ (8001784 <main+0x194>)
 80016b0:	4835      	ldr	r0, [pc, #212]	@ (8001788 <main+0x198>)
 80016b2:	f7ff fbb7 	bl	8000e24 <init_fan>
  HAL_TIM_Base_Start_IT(&htim16);
 80016b6:	4835      	ldr	r0, [pc, #212]	@ (800178c <main+0x19c>)
 80016b8:	f004 f80c 	bl	80056d4 <HAL_TIM_Base_Start_IT>

  //ch1_counter_val = 0;//(TIM1 -> ARR);
  //ch2_counter_val = 0;
  fan_speed_1 = 1;
 80016bc:	4b34      	ldr	r3, [pc, #208]	@ (8001790 <main+0x1a0>)
 80016be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80016c2:	601a      	str	r2, [r3, #0]
  fan_speed_2 = 1;
 80016c4:	4b33      	ldr	r3, [pc, #204]	@ (8001794 <main+0x1a4>)
 80016c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80016ca:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // MPU6050 reading
	  MPU6050_Read_MPU(&hi2c3, &MPU6050);
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	4826      	ldr	r0, [pc, #152]	@ (800176c <main+0x17c>)
 80016d2:	f7ff fc9c 	bl	800100e <MPU6050_Read_MPU>
	  Calculate_Accel_Values(&MPU6050);
 80016d6:	463b      	mov	r3, r7
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fcf9 	bl	80010d0 <Calculate_Accel_Values>
	  Calculate_Gyro_Values(&MPU6050);
 80016de:	463b      	mov	r3, r7
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fd3d 	bl	8001160 <Calculate_Gyro_Values>
	  Get_Accel_Angles(&MPU6050);
 80016e6:	463b      	mov	r3, r7
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fd81 	bl	80011f0 <Get_Accel_Angles>
	  Get_Gyro_Angles(&MPU6050, 0.01);
 80016ee:	463b      	mov	r3, r7
 80016f0:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8001760 <main+0x170>
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fe07 	bl	8001308 <Get_Gyro_Angles>
	  Comp_Filter_Results(&MPU6050);
 80016fa:	463b      	mov	r3, r7
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fe71 	bl	80013e4 <Comp_Filter_Results>

	  // Writing results
	  GyroX = MPU6050.Gyro_X;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	4a24      	ldr	r2, [pc, #144]	@ (8001798 <main+0x1a8>)
 8001706:	6013      	str	r3, [r2, #0]
	  GyroY = MPU6050.Gyro_Y;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a24      	ldr	r2, [pc, #144]	@ (800179c <main+0x1ac>)
 800170c:	6013      	str	r3, [r2, #0]
	  GyroZ = MPU6050.Gyro_Z;
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <main+0x1b0>)
 8001712:	6013      	str	r3, [r2, #0]

	  AccelX = MPU6050.Accel_X;
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <main+0x1b4>)
 8001718:	6013      	str	r3, [r2, #0]
	  AccelY = MPU6050.Accel_Y;
 800171a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171c:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <main+0x1b8>)
 800171e:	6013      	str	r3, [r2, #0]
	  AccelZ = MPU6050.Accel_Z;
 8001720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001722:	4a22      	ldr	r2, [pc, #136]	@ (80017ac <main+0x1bc>)
 8001724:	6013      	str	r3, [r2, #0]

	  GyroRoll = MPU6050.Gyro_Roll;
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <main+0x1c0>)
 800172a:	6013      	str	r3, [r2, #0]
	  GyroPitch = MPU6050.Gyro_Pitch;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	4a21      	ldr	r2, [pc, #132]	@ (80017b4 <main+0x1c4>)
 8001730:	6013      	str	r3, [r2, #0]
	  AccelRoll = MPU6050.Accel_Roll;
 8001732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001734:	4a20      	ldr	r2, [pc, #128]	@ (80017b8 <main+0x1c8>)
 8001736:	6013      	str	r3, [r2, #0]
	  AccelPitch = MPU6050.Accel_Pitch;
 8001738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800173a:	4a20      	ldr	r2, [pc, #128]	@ (80017bc <main+0x1cc>)
 800173c:	6013      	str	r3, [r2, #0]

	  control_rotation(0, GyroY);
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <main+0x1ac>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	eef0 0a67 	vmov.f32	s1, s15
 8001748:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80017c0 <main+0x1d0>
 800174c:	f7ff fec8 	bl	80014e0 <control_rotation>

	  TIM1->CCR2 = ch2_counter_val;
	  HAL_Delay(5000);
	  ch2_counter_val = 0;
	  TIM1->CCR2 = ch2_counter_val;*/
	  printf("GyroscopeMPU6050Test\n");
 8001750:	481c      	ldr	r0, [pc, #112]	@ (80017c4 <main+0x1d4>)
 8001752:	f005 ff1d 	bl	8007590 <puts>
	  MPU6050_Read_MPU(&hi2c3, &MPU6050);
 8001756:	bf00      	nop
 8001758:	e7b8      	b.n	80016cc <main+0xdc>
 800175a:	bf00      	nop
 800175c:	f3af 8000 	nop.w
 8001760:	47ae147b 	.word	0x47ae147b
 8001764:	3f847ae1 	.word	0x3f847ae1
 8001768:	08008640 	.word	0x08008640
 800176c:	200000c8 	.word	0x200000c8
 8001770:	200000b8 	.word	0x200000b8
 8001774:	2000011c 	.word	0x2000011c
 8001778:	20000168 	.word	0x20000168
 800177c:	40000038 	.word	0x40000038
 8001780:	40000034 	.word	0x40000034
 8001784:	40012c38 	.word	0x40012c38
 8001788:	40012c34 	.word	0x40012c34
 800178c:	200001b4 	.word	0x200001b4
 8001790:	200004dc 	.word	0x200004dc
 8001794:	200004e0 	.word	0x200004e0
 8001798:	200004e4 	.word	0x200004e4
 800179c:	200004e8 	.word	0x200004e8
 80017a0:	200004ec 	.word	0x200004ec
 80017a4:	200004f0 	.word	0x200004f0
 80017a8:	200004f4 	.word	0x200004f4
 80017ac:	200004f8 	.word	0x200004f8
 80017b0:	200004fc 	.word	0x200004fc
 80017b4:	20000500 	.word	0x20000500
 80017b8:	20000504 	.word	0x20000504
 80017bc:	20000508 	.word	0x20000508
 80017c0:	00000000 	.word	0x00000000
 80017c4:	08008658 	.word	0x08008658

080017c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b09a      	sub	sp, #104	@ 0x68
 80017cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ce:	f107 0320 	add.w	r3, r7, #32
 80017d2:	2248      	movs	r2, #72	@ 0x48
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f005 ffba 	bl	8007750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <SystemClock_Config+0xb0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017f6:	4a20      	ldr	r2, [pc, #128]	@ (8001878 <SystemClock_Config+0xb0>)
 80017f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <SystemClock_Config+0xb0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800180a:	2362      	movs	r3, #98	@ 0x62
 800180c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001814:	2301      	movs	r3, #1
 8001816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001818:	2301      	movs	r3, #1
 800181a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800181c:	2340      	movs	r3, #64	@ 0x40
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001820:	2300      	movs	r3, #0
 8001822:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001824:	23a0      	movs	r3, #160	@ 0xa0
 8001826:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001828:	2300      	movs	r3, #0
 800182a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182c:	f107 0320 	add.w	r3, r7, #32
 8001830:	4618      	mov	r0, r3
 8001832:	f002 fcbf 	bl	80041b4 <HAL_RCC_OscConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800183c:	f000 fa72 	bl	8001d24 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001840:	236f      	movs	r3, #111	@ 0x6f
 8001842:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2101      	movs	r1, #1
 8001860:	4618      	mov	r0, r3
 8001862:	f003 f81b 	bl	800489c <HAL_RCC_ClockConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800186c:	f000 fa5a 	bl	8001d24 <Error_Handler>
  }
}
 8001870:	bf00      	nop
 8001872:	3768      	adds	r7, #104	@ 0x68
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	58000400 	.word	0x58000400

0800187c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b094      	sub	sp, #80	@ 0x50
 8001880:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001882:	463b      	mov	r3, r7
 8001884:	2250      	movs	r2, #80	@ 0x50
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f005 ff61 	bl	8007750 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800188e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001892:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001894:	2300      	movs	r3, #0
 8001896:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001898:	2300      	movs	r3, #0
 800189a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fc39 	bl	8005116 <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80018aa:	f000 fa3b 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80018ae:	bf00      	nop
 80018b0:	3750      	adds	r7, #80	@ 0x50
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <MX_I2C3_Init+0x74>)
 80018be:	4a1c      	ldr	r2, [pc, #112]	@ (8001930 <MX_I2C3_Init+0x78>)
 80018c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B07CB4;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <MX_I2C3_Init+0x74>)
 80018c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <MX_I2C3_Init+0x7c>)
 80018c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <MX_I2C3_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ce:	4b17      	ldr	r3, [pc, #92]	@ (800192c <MX_I2C3_Init+0x74>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <MX_I2C3_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80018da:	4b14      	ldr	r3, [pc, #80]	@ (800192c <MX_I2C3_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <MX_I2C3_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <MX_I2C3_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <MX_I2C3_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018f2:	480e      	ldr	r0, [pc, #56]	@ (800192c <MX_I2C3_Init+0x74>)
 80018f4:	f001 f9ae 	bl	8002c54 <HAL_I2C_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018fe:	f000 fa11 	bl	8001d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001902:	2100      	movs	r1, #0
 8001904:	4809      	ldr	r0, [pc, #36]	@ (800192c <MX_I2C3_Init+0x74>)
 8001906:	f001 ff31 	bl	800376c <HAL_I2CEx_ConfigAnalogFilter>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001910:	f000 fa08 	bl	8001d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001914:	2100      	movs	r1, #0
 8001916:	4805      	ldr	r0, [pc, #20]	@ (800192c <MX_I2C3_Init+0x74>)
 8001918:	f001 ff73 	bl	8003802 <HAL_I2CEx_ConfigDigitalFilter>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001922:	f000 f9ff 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200000c8 	.word	0x200000c8
 8001930:	40005c00 	.word	0x40005c00
 8001934:	00b07cb4 	.word	0x00b07cb4

08001938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b09c      	sub	sp, #112	@ 0x70
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001958:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
 8001968:	615a      	str	r2, [r3, #20]
 800196a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2234      	movs	r2, #52	@ 0x34
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f005 feec 	bl	8007750 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001978:	4b51      	ldr	r3, [pc, #324]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 800197a:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <MX_TIM1_Init+0x18c>)
 800197c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800197e:	4b50      	ldr	r3, [pc, #320]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800198a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 800198c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001990:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001992:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001998:	4b49      	ldr	r3, [pc, #292]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800199e:	4b48      	ldr	r3, [pc, #288]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 80019a0:	2280      	movs	r2, #128	@ 0x80
 80019a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019a4:	4846      	ldr	r0, [pc, #280]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 80019a6:	f003 fe3d 	bl	8005624 <HAL_TIM_Base_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019b0:	f000 f9b8 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019be:	4619      	mov	r1, r3
 80019c0:	483f      	ldr	r0, [pc, #252]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 80019c2:	f004 fa2d 	bl	8005e20 <HAL_TIM_ConfigClockSource>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019cc:	f000 f9aa 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019d0:	483b      	ldr	r0, [pc, #236]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 80019d2:	f003 fecd 	bl	8005770 <HAL_TIM_PWM_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019dc:	f000 f9a2 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019f0:	4619      	mov	r1, r3
 80019f2:	4833      	ldr	r0, [pc, #204]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 80019f4:	f004 feb6 	bl	8006764 <HAL_TIMEx_MasterConfigSynchronization>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019fe:	f000 f991 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a02:	2360      	movs	r3, #96	@ 0x60
 8001a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a22:	2200      	movs	r2, #0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4826      	ldr	r0, [pc, #152]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 8001a28:	f004 f8e6 	bl	8005bf8 <HAL_TIM_PWM_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a32:	f000 f977 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4820      	ldr	r0, [pc, #128]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 8001a40:	f004 f8da 	bl	8005bf8 <HAL_TIM_PWM_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a4a:	f000 f96b 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a52:	2208      	movs	r2, #8
 8001a54:	4619      	mov	r1, r3
 8001a56:	481a      	ldr	r0, [pc, #104]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 8001a58:	f004 f8ce 	bl	8005bf8 <HAL_TIM_PWM_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001a62:	f000 f95f 	bl	8001d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4807      	ldr	r0, [pc, #28]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 8001aa4:	f004 febe 	bl	8006824 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001aae:	f000 f939 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ab2:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <MX_TIM1_Init+0x188>)
 8001ab4:	f000 fa0c 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 8001ab8:	bf00      	nop
 8001aba:	3770      	adds	r7, #112	@ 0x70
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	2000011c 	.word	0x2000011c
 8001ac4:	40012c00 	.word	0x40012c00

08001ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08e      	sub	sp, #56	@ 0x38
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	611a      	str	r2, [r3, #16]
 8001af6:	615a      	str	r2, [r3, #20]
 8001af8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afa:	4b33      	ldr	r3, [pc, #204]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001afc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b02:	4b31      	ldr	r3, [pc, #196]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001b10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b16:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b22:	4829      	ldr	r0, [pc, #164]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001b24:	f003 fd7e 	bl	8005624 <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b2e:	f000 f8f9 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4822      	ldr	r0, [pc, #136]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001b40:	f004 f96e 	bl	8005e20 <HAL_TIM_ConfigClockSource>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b4a:	f000 f8eb 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b4e:	481e      	ldr	r0, [pc, #120]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001b50:	f003 fe0e 	bl	8005770 <HAL_TIM_PWM_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b5a:	f000 f8e3 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4816      	ldr	r0, [pc, #88]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001b6e:	f004 fdf9 	bl	8006764 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b78:	f000 f8d4 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b7c:	2360      	movs	r3, #96	@ 0x60
 8001b7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	480d      	ldr	r0, [pc, #52]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001b94:	f004 f830 	bl	8005bf8 <HAL_TIM_PWM_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b9e:	f000 f8c1 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4807      	ldr	r0, [pc, #28]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001baa:	f004 f825 	bl	8005bf8 <HAL_TIM_PWM_ConfigChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001bb4:	f000 f8b6 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bb8:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <MX_TIM2_Init+0x100>)
 8001bba:	f000 f989 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 8001bbe:	bf00      	nop
 8001bc0:	3738      	adds	r7, #56	@ 0x38
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000168 	.word	0x20000168

08001bcc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <MX_TIM16_Init+0x48>)
 8001bd2:	4a11      	ldr	r2, [pc, #68]	@ (8001c18 <MX_TIM16_Init+0x4c>)
 8001bd4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6339;
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <MX_TIM16_Init+0x48>)
 8001bd8:	f641 02c3 	movw	r2, #6339	@ 0x18c3
 8001bdc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <MX_TIM16_Init+0x48>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <MX_TIM16_Init+0x48>)
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <MX_TIM16_Init+0x48>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <MX_TIM16_Init+0x48>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <MX_TIM16_Init+0x48>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <MX_TIM16_Init+0x48>)
 8001c00:	f003 fd10 	bl	8005624 <HAL_TIM_Base_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001c0a:	f000 f88b 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200001b4 	.word	0x200001b4
 8001c18:	40014400 	.word	0x40014400

08001c1c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001c20:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <MX_USB_PCD_Init+0x48>)
 8001c22:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <MX_USB_PCD_Init+0x4c>)
 8001c24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001c26:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <MX_USB_PCD_Init+0x48>)
 8001c28:	2208      	movs	r2, #8
 8001c2a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <MX_USB_PCD_Init+0x48>)
 8001c2e:	2202      	movs	r2, #2
 8001c30:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c32:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <MX_USB_PCD_Init+0x48>)
 8001c34:	2202      	movs	r2, #2
 8001c36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001c38:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <MX_USB_PCD_Init+0x48>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <MX_USB_PCD_Init+0x48>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001c44:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <MX_USB_PCD_Init+0x48>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <MX_USB_PCD_Init+0x48>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	@ (8001c64 <MX_USB_PCD_Init+0x48>)
 8001c52:	f001 fe22 	bl	800389a <HAL_PCD_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001c5c:	f000 f862 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000200 	.word	0x20000200
 8001c68:	40006800 	.word	0x40006800

08001c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c70:	2004      	movs	r0, #4
 8001c72:	f7ff fc1c 	bl	80014ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff fc19 	bl	80014ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f7ff fc16 	bl	80014ae <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e009      	b.n	8001cac <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	60ba      	str	r2, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fbdd 	bl	8001460 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbf1      	blt.n	8001c98 <_write+0x12>
  }
  return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	Led_TypeDef leds[] = {LED_BLUE, LED_GREEN, LED_RED};
 8001cc8:	4a13      	ldr	r2, [pc, #76]	@ (8001d18 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	8019      	strh	r1, [r3, #0]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	0c12      	lsrs	r2, r2, #16
 8001cd8:	701a      	strb	r2, [r3, #0]
	static uint8_t i = 0;
	if (htim == &htim16)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a0f      	ldr	r2, [pc, #60]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d115      	bne.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		BSP_LED_Toggle(leds[i]);
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3310      	adds	r3, #16
 8001ce8:	443b      	add	r3, r7
 8001cea:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fb38 	bl	8002364 <BSP_LED_Toggle>
		i++;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001cfe:	701a      	strb	r2, [r3, #0]
		if (i>2){
 8001d00:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d902      	bls.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0x4e>
			i=0;
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	08008670 	.word	0x08008670
 8001d1c:	200001b4 	.word	0x200001b4
 8001d20:	2000050c 	.word	0x2000050c

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <Error_Handler+0x8>

08001d30 <LL_AHB2_GRP1_EnableClock>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d54:	68fb      	ldr	r3, [r7, #12]
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b085      	sub	sp, #20
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d7e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4013      	ands	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001da2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db8:	68fb      	ldr	r3, [r7, #12]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b09c      	sub	sp, #112	@ 0x70
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	2250      	movs	r2, #80	@ 0x50
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f005 fcab 	bl	8007750 <memset>
  if(hi2c->Instance==I2C3)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a16      	ldr	r2, [pc, #88]	@ (8001e58 <HAL_I2C_MspInit+0x84>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d125      	bne.n	8001e50 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e04:	2308      	movs	r3, #8
 8001e06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001e08:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001e0c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 f97f 	bl	8005116 <HAL_RCCEx_PeriphCLKConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e1e:	f7ff ff81 	bl	8001d24 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e22:	2004      	movs	r0, #4
 8001e24:	f7ff ff84 	bl	8001d30 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2c:	2312      	movs	r3, #18
 8001e2e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e40:	4619      	mov	r1, r3
 8001e42:	4806      	ldr	r0, [pc, #24]	@ (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e44:	f000 fd64 	bl	8002910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e48:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001e4c:	f7ff ff89 	bl	8001d62 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001e50:	bf00      	nop
 8001e52:	3770      	adds	r7, #112	@ 0x70
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40005c00 	.word	0x40005c00
 8001e5c:	48000800 	.word	0x48000800

08001e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <HAL_TIM_Base_MspInit+0x68>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10c      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e72:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e76:	f7ff ff8d 	bl	8001d94 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2019      	movs	r0, #25
 8001e80:	f000 fd11 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e84:	2019      	movs	r0, #25
 8001e86:	f000 fd28 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e8a:	e019      	b.n	8001ec0 <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e94:	d103      	bne.n	8001e9e <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff63 	bl	8001d62 <LL_APB1_GRP1_EnableClock>
}
 8001e9c:	e010      	b.n	8001ec0 <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM16)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <HAL_TIM_Base_MspInit+0x6c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ea8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001eac:	f7ff ff72 	bl	8001d94 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2019      	movs	r0, #25
 8001eb6:	f000 fcf6 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001eba:	2019      	movs	r0, #25
 8001ebc:	f000 fd0d 	bl	80028da <HAL_NVIC_EnableIRQ>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40014400 	.word	0x40014400

08001ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1a      	ldr	r2, [pc, #104]	@ (8001f58 <HAL_TIM_MspPostInit+0x88>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d115      	bne.n	8001f1e <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff ff1c 	bl	8001d30 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Pin|GPIO_PIN_9;
 8001ef8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001efc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 030c 	add.w	r3, r7, #12
 8001f12:	4619      	mov	r1, r3
 8001f14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f18:	f000 fcfa 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f1c:	e018      	b.n	8001f50 <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f26:	d113      	bne.n	8001f50 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff ff01 	bl	8001d30 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4c:	f000 fce0 	bl	8002910 <HAL_GPIO_Init>
}
 8001f50:	bf00      	nop
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40012c00 	.word	0x40012c00

08001f5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b09c      	sub	sp, #112	@ 0x70
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f74:	f107 030c 	add.w	r3, r7, #12
 8001f78:	2250      	movs	r2, #80	@ 0x50
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f005 fbe7 	bl	8007750 <memset>
  if(hpcd->Instance==USB)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <HAL_PCD_MspInit+0x88>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d127      	bne.n	8001fdc <HAL_PCD_MspInit+0x80>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f90:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f92:	2300      	movs	r3, #0
 8001f94:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 f8bb 	bl	8005116 <HAL_RCCEx_PeriphCLKConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001fa6:	f7ff febd 	bl	8001d24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7ff fec0 	bl	8001d30 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|USB_DP_Pin;
 8001fb0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd0:	f000 fc9e 	bl	8002910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001fd4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001fd8:	f7ff fec3 	bl	8001d62 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8001fdc:	bf00      	nop
 8001fde:	3770      	adds	r7, #112	@ 0x70
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40006800 	.word	0x40006800

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <NMI_Handler+0x4>

08001ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <HardFault_Handler+0x4>

08001ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <MemManage_Handler+0x4>

08002000 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <UsageFault_Handler+0x4>

08002010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203e:	f000 fb07 	bl	8002650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800204c:	4803      	ldr	r0, [pc, #12]	@ (800205c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800204e:	f003 fccb 	bl	80059e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002052:	4803      	ldr	r0, [pc, #12]	@ (8002060 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002054:	f003 fcc8 	bl	80059e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000011c 	.word	0x2000011c
 8002060:	200001b4 	.word	0x200001b4

08002064 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e00a      	b.n	800208c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002076:	f3af 8000 	nop.w
 800207a:	4601      	mov	r1, r0
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	60ba      	str	r2, [r7, #8]
 8002082:	b2ca      	uxtb	r2, r1
 8002084:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf0      	blt.n	8002076 <_read+0x12>
  }

  return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:
  }
  return len;
}

int _close(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c6:	605a      	str	r2, [r3, #4]
  return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f005 fb58 	bl	80077ec <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20030000 	.word	0x20030000
 8002168:	00000400 	.word	0x00000400
 800216c:	20000510 	.word	0x20000510
 8002170:	200006f8 	.word	0x200006f8

08002174 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002178:	4b24      	ldr	r3, [pc, #144]	@ (800220c <SystemInit+0x98>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	4a23      	ldr	r2, [pc, #140]	@ (800220c <SystemInit+0x98>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800219c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80021a0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <SystemInit+0x9c>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021be:	f023 0305 	bic.w	r3, r3, #5
 80021c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80021c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021de:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <SystemInit+0xa0>)
 80021e0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80021e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002214 <SystemInit+0xa0>)
 80021e8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021fe:	2200      	movs	r2, #0
 8002200:	619a      	str	r2, [r3, #24]
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00
 8002210:	faf6fefb 	.word	0xfaf6fefb
 8002214:	22041000 	.word	0x22041000

08002218 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002218:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221c:	3304      	adds	r3, #4

0800221e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800221e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002220:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002222:	d3f9      	bcc.n	8002218 <CopyDataInit>
  bx lr
 8002224:	4770      	bx	lr

08002226 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002226:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002228:	3004      	adds	r0, #4

0800222a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800222a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800222c:	d3fb      	bcc.n	8002226 <FillZerobss>
  bx lr
 800222e:	4770      	bx	lr

08002230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002230:	480c      	ldr	r0, [pc, #48]	@ (8002264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002232:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002234:	f7ff ff9e 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002238:	480b      	ldr	r0, [pc, #44]	@ (8002268 <LoopForever+0x6>)
 800223a:	490c      	ldr	r1, [pc, #48]	@ (800226c <LoopForever+0xa>)
 800223c:	4a0c      	ldr	r2, [pc, #48]	@ (8002270 <LoopForever+0xe>)
 800223e:	2300      	movs	r3, #0
 8002240:	f7ff ffed 	bl	800221e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002244:	480b      	ldr	r0, [pc, #44]	@ (8002274 <LoopForever+0x12>)
 8002246:	490c      	ldr	r1, [pc, #48]	@ (8002278 <LoopForever+0x16>)
 8002248:	4a0c      	ldr	r2, [pc, #48]	@ (800227c <LoopForever+0x1a>)
 800224a:	2300      	movs	r3, #0
 800224c:	f7ff ffe7 	bl	800221e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002250:	480b      	ldr	r0, [pc, #44]	@ (8002280 <LoopForever+0x1e>)
 8002252:	490c      	ldr	r1, [pc, #48]	@ (8002284 <LoopForever+0x22>)
 8002254:	2300      	movs	r3, #0
 8002256:	f7ff ffe8 	bl	800222a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800225a:	f005 facd 	bl	80077f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800225e:	f7ff f9c7 	bl	80015f0 <main>

08002262 <LoopForever>:

LoopForever:
  b LoopForever
 8002262:	e7fe      	b.n	8002262 <LoopForever>
  ldr   r0, =_estack
 8002264:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002268:	20000008 	.word	0x20000008
 800226c:	2000008c 	.word	0x2000008c
 8002270:	080087d0 	.word	0x080087d0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002274:	20030000 	.word	0x20030000
 8002278:	20030000 	.word	0x20030000
 800227c:	08008854 	.word	0x08008854
  INIT_BSS _sbss, _ebss
 8002280:	2000008c 	.word	0x2000008c
 8002284:	200006f8 	.word	0x200006f8

08002288 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC1_IRQHandler>

0800228a <LL_AHB2_GRP1_EnableClock>:
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002296:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002298:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4313      	orrs	r3, r2
 80022a0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_APB2_GRP1_EnableClock>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022e0:	68fb      	ldr	r3, [r7, #12]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800230a:	2002      	movs	r0, #2
 800230c:	f7ff ffbd 	bl	800228a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	4a12      	ldr	r2, [pc, #72]	@ (800235c <BSP_LED_Init+0x6c>)
 8002314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002318:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231a:	2301      	movs	r3, #1
 800231c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <BSP_LED_Init+0x70>)
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	f107 020c 	add.w	r2, r7, #12
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f000 faeb 	bl	8002910 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <BSP_LED_Init+0x70>)
 800233e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	4a05      	ldr	r2, [pc, #20]	@ (800235c <BSP_LED_Init+0x6c>)
 8002346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800234a:	2200      	movs	r2, #0
 800234c:	4619      	mov	r1, r3
 800234e:	f000 fc4f 	bl	8002bf0 <HAL_GPIO_WritePin>
}
 8002352:	bf00      	nop
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	08008740 	.word	0x08008740
 8002360:	2000000c 	.word	0x2000000c

08002364 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	4a07      	ldr	r2, [pc, #28]	@ (8002390 <BSP_LED_Toggle+0x2c>)
 8002372:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	4906      	ldr	r1, [pc, #24]	@ (8002394 <BSP_LED_Toggle+0x30>)
 800237a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800237e:	4619      	mov	r1, r3
 8002380:	4610      	mov	r0, r2
 8002382:	f000 fc4d 	bl	8002c20 <HAL_GPIO_TogglePin>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2000000c 	.word	0x2000000c
 8002394:	08008740 	.word	0x08008740

08002398 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	460a      	mov	r2, r1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <BSP_PB_Init+0x2e>
 80023be:	2004      	movs	r0, #4
 80023c0:	f7ff ff63 	bl	800228a <LL_AHB2_GRP1_EnableClock>
 80023c4:	e00c      	b.n	80023e0 <BSP_PB_Init+0x48>
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d103      	bne.n	80023d4 <BSP_PB_Init+0x3c>
 80023cc:	2008      	movs	r0, #8
 80023ce:	f7ff ff5c 	bl	800228a <LL_AHB2_GRP1_EnableClock>
 80023d2:	e005      	b.n	80023e0 <BSP_PB_Init+0x48>
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d102      	bne.n	80023e0 <BSP_PB_Init+0x48>
 80023da:	2008      	movs	r0, #8
 80023dc:	f7ff ff55 	bl	800228a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80023e0:	79bb      	ldrb	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d117      	bne.n	8002416 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	4a20      	ldr	r2, [pc, #128]	@ (800246c <BSP_PB_Init+0xd4>)
 80023ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023ee:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80023f4:	2301      	movs	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f8:	2302      	movs	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <BSP_PB_Init+0xd8>)
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	f107 020c 	add.w	r2, r7, #12
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fa80 	bl	8002910 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8002410:	2001      	movs	r0, #1
 8002412:	f000 f949 	bl	80026a8 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002416:	79bb      	ldrb	r3, [r7, #6]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d123      	bne.n	8002464 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	4a13      	ldr	r2, [pc, #76]	@ (800246c <BSP_PB_Init+0xd4>)
 8002420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002424:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002426:	2301      	movs	r3, #1
 8002428:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800242a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800242e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	4a0f      	ldr	r2, [pc, #60]	@ (8002470 <BSP_PB_Init+0xd8>)
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	f107 020c 	add.w	r2, r7, #12
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fa66 	bl	8002910 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	4a0b      	ldr	r2, [pc, #44]	@ (8002474 <BSP_PB_Init+0xdc>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
 800244a:	b25b      	sxtb	r3, r3
 800244c:	2200      	movs	r2, #0
 800244e:	210f      	movs	r1, #15
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa28 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	4a06      	ldr	r2, [pc, #24]	@ (8002474 <BSP_PB_Init+0xdc>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	b25b      	sxtb	r3, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fa3b 	bl	80028da <HAL_NVIC_EnableIRQ>
  }
}
 8002464:	bf00      	nop
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	08008748 	.word	0x08008748
 8002470:	20000018 	.word	0x20000018
 8002474:	08008750 	.word	0x08008750

08002478 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d903      	bls.n	8002496 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800248e:	f06f 0301 	mvn.w	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e018      	b.n	80024c8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2294      	movs	r2, #148	@ 0x94
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	4a0d      	ldr	r2, [pc, #52]	@ (80024d4 <BSP_COM_Init+0x5c>)
 80024a0:	4413      	add	r3, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f84a 	bl	800253c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	2294      	movs	r2, #148	@ 0x94
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	4a08      	ldr	r2, [pc, #32]	@ (80024d4 <BSP_COM_Init+0x5c>)
 80024b2:	4413      	add	r3, r2
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f80e 	bl	80024d8 <MX_LPUART1_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80024c2:	f06f 0303 	mvn.w	r3, #3
 80024c6:	e000      	b.n	80024ca <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80024c8:	68fb      	ldr	r3, [r7, #12]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000514 	.word	0x20000514

080024d8 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80024e2:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <MX_LPUART1_Init+0x60>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	220c      	movs	r2, #12
 80024f6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	895b      	ldrh	r3, [r3, #10]
 80024fc:	461a      	mov	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	891b      	ldrh	r3, [r3, #8]
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	899b      	ldrh	r3, [r3, #12]
 8002518:	461a      	mov	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002524:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f004 fa40 	bl	80069ac <HAL_UART_Init>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000024 	.word	0x20000024

0800253c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002544:	2002      	movs	r0, #2
 8002546:	f7ff fea0 	bl	800228a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 800254a:	2002      	movs	r0, #2
 800254c:	f7ff fe9d 	bl	800228a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002550:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002554:	f7ff feb2 	bl	80022bc <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002558:	2340      	movs	r3, #64	@ 0x40
 800255a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002560:	2302      	movs	r3, #2
 8002562:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002564:	2301      	movs	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002568:	2307      	movs	r3, #7
 800256a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	4619      	mov	r1, r3
 8002572:	4809      	ldr	r0, [pc, #36]	@ (8002598 <COM1_MspInit+0x5c>)
 8002574:	f000 f9cc 	bl	8002910 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002580:	2307      	movs	r3, #7
 8002582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	4619      	mov	r1, r3
 800258a:	4803      	ldr	r0, [pc, #12]	@ (8002598 <COM1_MspInit+0x5c>)
 800258c:	f000 f9c0 	bl	8002910 <HAL_GPIO_Init>
}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	48000400 	.word	0x48000400

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a6:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <HAL_Init+0x3c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a0b      	ldr	r2, [pc, #44]	@ (80025d8 <HAL_Init+0x3c>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b2:	2003      	movs	r0, #3
 80025b4:	f000 f96c 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025b8:	2000      	movs	r0, #0
 80025ba:	f000 f80f 	bl	80025dc <HAL_InitTick>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	e001      	b.n	80025ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025ca:	f7ff fbfc 	bl	8001dc6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025ce:	79fb      	ldrb	r3, [r7, #7]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	58004000 	.word	0x58004000

080025dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80025e8:	4b17      	ldr	r3, [pc, #92]	@ (8002648 <HAL_InitTick+0x6c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d024      	beq.n	800263a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025f0:	f002 fb00 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <HAL_InitTick+0x6c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	4619      	mov	r1, r3
 80025fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002600:	fbb3 f3f1 	udiv	r3, r3, r1
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f974 	bl	80028f6 <HAL_SYSTICK_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b0f      	cmp	r3, #15
 8002618:	d809      	bhi.n	800262e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800261a:	2200      	movs	r2, #0
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	f04f 30ff 	mov.w	r0, #4294967295
 8002622:	f000 f940 	bl	80028a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002626:	4a09      	ldr	r2, [pc, #36]	@ (800264c <HAL_InitTick+0x70>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e007      	b.n	800263e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	e004      	b.n	800263e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e001      	b.n	800263e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	2000002c 	.word	0x2000002c
 800264c:	20000028 	.word	0x20000028

08002650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_IncTick+0x20>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_IncTick+0x24>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4413      	add	r3, r2
 8002660:	4a04      	ldr	r2, [pc, #16]	@ (8002674 <HAL_IncTick+0x24>)
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	2000002c 	.word	0x2000002c
 8002674:	200005a8 	.word	0x200005a8

08002678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return uwTick;
 800267c:	4b03      	ldr	r3, [pc, #12]	@ (800268c <HAL_GetTick+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200005a8 	.word	0x200005a8

08002690 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002694:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <HAL_GetTickPrio+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000028 	.word	0x20000028

080026a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff ffe2 	bl	8002678 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d005      	beq.n	80026ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_Delay+0x44>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ce:	bf00      	nop
 80026d0:	f7ff ffd2 	bl	8002678 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d8f7      	bhi.n	80026d0 <HAL_Delay+0x28>
  {
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000002c 	.word	0x2000002c

080026f0 <__NVIC_SetPriorityGrouping>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	@ (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	@ (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	@ (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	@ 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	@ 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <SysTick_Config>:
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	210f      	movs	r1, #15
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f7ff ff8e 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff29 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff40 	bl	8002738 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff90 	bl	80027e4 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5f 	bl	8002790 <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff33 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa4 	bl	800284c <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800291e:	e14c      	b.n	8002bba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 813e 	beq.w	8002bb4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d005      	beq.n	8002950 <HAL_GPIO_Init+0x40>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d130      	bne.n	80029b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002986:	2201      	movs	r2, #1
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 0201 	and.w	r2, r3, #1
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d017      	beq.n	80029ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2203      	movs	r2, #3
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d123      	bne.n	8002a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	08da      	lsrs	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3208      	adds	r2, #8
 8002a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	6939      	ldr	r1, [r7, #16]
 8002a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0203 	and.w	r2, r3, #3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8098 	beq.w	8002bb4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a84:	4a54      	ldr	r2, [pc, #336]	@ (8002bd8 <HAL_GPIO_Init+0x2c8>)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002aae:	d019      	beq.n	8002ae4 <HAL_GPIO_Init+0x1d4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8002bdc <HAL_GPIO_Init+0x2cc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_GPIO_Init+0x1d0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a49      	ldr	r2, [pc, #292]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00d      	beq.n	8002adc <HAL_GPIO_Init+0x1cc>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a48      	ldr	r2, [pc, #288]	@ (8002be4 <HAL_GPIO_Init+0x2d4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d007      	beq.n	8002ad8 <HAL_GPIO_Init+0x1c8>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a47      	ldr	r2, [pc, #284]	@ (8002be8 <HAL_GPIO_Init+0x2d8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <HAL_GPIO_Init+0x1c4>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	e008      	b.n	8002ae6 <HAL_GPIO_Init+0x1d6>
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	e006      	b.n	8002ae6 <HAL_GPIO_Init+0x1d6>
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e004      	b.n	8002ae6 <HAL_GPIO_Init+0x1d6>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e002      	b.n	8002ae6 <HAL_GPIO_Init+0x1d6>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_GPIO_Init+0x1d6>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	f002 0203 	and.w	r2, r2, #3
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	4093      	lsls	r3, r2
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002af6:	4938      	ldr	r1, [pc, #224]	@ (8002bd8 <HAL_GPIO_Init+0x2c8>)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	3302      	adds	r3, #2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b04:	4b39      	ldr	r3, [pc, #228]	@ (8002bec <HAL_GPIO_Init+0x2dc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b28:	4a30      	ldr	r2, [pc, #192]	@ (8002bec <HAL_GPIO_Init+0x2dc>)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002bec <HAL_GPIO_Init+0x2dc>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b52:	4a26      	ldr	r2, [pc, #152]	@ (8002bec <HAL_GPIO_Init+0x2dc>)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b58:	4b24      	ldr	r3, [pc, #144]	@ (8002bec <HAL_GPIO_Init+0x2dc>)
 8002b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bec <HAL_GPIO_Init+0x2dc>)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002b86:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <HAL_GPIO_Init+0x2dc>)
 8002b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bac:	4a0f      	ldr	r2, [pc, #60]	@ (8002bec <HAL_GPIO_Init+0x2dc>)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f47f aeab 	bne.w	8002920 <HAL_GPIO_Init+0x10>
  }
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	48000400 	.word	0x48000400
 8002be0:	48000800 	.word	0x48000800
 8002be4:	48000c00 	.word	0x48000c00
 8002be8:	48001000 	.word	0x48001000
 8002bec:	58000800 	.word	0x58000800

08002bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	807b      	strh	r3, [r7, #2]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c00:	787b      	ldrb	r3, [r7, #1]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4013      	ands	r3, r2
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	43d9      	mvns	r1, r3
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	400b      	ands	r3, r1
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	619a      	str	r2, [r3, #24]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e08d      	b.n	8002d82 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff f8aa 	bl	8001dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	@ 0x24
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	e006      	b.n	8002cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d108      	bne.n	8002cf6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	e007      	b.n	8002d06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69d9      	ldr	r1, [r3, #28]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1a      	ldr	r2, [r3, #32]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	813b      	strh	r3, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	f040 80f9 	bne.w	8002fa6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x34>
 8002dba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0ed      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_I2C_Mem_Write+0x4e>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e0e6      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002de2:	f7ff fc49 	bl	8002678 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2319      	movs	r3, #25
 8002dee:	2201      	movs	r2, #1
 8002df0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fac3 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0d1      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2221      	movs	r2, #33	@ 0x21
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2240      	movs	r2, #64	@ 0x40
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e2c:	88f8      	ldrh	r0, [r7, #6]
 8002e2e:	893a      	ldrh	r2, [r7, #8]
 8002e30:	8979      	ldrh	r1, [r7, #10]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f9d3 	bl	80031e8 <I2C_RequestMemoryWrite>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0a9      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2bff      	cmp	r3, #255	@ 0xff
 8002e5c:	d90e      	bls.n	8002e7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	22ff      	movs	r2, #255	@ 0xff
 8002e62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	8979      	ldrh	r1, [r7, #10]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fc47 	bl	8003708 <I2C_TransferConfig>
 8002e7a:	e00f      	b.n	8002e9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fc36 	bl	8003708 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fac6 	bl	8003432 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e07b      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d034      	beq.n	8002f54 <HAL_I2C_Mem_Write+0x1c8>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d130      	bne.n	8002f54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2180      	movs	r1, #128	@ 0x80
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fa3f 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e04d      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2bff      	cmp	r3, #255	@ 0xff
 8002f14:	d90e      	bls.n	8002f34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	22ff      	movs	r2, #255	@ 0xff
 8002f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	8979      	ldrh	r1, [r7, #10]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fbeb 	bl	8003708 <I2C_TransferConfig>
 8002f32:	e00f      	b.n	8002f54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fbda 	bl	8003708 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d19e      	bne.n	8002e9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 faac 	bl	80034c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e01a      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2220      	movs	r2, #32
 8002f78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <HAL_I2C_Mem_Write+0x224>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	fe00e800 	.word	0xfe00e800

08002fb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	817b      	strh	r3, [r7, #10]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	813b      	strh	r3, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	f040 80fd 	bne.w	80031d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_I2C_Mem_Read+0x34>
 8002fe2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0f1      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Mem_Read+0x4e>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e0ea      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800300a:	f7ff fb35 	bl	8002678 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2319      	movs	r3, #25
 8003016:	2201      	movs	r2, #1
 8003018:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f9af 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0d5      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2222      	movs	r2, #34	@ 0x22
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2240      	movs	r2, #64	@ 0x40
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800304c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003054:	88f8      	ldrh	r0, [r7, #6]
 8003056:	893a      	ldrh	r2, [r7, #8]
 8003058:	8979      	ldrh	r1, [r7, #10]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4603      	mov	r3, r0
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f913 	bl	8003290 <I2C_RequestMemoryRead>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0ad      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2bff      	cmp	r3, #255	@ 0xff
 8003084:	d90e      	bls.n	80030a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	22ff      	movs	r2, #255	@ 0xff
 800308a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003090:	b2da      	uxtb	r2, r3
 8003092:	8979      	ldrh	r1, [r7, #10]
 8003094:	4b52      	ldr	r3, [pc, #328]	@ (80031e0 <HAL_I2C_Mem_Read+0x22c>)
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fb33 	bl	8003708 <I2C_TransferConfig>
 80030a2:	e00f      	b.n	80030c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	4b4a      	ldr	r3, [pc, #296]	@ (80031e0 <HAL_I2C_Mem_Read+0x22c>)
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fb22 	bl	8003708 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ca:	2200      	movs	r2, #0
 80030cc:	2104      	movs	r1, #4
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f956 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e07c      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d034      	beq.n	8003184 <HAL_I2C_Mem_Read+0x1d0>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	2b00      	cmp	r3, #0
 8003120:	d130      	bne.n	8003184 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003128:	2200      	movs	r2, #0
 800312a:	2180      	movs	r1, #128	@ 0x80
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f927 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e04d      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	2bff      	cmp	r3, #255	@ 0xff
 8003144:	d90e      	bls.n	8003164 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	22ff      	movs	r2, #255	@ 0xff
 800314a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003150:	b2da      	uxtb	r2, r3
 8003152:	8979      	ldrh	r1, [r7, #10]
 8003154:	2300      	movs	r3, #0
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fad3 	bl	8003708 <I2C_TransferConfig>
 8003162:	e00f      	b.n	8003184 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	b2da      	uxtb	r2, r3
 8003174:	8979      	ldrh	r1, [r7, #10]
 8003176:	2300      	movs	r3, #0
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fac2 	bl	8003708 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d19a      	bne.n	80030c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f994 	bl	80034c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e01a      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2220      	movs	r2, #32
 80031a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <HAL_I2C_Mem_Read+0x230>)
 80031b6:	400b      	ands	r3, r1
 80031b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e000      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
  }
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	80002400 	.word	0x80002400
 80031e4:	fe00e800 	.word	0xfe00e800

080031e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	8979      	ldrh	r1, [r7, #10]
 8003208:	4b20      	ldr	r3, [pc, #128]	@ (800328c <I2C_RequestMemoryWrite+0xa4>)
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fa79 	bl	8003708 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	69b9      	ldr	r1, [r7, #24]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f909 	bl	8003432 <I2C_WaitOnTXISFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e02c      	b.n	8003284 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003230:	893b      	ldrh	r3, [r7, #8]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	629a      	str	r2, [r3, #40]	@ 0x28
 800323a:	e015      	b.n	8003268 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800323c:	893b      	ldrh	r3, [r7, #8]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	b29b      	uxth	r3, r3
 8003242:	b2da      	uxtb	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	69b9      	ldr	r1, [r7, #24]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f8ef 	bl	8003432 <I2C_WaitOnTXISFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e012      	b.n	8003284 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800325e:	893b      	ldrh	r3, [r7, #8]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2200      	movs	r2, #0
 8003270:	2180      	movs	r1, #128	@ 0x80
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f884 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	80002000 	.word	0x80002000

08003290 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	4608      	mov	r0, r1
 800329a:	4611      	mov	r1, r2
 800329c:	461a      	mov	r2, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	817b      	strh	r3, [r7, #10]
 80032a2:	460b      	mov	r3, r1
 80032a4:	813b      	strh	r3, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	8979      	ldrh	r1, [r7, #10]
 80032b0:	4b20      	ldr	r3, [pc, #128]	@ (8003334 <I2C_RequestMemoryRead+0xa4>)
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2300      	movs	r3, #0
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fa26 	bl	8003708 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f8b6 	bl	8003432 <I2C_WaitOnTXISFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e02c      	b.n	800332a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032d6:	893b      	ldrh	r3, [r7, #8]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	629a      	str	r2, [r3, #40]	@ 0x28
 80032e0:	e015      	b.n	800330e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032e2:	893b      	ldrh	r3, [r7, #8]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	69b9      	ldr	r1, [r7, #24]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f89c 	bl	8003432 <I2C_WaitOnTXISFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e012      	b.n	800332a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003304:	893b      	ldrh	r3, [r7, #8]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2200      	movs	r2, #0
 8003316:	2140      	movs	r1, #64	@ 0x40
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f831 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	80002000 	.word	0x80002000

08003338 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d103      	bne.n	8003356 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2200      	movs	r2, #0
 8003354:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d007      	beq.n	8003374 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	619a      	str	r2, [r3, #24]
  }
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003390:	e03b      	b.n	800340a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	6839      	ldr	r1, [r7, #0]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f8d6 	bl	8003548 <I2C_IsErrorOccurred>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e041      	b.n	800342a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d02d      	beq.n	800340a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7ff f963 	bl	8002678 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d122      	bne.n	800340a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d113      	bne.n	800340a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e00f      	b.n	800342a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4013      	ands	r3, r2
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	429a      	cmp	r2, r3
 8003426:	d0b4      	beq.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800343e:	e033      	b.n	80034a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f87f 	bl	8003548 <I2C_IsErrorOccurred>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e031      	b.n	80034b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345a:	d025      	beq.n	80034a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345c:	f7ff f90c 	bl	8002678 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	429a      	cmp	r2, r3
 800346a:	d302      	bcc.n	8003472 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11a      	bne.n	80034a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	d013      	beq.n	80034a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e007      	b.n	80034b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d1c4      	bne.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034cc:	e02f      	b.n	800352e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f838 	bl	8003548 <I2C_IsErrorOccurred>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e02d      	b.n	800353e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7ff f8c9 	bl	8002678 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11a      	bne.n	800352e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b20      	cmp	r3, #32
 8003504:	d013      	beq.n	800352e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e007      	b.n	800353e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b20      	cmp	r3, #32
 800353a:	d1c8      	bne.n	80034ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	@ 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d068      	beq.n	8003646 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2210      	movs	r2, #16
 800357a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800357c:	e049      	b.n	8003612 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d045      	beq.n	8003612 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7ff f877 	bl	8002678 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_IsErrorOccurred+0x54>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d13a      	bne.n	8003612 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035be:	d121      	bne.n	8003604 <I2C_IsErrorOccurred+0xbc>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035c6:	d01d      	beq.n	8003604 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d01a      	beq.n	8003604 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035de:	f7ff f84b 	bl	8002678 <HAL_GetTick>
 80035e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e4:	e00e      	b.n	8003604 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035e6:	f7ff f847 	bl	8002678 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b19      	cmp	r3, #25
 80035f2:	d907      	bls.n	8003604 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	f043 0320 	orr.w	r3, r3, #32
 80035fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003602:	e006      	b.n	8003612 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b20      	cmp	r3, #32
 8003610:	d1e9      	bne.n	80035e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b20      	cmp	r3, #32
 800361e:	d003      	beq.n	8003628 <I2C_IsErrorOccurred+0xe0>
 8003620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0aa      	beq.n	800357e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800362c:	2b00      	cmp	r3, #0
 800362e:	d103      	bne.n	8003638 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2220      	movs	r2, #32
 8003636:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003668:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f043 0308 	orr.w	r3, r3, #8
 8003680:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800368a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	f043 0302 	orr.w	r3, r3, #2
 80036a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80036b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01c      	beq.n	80036f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff fe3b 	bl	8003338 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003704 <I2C_IsErrorOccurred+0x1bc>)
 80036ce:	400b      	ands	r3, r1
 80036d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80036f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3728      	adds	r7, #40	@ 0x28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	fe00e800 	.word	0xfe00e800

08003708 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	817b      	strh	r3, [r7, #10]
 8003716:	4613      	mov	r3, r2
 8003718:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800371a:	897b      	ldrh	r3, [r7, #10]
 800371c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003720:	7a7b      	ldrb	r3, [r7, #9]
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003728:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	4313      	orrs	r3, r2
 8003732:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003736:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	0d5b      	lsrs	r3, r3, #21
 8003742:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003746:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <I2C_TransferConfig+0x60>)
 8003748:	430b      	orrs	r3, r1
 800374a:	43db      	mvns	r3, r3
 800374c:	ea02 0103 	and.w	r1, r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	03ff63ff 	.word	0x03ff63ff

0800376c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b20      	cmp	r3, #32
 8003780:	d138      	bne.n	80037f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800378c:	2302      	movs	r3, #2
 800378e:	e032      	b.n	80037f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	@ 0x24
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6819      	ldr	r1, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	d139      	bne.n	800388c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003822:	2302      	movs	r3, #2
 8003824:	e033      	b.n	800388e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2224      	movs	r2, #36	@ 0x24
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003854:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e000      	b.n	800388e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0c0      	b.n	8003a2e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fe fb4b 	bl	8001f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2203      	movs	r2, #3
 80038ca:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 fd0b 	bl	80072ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e03e      	b.n	800395c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	3311      	adds	r3, #17
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038f2:	7bfa      	ldrb	r2, [r7, #15]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	440b      	add	r3, r1
 8003900:	3310      	adds	r3, #16
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	440b      	add	r3, r1
 8003914:	3313      	adds	r3, #19
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	440b      	add	r3, r1
 8003928:	3320      	adds	r3, #32
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800392e:	7bfa      	ldrb	r2, [r7, #15]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	440b      	add	r3, r1
 800393c:	3324      	adds	r3, #36	@ 0x24
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	440b      	add	r3, r1
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	3301      	adds	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	791b      	ldrb	r3, [r3, #4]
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	429a      	cmp	r2, r3
 8003964:	d3bb      	bcc.n	80038de <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e044      	b.n	80039f6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	440b      	add	r3, r1
 800397a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	440b      	add	r3, r1
 8003990:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	440b      	add	r3, r1
 80039a6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	440b      	add	r3, r1
 80039bc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	440b      	add	r3, r1
 80039d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	440b      	add	r3, r1
 80039e8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	3301      	adds	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	791b      	ldrb	r3, [r3, #4]
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d3b5      	bcc.n	800396c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003a0c:	f003 fc8a 	bl	8007324 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7a9b      	ldrb	r3, [r3, #10]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d102      	bne.n	8003a2c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f805 	bl	8003a36 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a90:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a04      	ldr	r2, [pc, #16]	@ (8003aa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a9a:	6013      	str	r3, [r2, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	58000400 	.word	0x58000400

08003aac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003ab0:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	58000400 	.word	0x58000400

08003ac8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ada:	d101      	bne.n	8003ae0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b3a:	d101      	bne.n	8003b40 <LL_RCC_HSE_IsReady+0x18>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <LL_RCC_HSE_IsReady+0x1a>
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b5e:	6013      	str	r3, [r2, #0]
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b7c:	6013      	str	r3, [r2, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9a:	d101      	bne.n	8003ba0 <LL_RCC_HSI_IsReady+0x18>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <LL_RCC_HSI_IsReady+0x1a>
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003be2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d101      	bne.n	8003c32 <LL_RCC_HSI48_IsReady+0x18>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <LL_RCC_HSI48_IsReady+0x1a>
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c56:	bf00      	nop
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d101      	bne.n	8003cde <LL_RCC_LSE_IsReady+0x18>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <LL_RCC_LSE_IsReady+0x1a>
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d101      	bne.n	8003d46 <LL_RCC_LSI1_IsReady+0x18>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <LL_RCC_LSI1_IsReady+0x1a>
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003d52:	b480      	push	{r7}
 8003d54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d6a:	bf00      	nop
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d101      	bne.n	8003dae <LL_RCC_LSI2_IsReady+0x18>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <LL_RCC_LSI2_IsReady+0x1a>
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6013      	str	r3, [r2, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6013      	str	r3, [r2, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d101      	bne.n	8003e3a <LL_RCC_MSI_IsReady+0x16>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <LL_RCC_MSI_IsReady+0x18>
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e7e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2bb0      	cmp	r3, #176	@ 0xb0
 8003e84:	d901      	bls.n	8003e8a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003e86:	23b0      	movs	r3, #176	@ 0xb0
 8003e88:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003e8a:	687b      	ldr	r3, [r7, #4]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 0203 	bic.w	r2, r3, #3
 8003ed4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f66:	f023 020f 	bic.w	r2, r3, #15
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	608b      	str	r3, [r1, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800402e:	4618      	mov	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800404a:	6013      	str	r3, [r2, #0]
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004056:	b480      	push	{r7}
 8004058:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800405a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004064:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004068:	6013      	str	r3, [r2, #0]
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004082:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004086:	d101      	bne.n	800408c <LL_RCC_PLL_IsReady+0x18>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <LL_RCC_PLL_IsReady+0x1a>
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800409c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80040e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0303 	and.w	r3, r3, #3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80040fa:	b480      	push	{r7}
 80040fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800410c:	d101      	bne.n	8004112 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004126:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004132:	d101      	bne.n	8004138 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004158:	d101      	bne.n	800415e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800416a:	b480      	push	{r7}
 800416c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800416e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800417c:	d101      	bne.n	8004182 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800418e:	b480      	push	{r7}
 8004190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800419c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041a0:	d101      	bne.n	80041a6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b4:	b590      	push	{r4, r7, lr}
 80041b6:	b08d      	sub	sp, #52	@ 0x34
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e363      	b.n	800488e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 808d 	beq.w	80042ee <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d4:	f7ff fe89 	bl	8003eea <LL_RCC_GetSysClkSource>
 80041d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041da:	f7ff ff82 	bl	80040e2 <LL_RCC_PLL_GetMainSource>
 80041de:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80041e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_RCC_OscConfig+0x3e>
 80041e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d147      	bne.n	800427c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d144      	bne.n	800427c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e347      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004202:	f7ff fe34 	bl	8003e6e <LL_RCC_MSI_GetRange>
 8004206:	4603      	mov	r3, r0
 8004208:	429c      	cmp	r4, r3
 800420a:	d914      	bls.n	8004236 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fd2f 	bl	8004c74 <RCC_SetFlashLatencyFromMSIRange>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e336      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fe0e 	bl	8003e46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fe32 	bl	8003e98 <LL_RCC_MSI_SetCalibTrimming>
 8004234:	e013      	b.n	800425e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fe03 	bl	8003e46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fe27 	bl	8003e98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fd10 	bl	8004c74 <RCC_SetFlashLatencyFromMSIRange>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e317      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800425e:	f000 fcc9 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004262:	4603      	mov	r3, r0
 8004264:	4aa4      	ldr	r2, [pc, #656]	@ (80044f8 <HAL_RCC_OscConfig+0x344>)
 8004266:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004268:	4ba4      	ldr	r3, [pc, #656]	@ (80044fc <HAL_RCC_OscConfig+0x348>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe f9b5 	bl	80025dc <HAL_InitTick>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d039      	beq.n	80042ec <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e308      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01e      	beq.n	80042c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004284:	f7ff fdb0 	bl	8003de8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004288:	f7fe f9f6 	bl	8002678 <HAL_GetTick>
 800428c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004290:	f7fe f9f2 	bl	8002678 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e2f5      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80042a2:	f7ff fdbf 	bl	8003e24 <LL_RCC_MSI_IsReady>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f1      	beq.n	8004290 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fdc8 	bl	8003e46 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fdec 	bl	8003e98 <LL_RCC_MSI_SetCalibTrimming>
 80042c0:	e015      	b.n	80042ee <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042c2:	f7ff fda0 	bl	8003e06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042c6:	f7fe f9d7 	bl	8002678 <HAL_GetTick>
 80042ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042ce:	f7fe f9d3 	bl	8002678 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e2d6      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80042e0:	f7ff fda0 	bl	8003e24 <LL_RCC_MSI_IsReady>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f1      	bne.n	80042ce <HAL_RCC_OscConfig+0x11a>
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80042ec:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d047      	beq.n	800438a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042fa:	f7ff fdf6 	bl	8003eea <LL_RCC_GetSysClkSource>
 80042fe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004300:	f7ff feef 	bl	80040e2 <LL_RCC_PLL_GetMainSource>
 8004304:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d005      	beq.n	8004318 <HAL_RCC_OscConfig+0x164>
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d108      	bne.n	8004324 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b03      	cmp	r3, #3
 8004316:	d105      	bne.n	8004324 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d134      	bne.n	800438a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e2b4      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800432c:	d102      	bne.n	8004334 <HAL_RCC_OscConfig+0x180>
 800432e:	f7ff fbdd 	bl	8003aec <LL_RCC_HSE_Enable>
 8004332:	e001      	b.n	8004338 <HAL_RCC_OscConfig+0x184>
 8004334:	f7ff fbe9 	bl	8003b0a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d012      	beq.n	8004366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fe f99a 	bl	8002678 <HAL_GetTick>
 8004344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fe f996 	bl	8002678 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	@ 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e299      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800435a:	f7ff fbe5 	bl	8003b28 <LL_RCC_HSE_IsReady>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f1      	beq.n	8004348 <HAL_RCC_OscConfig+0x194>
 8004364:	e011      	b.n	800438a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fe f987 	bl	8002678 <HAL_GetTick>
 800436a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800436e:	f7fe f983 	bl	8002678 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b64      	cmp	r3, #100	@ 0x64
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e286      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004380:	f7ff fbd2 	bl	8003b28 <LL_RCC_HSE_IsReady>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f1      	bne.n	800436e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d04c      	beq.n	8004430 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004396:	f7ff fda8 	bl	8003eea <LL_RCC_GetSysClkSource>
 800439a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800439c:	f7ff fea1 	bl	80040e2 <LL_RCC_PLL_GetMainSource>
 80043a0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_OscConfig+0x200>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b0c      	cmp	r3, #12
 80043ac:	d10e      	bne.n	80043cc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e266      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fbf1 	bl	8003bac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80043ca:	e031      	b.n	8004430 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d019      	beq.n	8004408 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d4:	f7ff fbba 	bl	8003b4c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fe f94e 	bl	8002678 <HAL_GetTick>
 80043dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e0:	f7fe f94a 	bl	8002678 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e24d      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80043f2:	f7ff fbc9 	bl	8003b88 <LL_RCC_HSI_IsReady>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f1      	beq.n	80043e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fbd3 	bl	8003bac <LL_RCC_HSI_SetCalibTrimming>
 8004406:	e013      	b.n	8004430 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004408:	f7ff fbaf 	bl	8003b6a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fe f934 	bl	8002678 <HAL_GetTick>
 8004410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004414:	f7fe f930 	bl	8002678 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e233      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004426:	f7ff fbaf 	bl	8003b88 <LL_RCC_HSI_IsReady>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f1      	bne.n	8004414 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a3 	beq.w	8004590 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d076      	beq.n	8004540 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	d046      	beq.n	80044ec <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800445e:	f7ff fc66 	bl	8003d2e <LL_RCC_LSI1_IsReady>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d113      	bne.n	8004490 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004468:	f7ff fc3f 	bl	8003cea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800446c:	f7fe f904 	bl	8002678 <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004474:	f7fe f900 	bl	8002678 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e203      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004486:	f7ff fc52 	bl	8003d2e <LL_RCC_LSI1_IsReady>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f1      	beq.n	8004474 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004490:	f7ff fc5f 	bl	8003d52 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fe f8f0 	bl	8002678 <HAL_GetTick>
 8004498:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800449c:	f7fe f8ec 	bl	8002678 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e1ef      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80044ae:	f7ff fc72 	bl	8003d96 <LL_RCC_LSI2_IsReady>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f1      	beq.n	800449c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fc7c 	bl	8003dba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80044c2:	f7ff fc23 	bl	8003d0c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fe f8d7 	bl	8002678 <HAL_GetTick>
 80044ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044ce:	f7fe f8d3 	bl	8002678 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e1d6      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80044e0:	f7ff fc25 	bl	8003d2e <LL_RCC_LSI1_IsReady>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f1      	bne.n	80044ce <HAL_RCC_OscConfig+0x31a>
 80044ea:	e051      	b.n	8004590 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80044ec:	f7ff fbfd 	bl	8003cea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fe f8c2 	bl	8002678 <HAL_GetTick>
 80044f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80044f6:	e00c      	b.n	8004512 <HAL_RCC_OscConfig+0x35e>
 80044f8:	20000008 	.word	0x20000008
 80044fc:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004500:	f7fe f8ba 	bl	8002678 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e1bd      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004512:	f7ff fc0c 	bl	8003d2e <LL_RCC_LSI1_IsReady>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f1      	beq.n	8004500 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800451c:	f7ff fc2a 	bl	8003d74 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004522:	f7fe f8a9 	bl	8002678 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b03      	cmp	r3, #3
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e1ac      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004534:	f7ff fc2f 	bl	8003d96 <LL_RCC_LSI2_IsReady>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f1      	bne.n	8004522 <HAL_RCC_OscConfig+0x36e>
 800453e:	e027      	b.n	8004590 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004540:	f7ff fc18 	bl	8003d74 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fe f898 	bl	8002678 <HAL_GetTick>
 8004548:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800454c:	f7fe f894 	bl	8002678 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b03      	cmp	r3, #3
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e197      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800455e:	f7ff fc1a 	bl	8003d96 <LL_RCC_LSI2_IsReady>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f1      	bne.n	800454c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004568:	f7ff fbd0 	bl	8003d0c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fe f884 	bl	8002678 <HAL_GetTick>
 8004570:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004574:	f7fe f880 	bl	8002678 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e183      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004586:	f7ff fbd2 	bl	8003d2e <LL_RCC_LSI1_IsReady>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f1      	bne.n	8004574 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d05b      	beq.n	8004654 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459c:	4ba7      	ldr	r3, [pc, #668]	@ (800483c <HAL_RCC_OscConfig+0x688>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d114      	bne.n	80045d2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80045a8:	f7ff fa70 	bl	8003a8c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ac:	f7fe f864 	bl	8002678 <HAL_GetTick>
 80045b0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b4:	f7fe f860 	bl	8002678 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e163      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c6:	4b9d      	ldr	r3, [pc, #628]	@ (800483c <HAL_RCC_OscConfig+0x688>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d102      	bne.n	80045e0 <HAL_RCC_OscConfig+0x42c>
 80045da:	f7ff fb30 	bl	8003c3e <LL_RCC_LSE_Enable>
 80045de:	e00c      	b.n	80045fa <HAL_RCC_OscConfig+0x446>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b05      	cmp	r3, #5
 80045e6:	d104      	bne.n	80045f2 <HAL_RCC_OscConfig+0x43e>
 80045e8:	f7ff fb4b 	bl	8003c82 <LL_RCC_LSE_EnableBypass>
 80045ec:	f7ff fb27 	bl	8003c3e <LL_RCC_LSE_Enable>
 80045f0:	e003      	b.n	80045fa <HAL_RCC_OscConfig+0x446>
 80045f2:	f7ff fb35 	bl	8003c60 <LL_RCC_LSE_Disable>
 80045f6:	f7ff fb55 	bl	8003ca4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d014      	beq.n	800462c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004602:	f7fe f839 	bl	8002678 <HAL_GetTick>
 8004606:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004608:	e00a      	b.n	8004620 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460a:	f7fe f835 	bl	8002678 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004618:	4293      	cmp	r3, r2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e136      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004620:	f7ff fb51 	bl	8003cc6 <LL_RCC_LSE_IsReady>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0ef      	beq.n	800460a <HAL_RCC_OscConfig+0x456>
 800462a:	e013      	b.n	8004654 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fe f824 	bl	8002678 <HAL_GetTick>
 8004630:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004632:	e00a      	b.n	800464a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fe f820 	bl	8002678 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e121      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800464a:	f7ff fb3c 	bl	8003cc6 <LL_RCC_LSE_IsReady>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1ef      	bne.n	8004634 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d02c      	beq.n	80046ba <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	2b00      	cmp	r3, #0
 8004666:	d014      	beq.n	8004692 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004668:	f7ff fab5 	bl	8003bd6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fe f804 	bl	8002678 <HAL_GetTick>
 8004670:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004674:	f7fe f800 	bl	8002678 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e103      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004686:	f7ff fac8 	bl	8003c1a <LL_RCC_HSI48_IsReady>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f1      	beq.n	8004674 <HAL_RCC_OscConfig+0x4c0>
 8004690:	e013      	b.n	80046ba <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004692:	f7ff fab1 	bl	8003bf8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004696:	f7fd ffef 	bl	8002678 <HAL_GetTick>
 800469a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800469e:	f7fd ffeb 	bl	8002678 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e0ee      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80046b0:	f7ff fab3 	bl	8003c1a <LL_RCC_HSI48_IsReady>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f1      	bne.n	800469e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80e4 	beq.w	800488c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c4:	f7ff fc11 	bl	8003eea <LL_RCC_GetSysClkSource>
 80046c8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80046ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	f040 80b4 	bne.w	8004844 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0203 	and.w	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d123      	bne.n	8004732 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d11c      	bne.n	8004732 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d114      	bne.n	8004732 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d10d      	bne.n	8004732 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d106      	bne.n	8004732 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d05d      	beq.n	80047ee <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b0c      	cmp	r3, #12
 8004736:	d058      	beq.n	80047ea <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0a1      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800474a:	f7ff fc84 	bl	8004056 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800474e:	f7fd ff93 	bl	8002678 <HAL_GetTick>
 8004752:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004756:	f7fd ff8f 	bl	8002678 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e092      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ef      	bne.n	8004756 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	4b30      	ldr	r3, [pc, #192]	@ (8004840 <HAL_RCC_OscConfig+0x68c>)
 800477e:	4013      	ands	r3, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004788:	4311      	orrs	r1, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800478e:	0212      	lsls	r2, r2, #8
 8004790:	4311      	orrs	r1, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004796:	4311      	orrs	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800479c:	4311      	orrs	r1, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80047a2:	430a      	orrs	r2, r1
 80047a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047ac:	f7ff fc44 	bl	8004038 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047c0:	f7fd ff5a 	bl	8002678 <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fd ff56 	bl	8002678 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e059      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ef      	beq.n	80047c8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e8:	e050      	b.n	800488c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e04f      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d147      	bne.n	800488c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047fc:	f7ff fc1c 	bl	8004038 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800480a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800480e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004810:	f7fd ff32 	bl	8002678 <HAL_GetTick>
 8004814:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7fd ff2e 	bl	8002678 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e031      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0ef      	beq.n	8004818 <HAL_RCC_OscConfig+0x664>
 8004838:	e028      	b.n	800488c <HAL_RCC_OscConfig+0x6d8>
 800483a:	bf00      	nop
 800483c:	58000400 	.word	0x58000400
 8004840:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b0c      	cmp	r3, #12
 8004848:	d01e      	beq.n	8004888 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484a:	f7ff fc04 	bl	8004056 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fd ff13 	bl	8002678 <HAL_GetTick>
 8004852:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004856:	f7fd ff0f 	bl	8002678 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e012      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ef      	bne.n	8004856 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <HAL_RCC_OscConfig+0x6e4>)
 8004882:	4013      	ands	r3, r2
 8004884:	60cb      	str	r3, [r1, #12]
 8004886:	e001      	b.n	800488c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3734      	adds	r7, #52	@ 0x34
 8004892:	46bd      	mov	sp, r7
 8004894:	bd90      	pop	{r4, r7, pc}
 8004896:	bf00      	nop
 8004898:	eefefffc 	.word	0xeefefffc

0800489c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e12d      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b0:	4b98      	ldr	r3, [pc, #608]	@ (8004b14 <HAL_RCC_ClockConfig+0x278>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d91b      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048be:	4b95      	ldr	r3, [pc, #596]	@ (8004b14 <HAL_RCC_ClockConfig+0x278>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 0207 	bic.w	r2, r3, #7
 80048c6:	4993      	ldr	r1, [pc, #588]	@ (8004b14 <HAL_RCC_ClockConfig+0x278>)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ce:	f7fd fed3 	bl	8002678 <HAL_GetTick>
 80048d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048d6:	f7fd fecf 	bl	8002678 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e111      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e8:	4b8a      	ldr	r3, [pc, #552]	@ (8004b14 <HAL_RCC_ClockConfig+0x278>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d1ef      	bne.n	80048d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d016      	beq.n	8004930 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fafb 	bl	8003f02 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800490c:	f7fd feb4 	bl	8002678 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004914:	f7fd feb0 	bl	8002678 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e0f2      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004926:	f7ff fbe8 	bl	80040fa <LL_RCC_IsActiveFlag_HPRE>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f1      	beq.n	8004914 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d016      	beq.n	800496a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff faf2 	bl	8003f2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004946:	f7fd fe97 	bl	8002678 <HAL_GetTick>
 800494a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800494e:	f7fd fe93 	bl	8002678 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e0d5      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004960:	f7ff fbdd 	bl	800411e <LL_RCC_IsActiveFlag_C2HPRE>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f1      	beq.n	800494e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff faeb 	bl	8003f56 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004980:	f7fd fe7a 	bl	8002678 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004988:	f7fd fe76 	bl	8002678 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0b8      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800499a:	f7ff fbd3 	bl	8004144 <LL_RCC_IsActiveFlag_SHDHPRE>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f1      	beq.n	8004988 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d016      	beq.n	80049de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fae5 	bl	8003f84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049ba:	f7fd fe5d 	bl	8002678 <HAL_GetTick>
 80049be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049c2:	f7fd fe59 	bl	8002678 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e09b      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80049d4:	f7ff fbc9 	bl	800416a <LL_RCC_IsActiveFlag_PPRE1>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f1      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d017      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fadb 	bl	8003fac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049f6:	f7fd fe3f 	bl	8002678 <HAL_GetTick>
 80049fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049fe:	f7fd fe3b 	bl	8002678 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e07d      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a10:	f7ff fbbd 	bl	800418e <LL_RCC_IsActiveFlag_PPRE2>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f1      	beq.n	80049fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d043      	beq.n	8004aae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004a2e:	f7ff f87b 	bl	8003b28 <LL_RCC_HSE_IsReady>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11e      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e067      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d106      	bne.n	8004a52 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004a44:	f7ff fb16 	bl	8004074 <LL_RCC_PLL_IsReady>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d113      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e05c      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004a5a:	f7ff f9e3 	bl	8003e24 <LL_RCC_MSI_IsReady>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d108      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e051      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004a68:	f7ff f88e 	bl	8003b88 <LL_RCC_HSI_IsReady>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e04a      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fa21 	bl	8003ec2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a80:	f7fd fdfa 	bl	8002678 <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a88:	f7fd fdf6 	bl	8002678 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e036      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	f7ff fa24 	bl	8003eea <LL_RCC_GetSysClkSource>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d1ec      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aae:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <HAL_RCC_ClockConfig+0x278>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d21b      	bcs.n	8004af4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abc:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <HAL_RCC_ClockConfig+0x278>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 0207 	bic.w	r2, r3, #7
 8004ac4:	4913      	ldr	r1, [pc, #76]	@ (8004b14 <HAL_RCC_ClockConfig+0x278>)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004acc:	f7fd fdd4 	bl	8002678 <HAL_GetTick>
 8004ad0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ad4:	f7fd fdd0 	bl	8002678 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e012      	b.n	8004b0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <HAL_RCC_ClockConfig+0x278>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d1ef      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004af4:	f000 f87e 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4a07      	ldr	r2, [pc, #28]	@ (8004b18 <HAL_RCC_ClockConfig+0x27c>)
 8004afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004afe:	f7fd fdc7 	bl	8002690 <HAL_GetTickPrio>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fd fd69 	bl	80025dc <HAL_InitTick>
 8004b0a:	4603      	mov	r3, r0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	58004000 	.word	0x58004000
 8004b18:	20000008 	.word	0x20000008

08004b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b22:	f7ff f9e2 	bl	8003eea <LL_RCC_GetSysClkSource>
 8004b26:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b2e:	f7ff f99e 	bl	8003e6e <LL_RCC_MSI_GetRange>
 8004b32:	4603      	mov	r3, r0
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	e04b      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d102      	bne.n	8004b50 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b4a:	4b28      	ldr	r3, [pc, #160]	@ (8004bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e045      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d10a      	bne.n	8004b6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b56:	f7fe ffb7 	bl	8003ac8 <LL_RCC_HSE_IsEnabledDiv2>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d102      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004b60:	4b22      	ldr	r3, [pc, #136]	@ (8004bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e03a      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004b66:	4b22      	ldr	r3, [pc, #136]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e037      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004b6c:	f7ff fab9 	bl	80040e2 <LL_RCC_PLL_GetMainSource>
 8004b70:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d003      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x64>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCC_GetSysClockFreq+0x6a>
 8004b7e:	e00d      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004b80:	4b1a      	ldr	r3, [pc, #104]	@ (8004bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b82:	60bb      	str	r3, [r7, #8]
        break;
 8004b84:	e015      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b86:	f7fe ff9f 	bl	8003ac8 <LL_RCC_HSE_IsEnabledDiv2>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d102      	bne.n	8004b96 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004b90:	4b16      	ldr	r3, [pc, #88]	@ (8004bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b92:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004b94:	e00d      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004b96:	4b16      	ldr	r3, [pc, #88]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b98:	60bb      	str	r3, [r7, #8]
        break;
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b9c:	f7ff f967 	bl	8003e6e <LL_RCC_MSI_GetRange>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bae:	60bb      	str	r3, [r7, #8]
        break;
 8004bb0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004bb2:	f7ff fa71 	bl	8004098 <LL_RCC_PLL_GetN>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	fb03 f402 	mul.w	r4, r3, r2
 8004bbe:	f7ff fa84 	bl	80040ca <LL_RCC_PLL_GetDivider>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	fbb4 f4f3 	udiv	r4, r4, r3
 8004bcc:	f7ff fa71 	bl	80040b2 <LL_RCC_PLL_GetR>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	0f5b      	lsrs	r3, r3, #29
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	fbb4 f3f3 	udiv	r3, r4, r3
 8004bda:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd90      	pop	{r4, r7, pc}
 8004be6:	bf00      	nop
 8004be8:	08008700 	.word	0x08008700
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	01e84800 	.word	0x01e84800

08004bf4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf4:	b598      	push	{r3, r4, r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004bf8:	f7ff ff90 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	f7ff f9e9 	bl	8003fd4 <LL_RCC_GetAHBPrescaler>
 8004c02:	4603      	mov	r3, r0
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	4a03      	ldr	r2, [pc, #12]	@ (8004c18 <HAL_RCC_GetHCLKFreq+0x24>)
 8004c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd98      	pop	{r3, r4, r7, pc}
 8004c18:	080086a0 	.word	0x080086a0

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b598      	push	{r3, r4, r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c20:	f7ff ffe8 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c24:	4604      	mov	r4, r0
 8004c26:	f7ff f9ef 	bl	8004008 <LL_RCC_GetAPB1Prescaler>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	0a1b      	lsrs	r3, r3, #8
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	4a04      	ldr	r2, [pc, #16]	@ (8004c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd98      	pop	{r3, r4, r7, pc}
 8004c44:	080086e0 	.word	0x080086e0

08004c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c48:	b598      	push	{r3, r4, r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004c4c:	f7ff ffd2 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c50:	4604      	mov	r4, r0
 8004c52:	f7ff f9e5 	bl	8004020 <LL_RCC_GetAPB2Prescaler>
 8004c56:	4603      	mov	r3, r0
 8004c58:	0adb      	lsrs	r3, r3, #11
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	4a04      	ldr	r2, [pc, #16]	@ (8004c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	bd98      	pop	{r3, r4, r7, pc}
 8004c70:	080086e0 	.word	0x080086e0

08004c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004c80:	d903      	bls.n	8004c8a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004c82:	4b15      	ldr	r3, [pc, #84]	@ (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e007      	b.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	4a11      	ldr	r2, [pc, #68]	@ (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004c9a:	f7ff f9a7 	bl	8003fec <LL_RCC_GetAHB4Prescaler>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8004cdc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	0c9c      	lsrs	r4, r3, #18
 8004cbe:	f7fe fef5 	bl	8003aac <HAL_PWREx_GetVoltageRange>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f000 f80c 	bl	8004ce4 <RCC_SetFlashLatency>
 8004ccc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd90      	pop	{r4, r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	08008700 	.word	0x08008700
 8004cdc:	080086a0 	.word	0x080086a0
 8004ce0:	431bde83 	.word	0x431bde83

08004ce4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b093      	sub	sp, #76	@ 0x4c
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004cee:	4b37      	ldr	r3, [pc, #220]	@ (8004dcc <RCC_SetFlashLatency+0xe8>)
 8004cf0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004cfa:	4a35      	ldr	r2, [pc, #212]	@ (8004dd0 <RCC_SetFlashLatency+0xec>)
 8004cfc:	f107 031c 	add.w	r3, r7, #28
 8004d00:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004d06:	4b33      	ldr	r3, [pc, #204]	@ (8004dd4 <RCC_SetFlashLatency+0xf0>)
 8004d08:	f107 040c 	add.w	r4, r7, #12
 8004d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004d12:	2300      	movs	r3, #0
 8004d14:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d1c:	d11a      	bne.n	8004d54 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d22:	e013      	b.n	8004d4c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	3348      	adds	r3, #72	@ 0x48
 8004d2a:	443b      	add	r3, r7
 8004d2c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d807      	bhi.n	8004d46 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	3348      	adds	r3, #72	@ 0x48
 8004d3c:	443b      	add	r3, r7
 8004d3e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004d42:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004d44:	e020      	b.n	8004d88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d48:	3301      	adds	r3, #1
 8004d4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d9e8      	bls.n	8004d24 <RCC_SetFlashLatency+0x40>
 8004d52:	e019      	b.n	8004d88 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d54:	2300      	movs	r3, #0
 8004d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d58:	e013      	b.n	8004d82 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	3348      	adds	r3, #72	@ 0x48
 8004d60:	443b      	add	r3, r7
 8004d62:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d807      	bhi.n	8004d7c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	3348      	adds	r3, #72	@ 0x48
 8004d72:	443b      	add	r3, r7
 8004d74:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004d78:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004d7a:	e005      	b.n	8004d88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7e:	3301      	adds	r3, #1
 8004d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d9e8      	bls.n	8004d5a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004d88:	4b13      	ldr	r3, [pc, #76]	@ (8004dd8 <RCC_SetFlashLatency+0xf4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f023 0207 	bic.w	r2, r3, #7
 8004d90:	4911      	ldr	r1, [pc, #68]	@ (8004dd8 <RCC_SetFlashLatency+0xf4>)
 8004d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d94:	4313      	orrs	r3, r2
 8004d96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d98:	f7fd fc6e 	bl	8002678 <HAL_GetTick>
 8004d9c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d9e:	e008      	b.n	8004db2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004da0:	f7fd fc6a 	bl	8002678 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e007      	b.n	8004dc2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004db2:	4b09      	ldr	r3, [pc, #36]	@ (8004dd8 <RCC_SetFlashLatency+0xf4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d1ef      	bne.n	8004da0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	374c      	adds	r7, #76	@ 0x4c
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd90      	pop	{r4, r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	08008674 	.word	0x08008674
 8004dd0:	08008684 	.word	0x08008684
 8004dd4:	08008690 	.word	0x08008690
 8004dd8:	58004000 	.word	0x58004000

08004ddc <LL_RCC_LSE_IsEnabled>:
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <LL_RCC_LSE_IsEnabled+0x18>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <LL_RCC_LSE_IsEnabled+0x1a>
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <LL_RCC_LSE_IsReady>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d101      	bne.n	8004e18 <LL_RCC_LSE_IsReady+0x18>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <LL_RCC_LSE_IsReady+0x1a>
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <LL_RCC_SetRFWKPClockSource>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_RCC_SetSMPSClockSource>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	f023 0203 	bic.w	r2, r3, #3
 8004e62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_SetSMPSPrescaler>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_RCC_SetUSARTClockSource>:
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb0:	f023 0203 	bic.w	r2, r3, #3
 8004eb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_RCC_SetLPUARTClockSource>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004edc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ee0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_RCC_SetI2CClockSource>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f04:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004f10:	43db      	mvns	r3, r3
 8004f12:	401a      	ands	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004f1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <LL_RCC_SetLPTIMClockSource>:
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <LL_RCC_SetSAIClockSource>:
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <LL_RCC_SetRNGClockSource>:
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004fa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <LL_RCC_SetCLK48ClockSource>:
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <LL_RCC_SetUSBClockSource>:
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff ffe3 	bl	8004fbe <LL_RCC_SetCLK48ClockSource>
}
 8004ff8:	bf00      	nop
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <LL_RCC_SetADCClockSource>:
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005010:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005014:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <LL_RCC_SetRTCClockSource>:
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005040:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <LL_RCC_GetRTCClockSource>:
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <LL_RCC_ForceBackupDomainReset>:
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005086:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800508a:	bf00      	nop
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <LL_RCC_PLLSAI1_Enable>:
{
 80050b6:	b480      	push	{r7}
 80050b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80050ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050c8:	6013      	str	r3, [r2, #0]
}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <LL_RCC_PLLSAI1_Disable>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050e6:	6013      	str	r3, [r2, #0]
}
 80050e8:	bf00      	nop
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <LL_RCC_PLLSAI1_IsReady>:
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005100:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005104:	d101      	bne.n	800510a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b088      	sub	sp, #32
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800511e:	2300      	movs	r3, #0
 8005120:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005122:	2300      	movs	r3, #0
 8005124:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d034      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005136:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800513a:	d021      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800513c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005140:	d81b      	bhi.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005142:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005146:	d01d      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005148:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800514c:	d815      	bhi.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005156:	d110      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005166:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005168:	e00d      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3304      	adds	r3, #4
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f947 	bl	8005402 <RCCEx_PLLSAI1_ConfigNP>
 8005174:	4603      	mov	r3, r0
 8005176:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005178:	e005      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	77fb      	strb	r3, [r7, #31]
        break;
 800517e:	e002      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005180:	bf00      	nop
 8005182:	e000      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005186:	7ffb      	ldrb	r3, [r7, #31]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fee8 	bl	8004f66 <LL_RCC_SetSAIClockSource>
 8005196:	e001      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	7ffb      	ldrb	r3, [r7, #31]
 800519a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d046      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80051a8:	f7ff ff56 	bl	8005058 <LL_RCC_GetRTCClockSource>
 80051ac:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d03c      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80051b8:	f7fe fc68 	bl	8003a8c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff ff30 	bl	800502c <LL_RCC_SetRTCClockSource>
 80051cc:	e02e      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80051ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80051d8:	f7ff ff4b 	bl	8005072 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80051dc:	f7ff ff5a 	bl	8005094 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80051ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80051f8:	f7ff fdf0 	bl	8004ddc <LL_RCC_LSE_IsEnabled>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d114      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005202:	f7fd fa39 	bl	8002678 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005208:	e00b      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520a:	f7fd fa35 	bl	8002678 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005218:	4293      	cmp	r3, r2
 800521a:	d902      	bls.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	77fb      	strb	r3, [r7, #31]
              break;
 8005220:	e004      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005222:	f7ff fded 	bl	8004e00 <LL_RCC_LSE_IsReady>
 8005226:	4603      	mov	r3, r0
 8005228:	2b01      	cmp	r3, #1
 800522a:	d1ee      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800522c:	7ffb      	ldrb	r3, [r7, #31]
 800522e:	77bb      	strb	r3, [r7, #30]
 8005230:	e001      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005232:	7ffb      	ldrb	r3, [r7, #31]
 8005234:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fe2a 	bl	8004ea0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fe35 	bl	8004ecc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b00      	cmp	r3, #0
 800526c:	d004      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fe5d 	bl	8004f32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff fe52 	bl	8004f32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff fe2a 	bl	8004ef8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fe1f 	bl	8004ef8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d022      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fe8d 	bl	8004fea <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052d8:	d107      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80052da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052e8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052f2:	d10b      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f8dd 	bl	80054b8 <RCCEx_PLLSAI1_ConfigNQ>
 80052fe:	4603      	mov	r3, r0
 8005300:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005302:	7ffb      	ldrb	r3, [r7, #31]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005308:	7ffb      	ldrb	r3, [r7, #31]
 800530a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005314:	2b00      	cmp	r3, #0
 8005316:	d02b      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005320:	d008      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800532a:	d003      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fe2a 	bl	8004f92 <LL_RCC_SetRNGClockSource>
 800533e:	e00a      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	2000      	movs	r0, #0
 800534c:	f7ff fe21 	bl	8004f92 <LL_RCC_SetRNGClockSource>
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f7ff fe34 	bl	8004fbe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800535e:	d107      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800536a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800536e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005378:	2b00      	cmp	r3, #0
 800537a:	d022      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fe3d 	bl	8005000 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800538e:	d107      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800539a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800539e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053a8:	d10b      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f8dd 	bl	800556e <RCCEx_PLLSAI1_ConfigNR>
 80053b4:	4603      	mov	r3, r0
 80053b6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80053b8:	7ffb      	ldrb	r3, [r7, #31]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80053be:	7ffb      	ldrb	r3, [r7, #31]
 80053c0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff fd26 	bl	8004e24 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d009      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fd45 	bl	8004e78 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff fd2c 	bl	8004e50 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80053f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800540e:	f7ff fe61 	bl	80050d4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005412:	f7fd f931 	bl	8002678 <HAL_GetTick>
 8005416:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005418:	e009      	b.n	800542e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800541a:	f7fd f92d 	bl	8002678 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d902      	bls.n	800542e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	73fb      	strb	r3, [r7, #15]
      break;
 800542c:	e004      	b.n	8005438 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800542e:	f7ff fe60 	bl	80050f2 <LL_RCC_PLLSAI1_IsReady>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f0      	bne.n	800541a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d137      	bne.n	80054ae <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800543e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005452:	4313      	orrs	r3, r2
 8005454:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005468:	4313      	orrs	r3, r2
 800546a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800546c:	f7ff fe23 	bl	80050b6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005470:	f7fd f902 	bl	8002678 <HAL_GetTick>
 8005474:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005476:	e009      	b.n	800548c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005478:	f7fd f8fe 	bl	8002678 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d902      	bls.n	800548c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	73fb      	strb	r3, [r7, #15]
        break;
 800548a:	e004      	b.n	8005496 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800548c:	f7ff fe31 	bl	80050f2 <LL_RCC_PLLSAI1_IsReady>
 8005490:	4603      	mov	r3, r0
 8005492:	2b01      	cmp	r3, #1
 8005494:	d1f0      	bne.n	8005478 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d108      	bne.n	80054ae <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800549c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054aa:	4313      	orrs	r3, r2
 80054ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054c4:	f7ff fe06 	bl	80050d4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054c8:	f7fd f8d6 	bl	8002678 <HAL_GetTick>
 80054cc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054ce:	e009      	b.n	80054e4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054d0:	f7fd f8d2 	bl	8002678 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d902      	bls.n	80054e4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	73fb      	strb	r3, [r7, #15]
      break;
 80054e2:	e004      	b.n	80054ee <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054e4:	f7ff fe05 	bl	80050f2 <LL_RCC_PLLSAI1_IsReady>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d137      	bne.n	8005564 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005508:	4313      	orrs	r3, r2
 800550a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800551e:	4313      	orrs	r3, r2
 8005520:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005522:	f7ff fdc8 	bl	80050b6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005526:	f7fd f8a7 	bl	8002678 <HAL_GetTick>
 800552a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800552c:	e009      	b.n	8005542 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800552e:	f7fd f8a3 	bl	8002678 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d902      	bls.n	8005542 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	73fb      	strb	r3, [r7, #15]
        break;
 8005540:	e004      	b.n	800554c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005542:	f7ff fdd6 	bl	80050f2 <LL_RCC_PLLSAI1_IsReady>
 8005546:	4603      	mov	r3, r0
 8005548:	2b01      	cmp	r3, #1
 800554a:	d1f0      	bne.n	800552e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d108      	bne.n	8005564 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005560:	4313      	orrs	r3, r2
 8005562:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800557a:	f7ff fdab 	bl	80050d4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800557e:	f7fd f87b 	bl	8002678 <HAL_GetTick>
 8005582:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005584:	e009      	b.n	800559a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005586:	f7fd f877 	bl	8002678 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d902      	bls.n	800559a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	73fb      	strb	r3, [r7, #15]
      break;
 8005598:	e004      	b.n	80055a4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800559a:	f7ff fdaa 	bl	80050f2 <LL_RCC_PLLSAI1_IsReady>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f0      	bne.n	8005586 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d137      	bne.n	800561a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80055aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055be:	4313      	orrs	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80055c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055d4:	4313      	orrs	r3, r2
 80055d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80055d8:	f7ff fd6d 	bl	80050b6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055dc:	f7fd f84c 	bl	8002678 <HAL_GetTick>
 80055e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055e2:	e009      	b.n	80055f8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055e4:	f7fd f848 	bl	8002678 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d902      	bls.n	80055f8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	73fb      	strb	r3, [r7, #15]
        break;
 80055f6:	e004      	b.n	8005602 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055f8:	f7ff fd7b 	bl	80050f2 <LL_RCC_PLLSAI1_IsReady>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d1f0      	bne.n	80055e4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d108      	bne.n	800561a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560c:	691a      	ldr	r2, [r3, #16]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005616:	4313      	orrs	r3, r2
 8005618:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e049      	b.n	80056ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fc fc08 	bl	8001e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 fcce 	bl	8006004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d001      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e036      	b.n	800575a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a17      	ldr	r2, [pc, #92]	@ (8005768 <HAL_TIM_Base_Start_IT+0x94>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d004      	beq.n	8005718 <HAL_TIM_Base_Start_IT+0x44>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005716:	d115      	bne.n	8005744 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	4b13      	ldr	r3, [pc, #76]	@ (800576c <HAL_TIM_Base_Start_IT+0x98>)
 8005720:	4013      	ands	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b06      	cmp	r3, #6
 8005728:	d015      	beq.n	8005756 <HAL_TIM_Base_Start_IT+0x82>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005730:	d011      	beq.n	8005756 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0201 	orr.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005742:	e008      	b.n	8005756 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	e000      	b.n	8005758 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005756:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40012c00 	.word	0x40012c00
 800576c:	00010007 	.word	0x00010007

08005770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e049      	b.n	8005816 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f841 	bl	800581e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f000 fc28 	bl	8006004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <HAL_TIM_PWM_Start+0x24>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	bf14      	ite	ne
 8005850:	2301      	movne	r3, #1
 8005852:	2300      	moveq	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	e03c      	b.n	80058d2 <HAL_TIM_PWM_Start+0x9e>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b04      	cmp	r3, #4
 800585c:	d109      	bne.n	8005872 <HAL_TIM_PWM_Start+0x3e>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	e02f      	b.n	80058d2 <HAL_TIM_PWM_Start+0x9e>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b08      	cmp	r3, #8
 8005876:	d109      	bne.n	800588c <HAL_TIM_PWM_Start+0x58>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	e022      	b.n	80058d2 <HAL_TIM_PWM_Start+0x9e>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d109      	bne.n	80058a6 <HAL_TIM_PWM_Start+0x72>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	e015      	b.n	80058d2 <HAL_TIM_PWM_Start+0x9e>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d109      	bne.n	80058c0 <HAL_TIM_PWM_Start+0x8c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e008      	b.n	80058d2 <HAL_TIM_PWM_Start+0x9e>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e079      	b.n	80059ce <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Start+0xb6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058e8:	e023      	b.n	8005932 <HAL_TIM_PWM_Start+0xfe>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Start+0xc6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058f8:	e01b      	b.n	8005932 <HAL_TIM_PWM_Start+0xfe>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Start+0xd6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005908:	e013      	b.n	8005932 <HAL_TIM_PWM_Start+0xfe>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b0c      	cmp	r3, #12
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Start+0xe6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005918:	e00b      	b.n	8005932 <HAL_TIM_PWM_Start+0xfe>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b10      	cmp	r3, #16
 800591e:	d104      	bne.n	800592a <HAL_TIM_PWM_Start+0xf6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005928:	e003      	b.n	8005932 <HAL_TIM_PWM_Start+0xfe>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2201      	movs	r2, #1
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 feec 	bl	8006718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a24      	ldr	r2, [pc, #144]	@ (80059d8 <HAL_TIM_PWM_Start+0x1a4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d009      	beq.n	800595e <HAL_TIM_PWM_Start+0x12a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a23      	ldr	r2, [pc, #140]	@ (80059dc <HAL_TIM_PWM_Start+0x1a8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d004      	beq.n	800595e <HAL_TIM_PWM_Start+0x12a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a21      	ldr	r2, [pc, #132]	@ (80059e0 <HAL_TIM_PWM_Start+0x1ac>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <HAL_TIM_PWM_Start+0x12e>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <HAL_TIM_PWM_Start+0x130>
 8005962:	2300      	movs	r3, #0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005976:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a16      	ldr	r2, [pc, #88]	@ (80059d8 <HAL_TIM_PWM_Start+0x1a4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_TIM_PWM_Start+0x158>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598a:	d115      	bne.n	80059b8 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	4b14      	ldr	r3, [pc, #80]	@ (80059e4 <HAL_TIM_PWM_Start+0x1b0>)
 8005994:	4013      	ands	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b06      	cmp	r3, #6
 800599c:	d015      	beq.n	80059ca <HAL_TIM_PWM_Start+0x196>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a4:	d011      	beq.n	80059ca <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0201 	orr.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b6:	e008      	b.n	80059ca <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	e000      	b.n	80059cc <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40012c00 	.word	0x40012c00
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800
 80059e4:	00010007 	.word	0x00010007

080059e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d020      	beq.n	8005a4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01b      	beq.n	8005a4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0202 	mvn.w	r2, #2
 8005a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fac7 	bl	8005fc6 <HAL_TIM_IC_CaptureCallback>
 8005a38:	e005      	b.n	8005a46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fab9 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 faca 	bl	8005fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d020      	beq.n	8005a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01b      	beq.n	8005a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0204 	mvn.w	r2, #4
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 faa1 	bl	8005fc6 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa93 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 faa4 	bl	8005fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d020      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01b      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0208 	mvn.w	r2, #8
 8005ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2204      	movs	r2, #4
 8005aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fa7b 	bl	8005fc6 <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fa6d 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fa7e 	bl	8005fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d020      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01b      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0210 	mvn.w	r2, #16
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2208      	movs	r2, #8
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa55 	bl	8005fc6 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa47 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fa58 	bl	8005fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00c      	beq.n	8005b54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0201 	mvn.w	r2, #1
 8005b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fc f8b6 	bl	8001cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00c      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fee1 	bl	8006944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fed9 	bl	8006958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00c      	beq.n	8005bca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa12 	bl	8005fee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00c      	beq.n	8005bee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f06f 0220 	mvn.w	r2, #32
 8005be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fea1 	bl	8006930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e0ff      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b14      	cmp	r3, #20
 8005c22:	f200 80f0 	bhi.w	8005e06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c26:	a201      	add	r2, pc, #4	@ (adr r2, 8005c2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c81 	.word	0x08005c81
 8005c30:	08005e07 	.word	0x08005e07
 8005c34:	08005e07 	.word	0x08005e07
 8005c38:	08005e07 	.word	0x08005e07
 8005c3c:	08005cc1 	.word	0x08005cc1
 8005c40:	08005e07 	.word	0x08005e07
 8005c44:	08005e07 	.word	0x08005e07
 8005c48:	08005e07 	.word	0x08005e07
 8005c4c:	08005d03 	.word	0x08005d03
 8005c50:	08005e07 	.word	0x08005e07
 8005c54:	08005e07 	.word	0x08005e07
 8005c58:	08005e07 	.word	0x08005e07
 8005c5c:	08005d43 	.word	0x08005d43
 8005c60:	08005e07 	.word	0x08005e07
 8005c64:	08005e07 	.word	0x08005e07
 8005c68:	08005e07 	.word	0x08005e07
 8005c6c:	08005d85 	.word	0x08005d85
 8005c70:	08005e07 	.word	0x08005e07
 8005c74:	08005e07 	.word	0x08005e07
 8005c78:	08005e07 	.word	0x08005e07
 8005c7c:	08005dc5 	.word	0x08005dc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fa2c 	bl	80060e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0208 	orr.w	r2, r2, #8
 8005c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0204 	bic.w	r2, r2, #4
 8005caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6999      	ldr	r1, [r3, #24]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	619a      	str	r2, [r3, #24]
      break;
 8005cbe:	e0a5      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fa88 	bl	80061dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6999      	ldr	r1, [r3, #24]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	021a      	lsls	r2, r3, #8
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	619a      	str	r2, [r3, #24]
      break;
 8005d00:	e084      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fae1 	bl	80062d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0208 	orr.w	r2, r2, #8
 8005d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0204 	bic.w	r2, r2, #4
 8005d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69d9      	ldr	r1, [r3, #28]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	61da      	str	r2, [r3, #28]
      break;
 8005d40:	e064      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fb39 	bl	80063c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69d9      	ldr	r1, [r3, #28]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	021a      	lsls	r2, r3, #8
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	61da      	str	r2, [r3, #28]
      break;
 8005d82:	e043      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fb76 	bl	800647c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0208 	orr.w	r2, r2, #8
 8005d9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0204 	bic.w	r2, r2, #4
 8005dae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005dc2:	e023      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fbae 	bl	800652c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	021a      	lsls	r2, r3, #8
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e04:	e002      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	75fb      	strb	r3, [r7, #23]
      break;
 8005e0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop

08005e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_TIM_ConfigClockSource+0x1c>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e0b6      	b.n	8005faa <HAL_TIM_ConfigClockSource+0x18a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005e5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e78:	d03e      	beq.n	8005ef8 <HAL_TIM_ConfigClockSource+0xd8>
 8005e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e7e:	f200 8087 	bhi.w	8005f90 <HAL_TIM_ConfigClockSource+0x170>
 8005e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e86:	f000 8086 	beq.w	8005f96 <HAL_TIM_ConfigClockSource+0x176>
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e8e:	d87f      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x170>
 8005e90:	2b70      	cmp	r3, #112	@ 0x70
 8005e92:	d01a      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0xaa>
 8005e94:	2b70      	cmp	r3, #112	@ 0x70
 8005e96:	d87b      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x170>
 8005e98:	2b60      	cmp	r3, #96	@ 0x60
 8005e9a:	d050      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x11e>
 8005e9c:	2b60      	cmp	r3, #96	@ 0x60
 8005e9e:	d877      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x170>
 8005ea0:	2b50      	cmp	r3, #80	@ 0x50
 8005ea2:	d03c      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0xfe>
 8005ea4:	2b50      	cmp	r3, #80	@ 0x50
 8005ea6:	d873      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x170>
 8005ea8:	2b40      	cmp	r3, #64	@ 0x40
 8005eaa:	d058      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x13e>
 8005eac:	2b40      	cmp	r3, #64	@ 0x40
 8005eae:	d86f      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x170>
 8005eb0:	2b30      	cmp	r3, #48	@ 0x30
 8005eb2:	d064      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15e>
 8005eb4:	2b30      	cmp	r3, #48	@ 0x30
 8005eb6:	d86b      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x170>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d060      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15e>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d867      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x170>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d05c      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15e>
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d05a      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15e>
 8005ec8:	e062      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eda:	f000 fbfd 	bl	80066d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	609a      	str	r2, [r3, #8]
      break;
 8005ef6:	e04f      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f08:	f000 fbe6 	bl	80066d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f1a:	609a      	str	r2, [r3, #8]
      break;
 8005f1c:	e03c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f000 fb58 	bl	80065e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2150      	movs	r1, #80	@ 0x50
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fbb1 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 8005f3c:	e02c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f000 fb77 	bl	800663e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2160      	movs	r1, #96	@ 0x60
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fba1 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 8005f5c:	e01c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f000 fb38 	bl	80065e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2140      	movs	r1, #64	@ 0x40
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fb91 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 8005f7c:	e00c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f000 fb88 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 8005f8e:	e003      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
      break;
 8005f94:	e000      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a30      	ldr	r2, [pc, #192]	@ (80060d8 <TIM_Base_SetConfig+0xd4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_Base_SetConfig+0x20>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006022:	d108      	bne.n	8006036 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800602a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a27      	ldr	r2, [pc, #156]	@ (80060d8 <TIM_Base_SetConfig+0xd4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00b      	beq.n	8006056 <TIM_Base_SetConfig+0x52>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006044:	d007      	beq.n	8006056 <TIM_Base_SetConfig+0x52>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a24      	ldr	r2, [pc, #144]	@ (80060dc <TIM_Base_SetConfig+0xd8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_Base_SetConfig+0x52>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a23      	ldr	r2, [pc, #140]	@ (80060e0 <TIM_Base_SetConfig+0xdc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800605c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a12      	ldr	r2, [pc, #72]	@ (80060d8 <TIM_Base_SetConfig+0xd4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d007      	beq.n	80060a4 <TIM_Base_SetConfig+0xa0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a11      	ldr	r2, [pc, #68]	@ (80060dc <TIM_Base_SetConfig+0xd8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_Base_SetConfig+0xa0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a10      	ldr	r2, [pc, #64]	@ (80060e0 <TIM_Base_SetConfig+0xdc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d103      	bne.n	80060ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d105      	bne.n	80060ca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	611a      	str	r2, [r3, #16]
  }
}
 80060ca:	bf00      	nop
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800

080060e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f023 0201 	bic.w	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0303 	bic.w	r3, r3, #3
 800611e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 0302 	bic.w	r3, r3, #2
 8006130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a24      	ldr	r2, [pc, #144]	@ (80061d0 <TIM_OC1_SetConfig+0xec>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <TIM_OC1_SetConfig+0x70>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a23      	ldr	r2, [pc, #140]	@ (80061d4 <TIM_OC1_SetConfig+0xf0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_OC1_SetConfig+0x70>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a22      	ldr	r2, [pc, #136]	@ (80061d8 <TIM_OC1_SetConfig+0xf4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d10c      	bne.n	800616e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 0308 	bic.w	r3, r3, #8
 800615a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f023 0304 	bic.w	r3, r3, #4
 800616c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a17      	ldr	r2, [pc, #92]	@ (80061d0 <TIM_OC1_SetConfig+0xec>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <TIM_OC1_SetConfig+0xa2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a17      	ldr	r2, [pc, #92]	@ (80061d8 <TIM_OC1_SetConfig+0xf4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_OC1_SetConfig+0xa2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a14      	ldr	r2, [pc, #80]	@ (80061d4 <TIM_OC1_SetConfig+0xf0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d111      	bne.n	80061aa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800618c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	621a      	str	r2, [r3, #32]
}
 80061c4:	bf00      	nop
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40014800 	.word	0x40014800
 80061d8:	40014400 	.word	0x40014400

080061dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f023 0210 	bic.w	r2, r3, #16
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800620a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0320 	bic.w	r3, r3, #32
 800622a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a22      	ldr	r2, [pc, #136]	@ (80062c4 <TIM_OC2_SetConfig+0xe8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10d      	bne.n	800625c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800625a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a19      	ldr	r2, [pc, #100]	@ (80062c4 <TIM_OC2_SetConfig+0xe8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d007      	beq.n	8006274 <TIM_OC2_SetConfig+0x98>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a18      	ldr	r2, [pc, #96]	@ (80062c8 <TIM_OC2_SetConfig+0xec>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC2_SetConfig+0x98>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a17      	ldr	r2, [pc, #92]	@ (80062cc <TIM_OC2_SetConfig+0xf0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d113      	bne.n	800629c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800627a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40012c00 	.word	0x40012c00
 80062c8:	40014400 	.word	0x40014400
 80062cc:	40014800 	.word	0x40014800

080062d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800631c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a21      	ldr	r2, [pc, #132]	@ (80063b4 <TIM_OC3_SetConfig+0xe4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10d      	bne.n	800634e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800634c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a18      	ldr	r2, [pc, #96]	@ (80063b4 <TIM_OC3_SetConfig+0xe4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d007      	beq.n	8006366 <TIM_OC3_SetConfig+0x96>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a17      	ldr	r2, [pc, #92]	@ (80063b8 <TIM_OC3_SetConfig+0xe8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC3_SetConfig+0x96>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a16      	ldr	r2, [pc, #88]	@ (80063bc <TIM_OC3_SetConfig+0xec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d113      	bne.n	800638e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800636c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	621a      	str	r2, [r3, #32]
}
 80063a8:	bf00      	nop
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40014400 	.word	0x40014400
 80063bc:	40014800 	.word	0x40014800

080063c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a14      	ldr	r2, [pc, #80]	@ (8006470 <TIM_OC4_SetConfig+0xb0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d007      	beq.n	8006434 <TIM_OC4_SetConfig+0x74>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a13      	ldr	r2, [pc, #76]	@ (8006474 <TIM_OC4_SetConfig+0xb4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d003      	beq.n	8006434 <TIM_OC4_SetConfig+0x74>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a12      	ldr	r2, [pc, #72]	@ (8006478 <TIM_OC4_SetConfig+0xb8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d109      	bne.n	8006448 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800643a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	019b      	lsls	r3, r3, #6
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	621a      	str	r2, [r3, #32]
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40012c00 	.word	0x40012c00
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800

0800647c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80064c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a13      	ldr	r2, [pc, #76]	@ (8006520 <TIM_OC5_SetConfig+0xa4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d007      	beq.n	80064e6 <TIM_OC5_SetConfig+0x6a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a12      	ldr	r2, [pc, #72]	@ (8006524 <TIM_OC5_SetConfig+0xa8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <TIM_OC5_SetConfig+0x6a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a11      	ldr	r2, [pc, #68]	@ (8006528 <TIM_OC5_SetConfig+0xac>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d109      	bne.n	80064fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	621a      	str	r2, [r3, #32]
}
 8006514:	bf00      	nop
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	40012c00 	.word	0x40012c00
 8006524:	40014400 	.word	0x40014400
 8006528:	40014800 	.word	0x40014800

0800652c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800655a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800655e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	051b      	lsls	r3, r3, #20
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a14      	ldr	r2, [pc, #80]	@ (80065d4 <TIM_OC6_SetConfig+0xa8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d007      	beq.n	8006598 <TIM_OC6_SetConfig+0x6c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a13      	ldr	r2, [pc, #76]	@ (80065d8 <TIM_OC6_SetConfig+0xac>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC6_SetConfig+0x6c>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a12      	ldr	r2, [pc, #72]	@ (80065dc <TIM_OC6_SetConfig+0xb0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d109      	bne.n	80065ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800659e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	029b      	lsls	r3, r3, #10
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40012c00 	.word	0x40012c00
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800

080065e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f023 0201 	bic.w	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800660a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f023 030a 	bic.w	r3, r3, #10
 800661c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800663e:	b480      	push	{r7}
 8006640:	b087      	sub	sp, #28
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f023 0210 	bic.w	r2, r3, #16
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	031b      	lsls	r3, r3, #12
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800667a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	bf00      	nop
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80066b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	f043 0307 	orr.w	r3, r3, #7
 80066c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	609a      	str	r2, [r3, #8]
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	021a      	lsls	r2, r3, #8
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4313      	orrs	r3, r2
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	609a      	str	r2, [r3, #8]
}
 800670c:	bf00      	nop
 800670e:	371c      	adds	r7, #28
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 031f 	and.w	r3, r3, #31
 800672a:	2201      	movs	r2, #1
 800672c:	fa02 f303 	lsl.w	r3, r2, r3
 8006730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a1a      	ldr	r2, [r3, #32]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	43db      	mvns	r3, r3
 800673a:	401a      	ands	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f003 031f 	and.w	r3, r3, #31
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	fa01 f303 	lsl.w	r3, r1, r3
 8006750:	431a      	orrs	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	621a      	str	r2, [r3, #32]
}
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
	...

08006764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006778:	2302      	movs	r3, #2
 800677a:	e04a      	b.n	8006812 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d108      	bne.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80067ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a12      	ldr	r2, [pc, #72]	@ (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e4:	d10c      	bne.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40012c00 	.word	0x40012c00

08006824 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800683c:	2302      	movs	r3, #2
 800683e:	e06e      	b.n	800691e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	041b      	lsls	r3, r3, #16
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a17      	ldr	r2, [pc, #92]	@ (800692c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d11c      	bne.n	800690c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068dc:	051b      	lsls	r3, r3, #20
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40012c00 	.word	0x40012c00

08006930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <LL_RCC_GetUSARTClockSource>:
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006978:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4013      	ands	r3, r2
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <LL_RCC_GetLPUARTClockSource>:
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006998:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4013      	ands	r3, r2
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e042      	b.n	8006a44 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d106      	bne.n	80069d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f83b 	bl	8006a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2224      	movs	r2, #36	@ 0x24
 80069da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0201 	bic.w	r2, r2, #1
 80069ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa5a 	bl	8006eb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f82f 	bl	8006a60 <UART_SetConfig>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e01b      	b.n	8006a44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fad9 	bl	8006ff4 <UART_CheckIdleState>
 8006a42:	4603      	mov	r3, r0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a64:	b08c      	sub	sp, #48	@ 0x30
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4baf      	ldr	r3, [pc, #700]	@ (8006d4c <UART_SetConfig+0x2ec>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	6812      	ldr	r2, [r2, #0]
 8006a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4aa4      	ldr	r2, [pc, #656]	@ (8006d50 <UART_SetConfig+0x2f0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d004      	beq.n	8006acc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006ad6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aea:	f023 010f 	bic.w	r1, r3, #15
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a95      	ldr	r2, [pc, #596]	@ (8006d54 <UART_SetConfig+0x2f4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d125      	bne.n	8006b50 <UART_SetConfig+0xf0>
 8006b04:	2003      	movs	r0, #3
 8006b06:	f7ff ff31 	bl	800696c <LL_RCC_GetUSARTClockSource>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d81b      	bhi.n	8006b48 <UART_SetConfig+0xe8>
 8006b10:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <UART_SetConfig+0xb8>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006b39 	.word	0x08006b39
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006b41 	.word	0x08006b41
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2e:	e042      	b.n	8006bb6 <UART_SetConfig+0x156>
 8006b30:	2302      	movs	r3, #2
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b36:	e03e      	b.n	8006bb6 <UART_SetConfig+0x156>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	e03a      	b.n	8006bb6 <UART_SetConfig+0x156>
 8006b40:	2308      	movs	r3, #8
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b46:	e036      	b.n	8006bb6 <UART_SetConfig+0x156>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e032      	b.n	8006bb6 <UART_SetConfig+0x156>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a7e      	ldr	r2, [pc, #504]	@ (8006d50 <UART_SetConfig+0x2f0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d12a      	bne.n	8006bb0 <UART_SetConfig+0x150>
 8006b5a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006b5e:	f7ff ff15 	bl	800698c <LL_RCC_GetLPUARTClockSource>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b68:	d01a      	beq.n	8006ba0 <UART_SetConfig+0x140>
 8006b6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b6e:	d81b      	bhi.n	8006ba8 <UART_SetConfig+0x148>
 8006b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b74:	d00c      	beq.n	8006b90 <UART_SetConfig+0x130>
 8006b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b7a:	d815      	bhi.n	8006ba8 <UART_SetConfig+0x148>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <UART_SetConfig+0x128>
 8006b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b84:	d008      	beq.n	8006b98 <UART_SetConfig+0x138>
 8006b86:	e00f      	b.n	8006ba8 <UART_SetConfig+0x148>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8e:	e012      	b.n	8006bb6 <UART_SetConfig+0x156>
 8006b90:	2302      	movs	r3, #2
 8006b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b96:	e00e      	b.n	8006bb6 <UART_SetConfig+0x156>
 8006b98:	2304      	movs	r3, #4
 8006b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9e:	e00a      	b.n	8006bb6 <UART_SetConfig+0x156>
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	e006      	b.n	8006bb6 <UART_SetConfig+0x156>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e002      	b.n	8006bb6 <UART_SetConfig+0x156>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a65      	ldr	r2, [pc, #404]	@ (8006d50 <UART_SetConfig+0x2f0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	f040 8097 	bne.w	8006cf0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d823      	bhi.n	8006c12 <UART_SetConfig+0x1b2>
 8006bca:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <UART_SetConfig+0x170>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006bf5 	.word	0x08006bf5
 8006bd4:	08006c13 	.word	0x08006c13
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006c13 	.word	0x08006c13
 8006be0:	08006c03 	.word	0x08006c03
 8006be4:	08006c13 	.word	0x08006c13
 8006be8:	08006c13 	.word	0x08006c13
 8006bec:	08006c13 	.word	0x08006c13
 8006bf0:	08006c0b 	.word	0x08006c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf4:	f7fe f812 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8006bf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bfa:	e010      	b.n	8006c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bfc:	4b56      	ldr	r3, [pc, #344]	@ (8006d58 <UART_SetConfig+0x2f8>)
 8006bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c00:	e00d      	b.n	8006c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c02:	f7fd ff8b 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8006c06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c08:	e009      	b.n	8006c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c10:	e005      	b.n	8006c1e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 812b 	beq.w	8006e7c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8006d5c <UART_SetConfig+0x2fc>)
 8006c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	4413      	add	r3, r2
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d305      	bcc.n	8006c56 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d903      	bls.n	8006c5e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c5c:	e10e      	b.n	8006e7c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	2200      	movs	r2, #0
 8006c62:	60bb      	str	r3, [r7, #8]
 8006c64:	60fa      	str	r2, [r7, #12]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6a:	4a3c      	ldr	r2, [pc, #240]	@ (8006d5c <UART_SetConfig+0x2fc>)
 8006c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2200      	movs	r2, #0
 8006c74:	603b      	str	r3, [r7, #0]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c80:	f7f9 ff3a 	bl	8000af8 <__aeabi_uldivmod>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	020b      	lsls	r3, r1, #8
 8006c96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c9a:	0202      	lsls	r2, r0, #8
 8006c9c:	6979      	ldr	r1, [r7, #20]
 8006c9e:	6849      	ldr	r1, [r1, #4]
 8006ca0:	0849      	lsrs	r1, r1, #1
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	eb12 0804 	adds.w	r8, r2, r4
 8006cac:	eb43 0905 	adc.w	r9, r3, r5
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	469a      	mov	sl, r3
 8006cb8:	4693      	mov	fp, r2
 8006cba:	4652      	mov	r2, sl
 8006cbc:	465b      	mov	r3, fp
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	f7f9 ff19 	bl	8000af8 <__aeabi_uldivmod>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4613      	mov	r3, r2
 8006ccc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cd4:	d308      	bcc.n	8006ce8 <UART_SetConfig+0x288>
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cdc:	d204      	bcs.n	8006ce8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6a3a      	ldr	r2, [r7, #32]
 8006ce4:	60da      	str	r2, [r3, #12]
 8006ce6:	e0c9      	b.n	8006e7c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cee:	e0c5      	b.n	8006e7c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cf8:	d16d      	bne.n	8006dd6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	2b07      	cmp	r3, #7
 8006d02:	d82d      	bhi.n	8006d60 <UART_SetConfig+0x300>
 8006d04:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <UART_SetConfig+0x2ac>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d2d 	.word	0x08006d2d
 8006d10:	08006d35 	.word	0x08006d35
 8006d14:	08006d61 	.word	0x08006d61
 8006d18:	08006d3b 	.word	0x08006d3b
 8006d1c:	08006d61 	.word	0x08006d61
 8006d20:	08006d61 	.word	0x08006d61
 8006d24:	08006d61 	.word	0x08006d61
 8006d28:	08006d43 	.word	0x08006d43
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d2c:	f7fd ff8c 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8006d30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d32:	e01b      	b.n	8006d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d34:	4b08      	ldr	r3, [pc, #32]	@ (8006d58 <UART_SetConfig+0x2f8>)
 8006d36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d38:	e018      	b.n	8006d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d3a:	f7fd feef 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8006d3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d40:	e014      	b.n	8006d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d48:	e010      	b.n	8006d6c <UART_SetConfig+0x30c>
 8006d4a:	bf00      	nop
 8006d4c:	cfff69f3 	.word	0xcfff69f3
 8006d50:	40008000 	.word	0x40008000
 8006d54:	40013800 	.word	0x40013800
 8006d58:	00f42400 	.word	0x00f42400
 8006d5c:	08008754 	.word	0x08008754
      default:
        pclk = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8084 	beq.w	8006e7c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d78:	4a4b      	ldr	r2, [pc, #300]	@ (8006ea8 <UART_SetConfig+0x448>)
 8006d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d86:	005a      	lsls	r2, r3, #1
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	441a      	add	r2, r3
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d98:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	2b0f      	cmp	r3, #15
 8006d9e:	d916      	bls.n	8006dce <UART_SetConfig+0x36e>
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da6:	d212      	bcs.n	8006dce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f023 030f 	bic.w	r3, r3, #15
 8006db0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	8bfb      	ldrh	r3, [r7, #30]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	8bfa      	ldrh	r2, [r7, #30]
 8006dca:	60da      	str	r2, [r3, #12]
 8006dcc:	e056      	b.n	8006e7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006dd4:	e052      	b.n	8006e7c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	2b07      	cmp	r3, #7
 8006dde:	d822      	bhi.n	8006e26 <UART_SetConfig+0x3c6>
 8006de0:	a201      	add	r2, pc, #4	@ (adr r2, 8006de8 <UART_SetConfig+0x388>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006e09 	.word	0x08006e09
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	08006e27 	.word	0x08006e27
 8006df4:	08006e17 	.word	0x08006e17
 8006df8:	08006e27 	.word	0x08006e27
 8006dfc:	08006e27 	.word	0x08006e27
 8006e00:	08006e27 	.word	0x08006e27
 8006e04:	08006e1f 	.word	0x08006e1f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e08:	f7fd ff1e 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8006e0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e0e:	e010      	b.n	8006e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e10:	4b26      	ldr	r3, [pc, #152]	@ (8006eac <UART_SetConfig+0x44c>)
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e14:	e00d      	b.n	8006e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e16:	f7fd fe81 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8006e1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e1c:	e009      	b.n	8006e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e24:	e005      	b.n	8006e32 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e30:	bf00      	nop
    }

    if (pclk != 0U)
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d021      	beq.n	8006e7c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea8 <UART_SetConfig+0x448>)
 8006e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e42:	461a      	mov	r2, r3
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	441a      	add	r2, r3
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	2b0f      	cmp	r3, #15
 8006e60:	d909      	bls.n	8006e76 <UART_SetConfig+0x416>
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e68:	d205      	bcs.n	8006e76 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60da      	str	r2, [r3, #12]
 8006e74:	e002      	b.n	8006e7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2200      	movs	r2, #0
 8006e96:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3730      	adds	r7, #48	@ 0x30
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea6:	bf00      	nop
 8006ea8:	08008754 	.word	0x08008754
 8006eac:	00f42400 	.word	0x00f42400

08006eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fae:	d10a      	bne.n	8006fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	605a      	str	r2, [r3, #4]
  }
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b098      	sub	sp, #96	@ 0x60
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007004:	f7fb fb38 	bl	8002678 <HAL_GetTick>
 8007008:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b08      	cmp	r3, #8
 8007016:	d12f      	bne.n	8007078 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007020:	2200      	movs	r2, #0
 8007022:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f88e 	bl	8007148 <UART_WaitOnFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d022      	beq.n	8007078 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007046:	653b      	str	r3, [r7, #80]	@ 0x50
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007050:	647b      	str	r3, [r7, #68]	@ 0x44
 8007052:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800705e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e6      	bne.n	8007032 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e063      	b.n	8007140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b04      	cmp	r3, #4
 8007084:	d149      	bne.n	800711a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007086:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800708e:	2200      	movs	r2, #0
 8007090:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f857 	bl	8007148 <UART_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d03c      	beq.n	800711a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	623b      	str	r3, [r7, #32]
   return(result);
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070be:	633b      	str	r3, [r7, #48]	@ 0x30
 80070c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e6      	bne.n	80070a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f2:	61fa      	str	r2, [r7, #28]
 80070f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	69b9      	ldr	r1, [r7, #24]
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e5      	bne.n	80070d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e012      	b.n	8007140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3758      	adds	r7, #88	@ 0x58
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	4613      	mov	r3, r2
 8007156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007158:	e04f      	b.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d04b      	beq.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007162:	f7fb fa89 	bl	8002678 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	429a      	cmp	r2, r3
 8007170:	d302      	bcc.n	8007178 <UART_WaitOnFlagUntilTimeout+0x30>
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e04e      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	d037      	beq.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b80      	cmp	r3, #128	@ 0x80
 800718e:	d034      	beq.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b40      	cmp	r3, #64	@ 0x40
 8007194:	d031      	beq.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d110      	bne.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2208      	movs	r2, #8
 80071aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f838 	bl	8007222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2208      	movs	r2, #8
 80071b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e029      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071d4:	d111      	bne.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f81e 	bl	8007222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e00f      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4013      	ands	r3, r2
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	429a      	cmp	r2, r3
 8007208:	bf0c      	ite	eq
 800720a:	2301      	moveq	r3, #1
 800720c:	2300      	movne	r3, #0
 800720e:	b2db      	uxtb	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	429a      	cmp	r2, r3
 8007216:	d0a0      	beq.n	800715a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007222:	b480      	push	{r7}
 8007224:	b095      	sub	sp, #84	@ 0x54
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800723e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007248:	643b      	str	r3, [r7, #64]	@ 0x40
 800724a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800724e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e6      	bne.n	800722a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	61fb      	str	r3, [r7, #28]
   return(result);
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007272:	f023 0301 	bic.w	r3, r3, #1
 8007276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e3      	bne.n	800725c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007298:	2b01      	cmp	r3, #1
 800729a:	d118      	bne.n	80072ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f023 0310 	bic.w	r3, r3, #16
 80072b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6979      	ldr	r1, [r7, #20]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	613b      	str	r3, [r7, #16]
   return(result);
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e6      	bne.n	800729c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80072e2:	bf00      	nop
 80072e4:	3754      	adds	r7, #84	@ 0x54
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b085      	sub	sp, #20
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80072f6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80072fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	b29b      	uxth	r3, r3
 8007308:	43db      	mvns	r3, r3
 800730a:	b29b      	uxth	r3, r3
 800730c:	4013      	ands	r3, r2
 800730e:	b29a      	uxth	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	1d3b      	adds	r3, r7, #4
 800732e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <std>:
 8007360:	2300      	movs	r3, #0
 8007362:	b510      	push	{r4, lr}
 8007364:	4604      	mov	r4, r0
 8007366:	e9c0 3300 	strd	r3, r3, [r0]
 800736a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800736e:	6083      	str	r3, [r0, #8]
 8007370:	8181      	strh	r1, [r0, #12]
 8007372:	6643      	str	r3, [r0, #100]	@ 0x64
 8007374:	81c2      	strh	r2, [r0, #14]
 8007376:	6183      	str	r3, [r0, #24]
 8007378:	4619      	mov	r1, r3
 800737a:	2208      	movs	r2, #8
 800737c:	305c      	adds	r0, #92	@ 0x5c
 800737e:	f000 f9e7 	bl	8007750 <memset>
 8007382:	4b0d      	ldr	r3, [pc, #52]	@ (80073b8 <std+0x58>)
 8007384:	6263      	str	r3, [r4, #36]	@ 0x24
 8007386:	4b0d      	ldr	r3, [pc, #52]	@ (80073bc <std+0x5c>)
 8007388:	62a3      	str	r3, [r4, #40]	@ 0x28
 800738a:	4b0d      	ldr	r3, [pc, #52]	@ (80073c0 <std+0x60>)
 800738c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800738e:	4b0d      	ldr	r3, [pc, #52]	@ (80073c4 <std+0x64>)
 8007390:	6323      	str	r3, [r4, #48]	@ 0x30
 8007392:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <std+0x68>)
 8007394:	6224      	str	r4, [r4, #32]
 8007396:	429c      	cmp	r4, r3
 8007398:	d006      	beq.n	80073a8 <std+0x48>
 800739a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800739e:	4294      	cmp	r4, r2
 80073a0:	d002      	beq.n	80073a8 <std+0x48>
 80073a2:	33d0      	adds	r3, #208	@ 0xd0
 80073a4:	429c      	cmp	r4, r3
 80073a6:	d105      	bne.n	80073b4 <std+0x54>
 80073a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b0:	f000 ba46 	b.w	8007840 <__retarget_lock_init_recursive>
 80073b4:	bd10      	pop	{r4, pc}
 80073b6:	bf00      	nop
 80073b8:	080075a1 	.word	0x080075a1
 80073bc:	080075c3 	.word	0x080075c3
 80073c0:	080075fb 	.word	0x080075fb
 80073c4:	0800761f 	.word	0x0800761f
 80073c8:	200005ac 	.word	0x200005ac

080073cc <stdio_exit_handler>:
 80073cc:	4a02      	ldr	r2, [pc, #8]	@ (80073d8 <stdio_exit_handler+0xc>)
 80073ce:	4903      	ldr	r1, [pc, #12]	@ (80073dc <stdio_exit_handler+0x10>)
 80073d0:	4803      	ldr	r0, [pc, #12]	@ (80073e0 <stdio_exit_handler+0x14>)
 80073d2:	f000 b869 	b.w	80074a8 <_fwalk_sglue>
 80073d6:	bf00      	nop
 80073d8:	20000030 	.word	0x20000030
 80073dc:	08007b41 	.word	0x08007b41
 80073e0:	20000040 	.word	0x20000040

080073e4 <cleanup_stdio>:
 80073e4:	6841      	ldr	r1, [r0, #4]
 80073e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007418 <cleanup_stdio+0x34>)
 80073e8:	4299      	cmp	r1, r3
 80073ea:	b510      	push	{r4, lr}
 80073ec:	4604      	mov	r4, r0
 80073ee:	d001      	beq.n	80073f4 <cleanup_stdio+0x10>
 80073f0:	f000 fba6 	bl	8007b40 <_fflush_r>
 80073f4:	68a1      	ldr	r1, [r4, #8]
 80073f6:	4b09      	ldr	r3, [pc, #36]	@ (800741c <cleanup_stdio+0x38>)
 80073f8:	4299      	cmp	r1, r3
 80073fa:	d002      	beq.n	8007402 <cleanup_stdio+0x1e>
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 fb9f 	bl	8007b40 <_fflush_r>
 8007402:	68e1      	ldr	r1, [r4, #12]
 8007404:	4b06      	ldr	r3, [pc, #24]	@ (8007420 <cleanup_stdio+0x3c>)
 8007406:	4299      	cmp	r1, r3
 8007408:	d004      	beq.n	8007414 <cleanup_stdio+0x30>
 800740a:	4620      	mov	r0, r4
 800740c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007410:	f000 bb96 	b.w	8007b40 <_fflush_r>
 8007414:	bd10      	pop	{r4, pc}
 8007416:	bf00      	nop
 8007418:	200005ac 	.word	0x200005ac
 800741c:	20000614 	.word	0x20000614
 8007420:	2000067c 	.word	0x2000067c

08007424 <global_stdio_init.part.0>:
 8007424:	b510      	push	{r4, lr}
 8007426:	4b0b      	ldr	r3, [pc, #44]	@ (8007454 <global_stdio_init.part.0+0x30>)
 8007428:	4c0b      	ldr	r4, [pc, #44]	@ (8007458 <global_stdio_init.part.0+0x34>)
 800742a:	4a0c      	ldr	r2, [pc, #48]	@ (800745c <global_stdio_init.part.0+0x38>)
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	4620      	mov	r0, r4
 8007430:	2200      	movs	r2, #0
 8007432:	2104      	movs	r1, #4
 8007434:	f7ff ff94 	bl	8007360 <std>
 8007438:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800743c:	2201      	movs	r2, #1
 800743e:	2109      	movs	r1, #9
 8007440:	f7ff ff8e 	bl	8007360 <std>
 8007444:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007448:	2202      	movs	r2, #2
 800744a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800744e:	2112      	movs	r1, #18
 8007450:	f7ff bf86 	b.w	8007360 <std>
 8007454:	200006e4 	.word	0x200006e4
 8007458:	200005ac 	.word	0x200005ac
 800745c:	080073cd 	.word	0x080073cd

08007460 <__sfp_lock_acquire>:
 8007460:	4801      	ldr	r0, [pc, #4]	@ (8007468 <__sfp_lock_acquire+0x8>)
 8007462:	f000 b9ee 	b.w	8007842 <__retarget_lock_acquire_recursive>
 8007466:	bf00      	nop
 8007468:	200006ed 	.word	0x200006ed

0800746c <__sfp_lock_release>:
 800746c:	4801      	ldr	r0, [pc, #4]	@ (8007474 <__sfp_lock_release+0x8>)
 800746e:	f000 b9e9 	b.w	8007844 <__retarget_lock_release_recursive>
 8007472:	bf00      	nop
 8007474:	200006ed 	.word	0x200006ed

08007478 <__sinit>:
 8007478:	b510      	push	{r4, lr}
 800747a:	4604      	mov	r4, r0
 800747c:	f7ff fff0 	bl	8007460 <__sfp_lock_acquire>
 8007480:	6a23      	ldr	r3, [r4, #32]
 8007482:	b11b      	cbz	r3, 800748c <__sinit+0x14>
 8007484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007488:	f7ff bff0 	b.w	800746c <__sfp_lock_release>
 800748c:	4b04      	ldr	r3, [pc, #16]	@ (80074a0 <__sinit+0x28>)
 800748e:	6223      	str	r3, [r4, #32]
 8007490:	4b04      	ldr	r3, [pc, #16]	@ (80074a4 <__sinit+0x2c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1f5      	bne.n	8007484 <__sinit+0xc>
 8007498:	f7ff ffc4 	bl	8007424 <global_stdio_init.part.0>
 800749c:	e7f2      	b.n	8007484 <__sinit+0xc>
 800749e:	bf00      	nop
 80074a0:	080073e5 	.word	0x080073e5
 80074a4:	200006e4 	.word	0x200006e4

080074a8 <_fwalk_sglue>:
 80074a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ac:	4607      	mov	r7, r0
 80074ae:	4688      	mov	r8, r1
 80074b0:	4614      	mov	r4, r2
 80074b2:	2600      	movs	r6, #0
 80074b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074b8:	f1b9 0901 	subs.w	r9, r9, #1
 80074bc:	d505      	bpl.n	80074ca <_fwalk_sglue+0x22>
 80074be:	6824      	ldr	r4, [r4, #0]
 80074c0:	2c00      	cmp	r4, #0
 80074c2:	d1f7      	bne.n	80074b4 <_fwalk_sglue+0xc>
 80074c4:	4630      	mov	r0, r6
 80074c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ca:	89ab      	ldrh	r3, [r5, #12]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d907      	bls.n	80074e0 <_fwalk_sglue+0x38>
 80074d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074d4:	3301      	adds	r3, #1
 80074d6:	d003      	beq.n	80074e0 <_fwalk_sglue+0x38>
 80074d8:	4629      	mov	r1, r5
 80074da:	4638      	mov	r0, r7
 80074dc:	47c0      	blx	r8
 80074de:	4306      	orrs	r6, r0
 80074e0:	3568      	adds	r5, #104	@ 0x68
 80074e2:	e7e9      	b.n	80074b8 <_fwalk_sglue+0x10>

080074e4 <_puts_r>:
 80074e4:	6a03      	ldr	r3, [r0, #32]
 80074e6:	b570      	push	{r4, r5, r6, lr}
 80074e8:	6884      	ldr	r4, [r0, #8]
 80074ea:	4605      	mov	r5, r0
 80074ec:	460e      	mov	r6, r1
 80074ee:	b90b      	cbnz	r3, 80074f4 <_puts_r+0x10>
 80074f0:	f7ff ffc2 	bl	8007478 <__sinit>
 80074f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074f6:	07db      	lsls	r3, r3, #31
 80074f8:	d405      	bmi.n	8007506 <_puts_r+0x22>
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	0598      	lsls	r0, r3, #22
 80074fe:	d402      	bmi.n	8007506 <_puts_r+0x22>
 8007500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007502:	f000 f99e 	bl	8007842 <__retarget_lock_acquire_recursive>
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	0719      	lsls	r1, r3, #28
 800750a:	d502      	bpl.n	8007512 <_puts_r+0x2e>
 800750c:	6923      	ldr	r3, [r4, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d135      	bne.n	800757e <_puts_r+0x9a>
 8007512:	4621      	mov	r1, r4
 8007514:	4628      	mov	r0, r5
 8007516:	f000 f8c5 	bl	80076a4 <__swsetup_r>
 800751a:	b380      	cbz	r0, 800757e <_puts_r+0x9a>
 800751c:	f04f 35ff 	mov.w	r5, #4294967295
 8007520:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007522:	07da      	lsls	r2, r3, #31
 8007524:	d405      	bmi.n	8007532 <_puts_r+0x4e>
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	059b      	lsls	r3, r3, #22
 800752a:	d402      	bmi.n	8007532 <_puts_r+0x4e>
 800752c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800752e:	f000 f989 	bl	8007844 <__retarget_lock_release_recursive>
 8007532:	4628      	mov	r0, r5
 8007534:	bd70      	pop	{r4, r5, r6, pc}
 8007536:	2b00      	cmp	r3, #0
 8007538:	da04      	bge.n	8007544 <_puts_r+0x60>
 800753a:	69a2      	ldr	r2, [r4, #24]
 800753c:	429a      	cmp	r2, r3
 800753e:	dc17      	bgt.n	8007570 <_puts_r+0x8c>
 8007540:	290a      	cmp	r1, #10
 8007542:	d015      	beq.n	8007570 <_puts_r+0x8c>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	6022      	str	r2, [r4, #0]
 800754a:	7019      	strb	r1, [r3, #0]
 800754c:	68a3      	ldr	r3, [r4, #8]
 800754e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007552:	3b01      	subs	r3, #1
 8007554:	60a3      	str	r3, [r4, #8]
 8007556:	2900      	cmp	r1, #0
 8007558:	d1ed      	bne.n	8007536 <_puts_r+0x52>
 800755a:	2b00      	cmp	r3, #0
 800755c:	da11      	bge.n	8007582 <_puts_r+0x9e>
 800755e:	4622      	mov	r2, r4
 8007560:	210a      	movs	r1, #10
 8007562:	4628      	mov	r0, r5
 8007564:	f000 f85f 	bl	8007626 <__swbuf_r>
 8007568:	3001      	adds	r0, #1
 800756a:	d0d7      	beq.n	800751c <_puts_r+0x38>
 800756c:	250a      	movs	r5, #10
 800756e:	e7d7      	b.n	8007520 <_puts_r+0x3c>
 8007570:	4622      	mov	r2, r4
 8007572:	4628      	mov	r0, r5
 8007574:	f000 f857 	bl	8007626 <__swbuf_r>
 8007578:	3001      	adds	r0, #1
 800757a:	d1e7      	bne.n	800754c <_puts_r+0x68>
 800757c:	e7ce      	b.n	800751c <_puts_r+0x38>
 800757e:	3e01      	subs	r6, #1
 8007580:	e7e4      	b.n	800754c <_puts_r+0x68>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	6022      	str	r2, [r4, #0]
 8007588:	220a      	movs	r2, #10
 800758a:	701a      	strb	r2, [r3, #0]
 800758c:	e7ee      	b.n	800756c <_puts_r+0x88>
	...

08007590 <puts>:
 8007590:	4b02      	ldr	r3, [pc, #8]	@ (800759c <puts+0xc>)
 8007592:	4601      	mov	r1, r0
 8007594:	6818      	ldr	r0, [r3, #0]
 8007596:	f7ff bfa5 	b.w	80074e4 <_puts_r>
 800759a:	bf00      	nop
 800759c:	2000003c 	.word	0x2000003c

080075a0 <__sread>:
 80075a0:	b510      	push	{r4, lr}
 80075a2:	460c      	mov	r4, r1
 80075a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a8:	f000 f8fc 	bl	80077a4 <_read_r>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	bfab      	itete	ge
 80075b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80075b2:	89a3      	ldrhlt	r3, [r4, #12]
 80075b4:	181b      	addge	r3, r3, r0
 80075b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075ba:	bfac      	ite	ge
 80075bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075be:	81a3      	strhlt	r3, [r4, #12]
 80075c0:	bd10      	pop	{r4, pc}

080075c2 <__swrite>:
 80075c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c6:	461f      	mov	r7, r3
 80075c8:	898b      	ldrh	r3, [r1, #12]
 80075ca:	05db      	lsls	r3, r3, #23
 80075cc:	4605      	mov	r5, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	4616      	mov	r6, r2
 80075d2:	d505      	bpl.n	80075e0 <__swrite+0x1e>
 80075d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d8:	2302      	movs	r3, #2
 80075da:	2200      	movs	r2, #0
 80075dc:	f000 f8d0 	bl	8007780 <_lseek_r>
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075ea:	81a3      	strh	r3, [r4, #12]
 80075ec:	4632      	mov	r2, r6
 80075ee:	463b      	mov	r3, r7
 80075f0:	4628      	mov	r0, r5
 80075f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075f6:	f000 b8e7 	b.w	80077c8 <_write_r>

080075fa <__sseek>:
 80075fa:	b510      	push	{r4, lr}
 80075fc:	460c      	mov	r4, r1
 80075fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007602:	f000 f8bd 	bl	8007780 <_lseek_r>
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	bf15      	itete	ne
 800760c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800760e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007612:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007616:	81a3      	strheq	r3, [r4, #12]
 8007618:	bf18      	it	ne
 800761a:	81a3      	strhne	r3, [r4, #12]
 800761c:	bd10      	pop	{r4, pc}

0800761e <__sclose>:
 800761e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007622:	f000 b89d 	b.w	8007760 <_close_r>

08007626 <__swbuf_r>:
 8007626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007628:	460e      	mov	r6, r1
 800762a:	4614      	mov	r4, r2
 800762c:	4605      	mov	r5, r0
 800762e:	b118      	cbz	r0, 8007638 <__swbuf_r+0x12>
 8007630:	6a03      	ldr	r3, [r0, #32]
 8007632:	b90b      	cbnz	r3, 8007638 <__swbuf_r+0x12>
 8007634:	f7ff ff20 	bl	8007478 <__sinit>
 8007638:	69a3      	ldr	r3, [r4, #24]
 800763a:	60a3      	str	r3, [r4, #8]
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	071a      	lsls	r2, r3, #28
 8007640:	d501      	bpl.n	8007646 <__swbuf_r+0x20>
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	b943      	cbnz	r3, 8007658 <__swbuf_r+0x32>
 8007646:	4621      	mov	r1, r4
 8007648:	4628      	mov	r0, r5
 800764a:	f000 f82b 	bl	80076a4 <__swsetup_r>
 800764e:	b118      	cbz	r0, 8007658 <__swbuf_r+0x32>
 8007650:	f04f 37ff 	mov.w	r7, #4294967295
 8007654:	4638      	mov	r0, r7
 8007656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	6922      	ldr	r2, [r4, #16]
 800765c:	1a98      	subs	r0, r3, r2
 800765e:	6963      	ldr	r3, [r4, #20]
 8007660:	b2f6      	uxtb	r6, r6
 8007662:	4283      	cmp	r3, r0
 8007664:	4637      	mov	r7, r6
 8007666:	dc05      	bgt.n	8007674 <__swbuf_r+0x4e>
 8007668:	4621      	mov	r1, r4
 800766a:	4628      	mov	r0, r5
 800766c:	f000 fa68 	bl	8007b40 <_fflush_r>
 8007670:	2800      	cmp	r0, #0
 8007672:	d1ed      	bne.n	8007650 <__swbuf_r+0x2a>
 8007674:	68a3      	ldr	r3, [r4, #8]
 8007676:	3b01      	subs	r3, #1
 8007678:	60a3      	str	r3, [r4, #8]
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	6022      	str	r2, [r4, #0]
 8007680:	701e      	strb	r6, [r3, #0]
 8007682:	6962      	ldr	r2, [r4, #20]
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	429a      	cmp	r2, r3
 8007688:	d004      	beq.n	8007694 <__swbuf_r+0x6e>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	07db      	lsls	r3, r3, #31
 800768e:	d5e1      	bpl.n	8007654 <__swbuf_r+0x2e>
 8007690:	2e0a      	cmp	r6, #10
 8007692:	d1df      	bne.n	8007654 <__swbuf_r+0x2e>
 8007694:	4621      	mov	r1, r4
 8007696:	4628      	mov	r0, r5
 8007698:	f000 fa52 	bl	8007b40 <_fflush_r>
 800769c:	2800      	cmp	r0, #0
 800769e:	d0d9      	beq.n	8007654 <__swbuf_r+0x2e>
 80076a0:	e7d6      	b.n	8007650 <__swbuf_r+0x2a>
	...

080076a4 <__swsetup_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4b29      	ldr	r3, [pc, #164]	@ (800774c <__swsetup_r+0xa8>)
 80076a8:	4605      	mov	r5, r0
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	460c      	mov	r4, r1
 80076ae:	b118      	cbz	r0, 80076b8 <__swsetup_r+0x14>
 80076b0:	6a03      	ldr	r3, [r0, #32]
 80076b2:	b90b      	cbnz	r3, 80076b8 <__swsetup_r+0x14>
 80076b4:	f7ff fee0 	bl	8007478 <__sinit>
 80076b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076bc:	0719      	lsls	r1, r3, #28
 80076be:	d422      	bmi.n	8007706 <__swsetup_r+0x62>
 80076c0:	06da      	lsls	r2, r3, #27
 80076c2:	d407      	bmi.n	80076d4 <__swsetup_r+0x30>
 80076c4:	2209      	movs	r2, #9
 80076c6:	602a      	str	r2, [r5, #0]
 80076c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	f04f 30ff 	mov.w	r0, #4294967295
 80076d2:	e033      	b.n	800773c <__swsetup_r+0x98>
 80076d4:	0758      	lsls	r0, r3, #29
 80076d6:	d512      	bpl.n	80076fe <__swsetup_r+0x5a>
 80076d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076da:	b141      	cbz	r1, 80076ee <__swsetup_r+0x4a>
 80076dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076e0:	4299      	cmp	r1, r3
 80076e2:	d002      	beq.n	80076ea <__swsetup_r+0x46>
 80076e4:	4628      	mov	r0, r5
 80076e6:	f000 f8af 	bl	8007848 <_free_r>
 80076ea:	2300      	movs	r3, #0
 80076ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80076ee:	89a3      	ldrh	r3, [r4, #12]
 80076f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076f4:	81a3      	strh	r3, [r4, #12]
 80076f6:	2300      	movs	r3, #0
 80076f8:	6063      	str	r3, [r4, #4]
 80076fa:	6923      	ldr	r3, [r4, #16]
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	f043 0308 	orr.w	r3, r3, #8
 8007704:	81a3      	strh	r3, [r4, #12]
 8007706:	6923      	ldr	r3, [r4, #16]
 8007708:	b94b      	cbnz	r3, 800771e <__swsetup_r+0x7a>
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007714:	d003      	beq.n	800771e <__swsetup_r+0x7a>
 8007716:	4621      	mov	r1, r4
 8007718:	4628      	mov	r0, r5
 800771a:	f000 fa5f 	bl	8007bdc <__smakebuf_r>
 800771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007722:	f013 0201 	ands.w	r2, r3, #1
 8007726:	d00a      	beq.n	800773e <__swsetup_r+0x9a>
 8007728:	2200      	movs	r2, #0
 800772a:	60a2      	str	r2, [r4, #8]
 800772c:	6962      	ldr	r2, [r4, #20]
 800772e:	4252      	negs	r2, r2
 8007730:	61a2      	str	r2, [r4, #24]
 8007732:	6922      	ldr	r2, [r4, #16]
 8007734:	b942      	cbnz	r2, 8007748 <__swsetup_r+0xa4>
 8007736:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800773a:	d1c5      	bne.n	80076c8 <__swsetup_r+0x24>
 800773c:	bd38      	pop	{r3, r4, r5, pc}
 800773e:	0799      	lsls	r1, r3, #30
 8007740:	bf58      	it	pl
 8007742:	6962      	ldrpl	r2, [r4, #20]
 8007744:	60a2      	str	r2, [r4, #8]
 8007746:	e7f4      	b.n	8007732 <__swsetup_r+0x8e>
 8007748:	2000      	movs	r0, #0
 800774a:	e7f7      	b.n	800773c <__swsetup_r+0x98>
 800774c:	2000003c 	.word	0x2000003c

08007750 <memset>:
 8007750:	4402      	add	r2, r0
 8007752:	4603      	mov	r3, r0
 8007754:	4293      	cmp	r3, r2
 8007756:	d100      	bne.n	800775a <memset+0xa>
 8007758:	4770      	bx	lr
 800775a:	f803 1b01 	strb.w	r1, [r3], #1
 800775e:	e7f9      	b.n	8007754 <memset+0x4>

08007760 <_close_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4d06      	ldr	r5, [pc, #24]	@ (800777c <_close_r+0x1c>)
 8007764:	2300      	movs	r3, #0
 8007766:	4604      	mov	r4, r0
 8007768:	4608      	mov	r0, r1
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	f7fa fc97 	bl	800209e <_close>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d102      	bne.n	800777a <_close_r+0x1a>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b103      	cbz	r3, 800777a <_close_r+0x1a>
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	200006e8 	.word	0x200006e8

08007780 <_lseek_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d07      	ldr	r5, [pc, #28]	@ (80077a0 <_lseek_r+0x20>)
 8007784:	4604      	mov	r4, r0
 8007786:	4608      	mov	r0, r1
 8007788:	4611      	mov	r1, r2
 800778a:	2200      	movs	r2, #0
 800778c:	602a      	str	r2, [r5, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	f7fa fcac 	bl	80020ec <_lseek>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_lseek_r+0x1e>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	b103      	cbz	r3, 800779e <_lseek_r+0x1e>
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	200006e8 	.word	0x200006e8

080077a4 <_read_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4d07      	ldr	r5, [pc, #28]	@ (80077c4 <_read_r+0x20>)
 80077a8:	4604      	mov	r4, r0
 80077aa:	4608      	mov	r0, r1
 80077ac:	4611      	mov	r1, r2
 80077ae:	2200      	movs	r2, #0
 80077b0:	602a      	str	r2, [r5, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	f7fa fc56 	bl	8002064 <_read>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d102      	bne.n	80077c2 <_read_r+0x1e>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	b103      	cbz	r3, 80077c2 <_read_r+0x1e>
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	200006e8 	.word	0x200006e8

080077c8 <_write_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4d07      	ldr	r5, [pc, #28]	@ (80077e8 <_write_r+0x20>)
 80077cc:	4604      	mov	r4, r0
 80077ce:	4608      	mov	r0, r1
 80077d0:	4611      	mov	r1, r2
 80077d2:	2200      	movs	r2, #0
 80077d4:	602a      	str	r2, [r5, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f7fa fa55 	bl	8001c86 <_write>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_write_r+0x1e>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_write_r+0x1e>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	200006e8 	.word	0x200006e8

080077ec <__errno>:
 80077ec:	4b01      	ldr	r3, [pc, #4]	@ (80077f4 <__errno+0x8>)
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	2000003c 	.word	0x2000003c

080077f8 <__libc_init_array>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	4d0d      	ldr	r5, [pc, #52]	@ (8007830 <__libc_init_array+0x38>)
 80077fc:	4c0d      	ldr	r4, [pc, #52]	@ (8007834 <__libc_init_array+0x3c>)
 80077fe:	1b64      	subs	r4, r4, r5
 8007800:	10a4      	asrs	r4, r4, #2
 8007802:	2600      	movs	r6, #0
 8007804:	42a6      	cmp	r6, r4
 8007806:	d109      	bne.n	800781c <__libc_init_array+0x24>
 8007808:	4d0b      	ldr	r5, [pc, #44]	@ (8007838 <__libc_init_array+0x40>)
 800780a:	4c0c      	ldr	r4, [pc, #48]	@ (800783c <__libc_init_array+0x44>)
 800780c:	f000 ff0a 	bl	8008624 <_init>
 8007810:	1b64      	subs	r4, r4, r5
 8007812:	10a4      	asrs	r4, r4, #2
 8007814:	2600      	movs	r6, #0
 8007816:	42a6      	cmp	r6, r4
 8007818:	d105      	bne.n	8007826 <__libc_init_array+0x2e>
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007820:	4798      	blx	r3
 8007822:	3601      	adds	r6, #1
 8007824:	e7ee      	b.n	8007804 <__libc_init_array+0xc>
 8007826:	f855 3b04 	ldr.w	r3, [r5], #4
 800782a:	4798      	blx	r3
 800782c:	3601      	adds	r6, #1
 800782e:	e7f2      	b.n	8007816 <__libc_init_array+0x1e>
 8007830:	080087c8 	.word	0x080087c8
 8007834:	080087c8 	.word	0x080087c8
 8007838:	080087c8 	.word	0x080087c8
 800783c:	080087cc 	.word	0x080087cc

08007840 <__retarget_lock_init_recursive>:
 8007840:	4770      	bx	lr

08007842 <__retarget_lock_acquire_recursive>:
 8007842:	4770      	bx	lr

08007844 <__retarget_lock_release_recursive>:
 8007844:	4770      	bx	lr
	...

08007848 <_free_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4605      	mov	r5, r0
 800784c:	2900      	cmp	r1, #0
 800784e:	d041      	beq.n	80078d4 <_free_r+0x8c>
 8007850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007854:	1f0c      	subs	r4, r1, #4
 8007856:	2b00      	cmp	r3, #0
 8007858:	bfb8      	it	lt
 800785a:	18e4      	addlt	r4, r4, r3
 800785c:	f000 f8e0 	bl	8007a20 <__malloc_lock>
 8007860:	4a1d      	ldr	r2, [pc, #116]	@ (80078d8 <_free_r+0x90>)
 8007862:	6813      	ldr	r3, [r2, #0]
 8007864:	b933      	cbnz	r3, 8007874 <_free_r+0x2c>
 8007866:	6063      	str	r3, [r4, #4]
 8007868:	6014      	str	r4, [r2, #0]
 800786a:	4628      	mov	r0, r5
 800786c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007870:	f000 b8dc 	b.w	8007a2c <__malloc_unlock>
 8007874:	42a3      	cmp	r3, r4
 8007876:	d908      	bls.n	800788a <_free_r+0x42>
 8007878:	6820      	ldr	r0, [r4, #0]
 800787a:	1821      	adds	r1, r4, r0
 800787c:	428b      	cmp	r3, r1
 800787e:	bf01      	itttt	eq
 8007880:	6819      	ldreq	r1, [r3, #0]
 8007882:	685b      	ldreq	r3, [r3, #4]
 8007884:	1809      	addeq	r1, r1, r0
 8007886:	6021      	streq	r1, [r4, #0]
 8007888:	e7ed      	b.n	8007866 <_free_r+0x1e>
 800788a:	461a      	mov	r2, r3
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	b10b      	cbz	r3, 8007894 <_free_r+0x4c>
 8007890:	42a3      	cmp	r3, r4
 8007892:	d9fa      	bls.n	800788a <_free_r+0x42>
 8007894:	6811      	ldr	r1, [r2, #0]
 8007896:	1850      	adds	r0, r2, r1
 8007898:	42a0      	cmp	r0, r4
 800789a:	d10b      	bne.n	80078b4 <_free_r+0x6c>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	4401      	add	r1, r0
 80078a0:	1850      	adds	r0, r2, r1
 80078a2:	4283      	cmp	r3, r0
 80078a4:	6011      	str	r1, [r2, #0]
 80078a6:	d1e0      	bne.n	800786a <_free_r+0x22>
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	6053      	str	r3, [r2, #4]
 80078ae:	4408      	add	r0, r1
 80078b0:	6010      	str	r0, [r2, #0]
 80078b2:	e7da      	b.n	800786a <_free_r+0x22>
 80078b4:	d902      	bls.n	80078bc <_free_r+0x74>
 80078b6:	230c      	movs	r3, #12
 80078b8:	602b      	str	r3, [r5, #0]
 80078ba:	e7d6      	b.n	800786a <_free_r+0x22>
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	1821      	adds	r1, r4, r0
 80078c0:	428b      	cmp	r3, r1
 80078c2:	bf04      	itt	eq
 80078c4:	6819      	ldreq	r1, [r3, #0]
 80078c6:	685b      	ldreq	r3, [r3, #4]
 80078c8:	6063      	str	r3, [r4, #4]
 80078ca:	bf04      	itt	eq
 80078cc:	1809      	addeq	r1, r1, r0
 80078ce:	6021      	streq	r1, [r4, #0]
 80078d0:	6054      	str	r4, [r2, #4]
 80078d2:	e7ca      	b.n	800786a <_free_r+0x22>
 80078d4:	bd38      	pop	{r3, r4, r5, pc}
 80078d6:	bf00      	nop
 80078d8:	200006f4 	.word	0x200006f4

080078dc <sbrk_aligned>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	4e0f      	ldr	r6, [pc, #60]	@ (800791c <sbrk_aligned+0x40>)
 80078e0:	460c      	mov	r4, r1
 80078e2:	6831      	ldr	r1, [r6, #0]
 80078e4:	4605      	mov	r5, r0
 80078e6:	b911      	cbnz	r1, 80078ee <sbrk_aligned+0x12>
 80078e8:	f000 f9d6 	bl	8007c98 <_sbrk_r>
 80078ec:	6030      	str	r0, [r6, #0]
 80078ee:	4621      	mov	r1, r4
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 f9d1 	bl	8007c98 <_sbrk_r>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	d103      	bne.n	8007902 <sbrk_aligned+0x26>
 80078fa:	f04f 34ff 	mov.w	r4, #4294967295
 80078fe:	4620      	mov	r0, r4
 8007900:	bd70      	pop	{r4, r5, r6, pc}
 8007902:	1cc4      	adds	r4, r0, #3
 8007904:	f024 0403 	bic.w	r4, r4, #3
 8007908:	42a0      	cmp	r0, r4
 800790a:	d0f8      	beq.n	80078fe <sbrk_aligned+0x22>
 800790c:	1a21      	subs	r1, r4, r0
 800790e:	4628      	mov	r0, r5
 8007910:	f000 f9c2 	bl	8007c98 <_sbrk_r>
 8007914:	3001      	adds	r0, #1
 8007916:	d1f2      	bne.n	80078fe <sbrk_aligned+0x22>
 8007918:	e7ef      	b.n	80078fa <sbrk_aligned+0x1e>
 800791a:	bf00      	nop
 800791c:	200006f0 	.word	0x200006f0

08007920 <_malloc_r>:
 8007920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007924:	1ccd      	adds	r5, r1, #3
 8007926:	f025 0503 	bic.w	r5, r5, #3
 800792a:	3508      	adds	r5, #8
 800792c:	2d0c      	cmp	r5, #12
 800792e:	bf38      	it	cc
 8007930:	250c      	movcc	r5, #12
 8007932:	2d00      	cmp	r5, #0
 8007934:	4606      	mov	r6, r0
 8007936:	db01      	blt.n	800793c <_malloc_r+0x1c>
 8007938:	42a9      	cmp	r1, r5
 800793a:	d904      	bls.n	8007946 <_malloc_r+0x26>
 800793c:	230c      	movs	r3, #12
 800793e:	6033      	str	r3, [r6, #0]
 8007940:	2000      	movs	r0, #0
 8007942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a1c <_malloc_r+0xfc>
 800794a:	f000 f869 	bl	8007a20 <__malloc_lock>
 800794e:	f8d8 3000 	ldr.w	r3, [r8]
 8007952:	461c      	mov	r4, r3
 8007954:	bb44      	cbnz	r4, 80079a8 <_malloc_r+0x88>
 8007956:	4629      	mov	r1, r5
 8007958:	4630      	mov	r0, r6
 800795a:	f7ff ffbf 	bl	80078dc <sbrk_aligned>
 800795e:	1c43      	adds	r3, r0, #1
 8007960:	4604      	mov	r4, r0
 8007962:	d158      	bne.n	8007a16 <_malloc_r+0xf6>
 8007964:	f8d8 4000 	ldr.w	r4, [r8]
 8007968:	4627      	mov	r7, r4
 800796a:	2f00      	cmp	r7, #0
 800796c:	d143      	bne.n	80079f6 <_malloc_r+0xd6>
 800796e:	2c00      	cmp	r4, #0
 8007970:	d04b      	beq.n	8007a0a <_malloc_r+0xea>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	4639      	mov	r1, r7
 8007976:	4630      	mov	r0, r6
 8007978:	eb04 0903 	add.w	r9, r4, r3
 800797c:	f000 f98c 	bl	8007c98 <_sbrk_r>
 8007980:	4581      	cmp	r9, r0
 8007982:	d142      	bne.n	8007a0a <_malloc_r+0xea>
 8007984:	6821      	ldr	r1, [r4, #0]
 8007986:	1a6d      	subs	r5, r5, r1
 8007988:	4629      	mov	r1, r5
 800798a:	4630      	mov	r0, r6
 800798c:	f7ff ffa6 	bl	80078dc <sbrk_aligned>
 8007990:	3001      	adds	r0, #1
 8007992:	d03a      	beq.n	8007a0a <_malloc_r+0xea>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	442b      	add	r3, r5
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	f8d8 3000 	ldr.w	r3, [r8]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	bb62      	cbnz	r2, 80079fc <_malloc_r+0xdc>
 80079a2:	f8c8 7000 	str.w	r7, [r8]
 80079a6:	e00f      	b.n	80079c8 <_malloc_r+0xa8>
 80079a8:	6822      	ldr	r2, [r4, #0]
 80079aa:	1b52      	subs	r2, r2, r5
 80079ac:	d420      	bmi.n	80079f0 <_malloc_r+0xd0>
 80079ae:	2a0b      	cmp	r2, #11
 80079b0:	d917      	bls.n	80079e2 <_malloc_r+0xc2>
 80079b2:	1961      	adds	r1, r4, r5
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	6025      	str	r5, [r4, #0]
 80079b8:	bf18      	it	ne
 80079ba:	6059      	strne	r1, [r3, #4]
 80079bc:	6863      	ldr	r3, [r4, #4]
 80079be:	bf08      	it	eq
 80079c0:	f8c8 1000 	streq.w	r1, [r8]
 80079c4:	5162      	str	r2, [r4, r5]
 80079c6:	604b      	str	r3, [r1, #4]
 80079c8:	4630      	mov	r0, r6
 80079ca:	f000 f82f 	bl	8007a2c <__malloc_unlock>
 80079ce:	f104 000b 	add.w	r0, r4, #11
 80079d2:	1d23      	adds	r3, r4, #4
 80079d4:	f020 0007 	bic.w	r0, r0, #7
 80079d8:	1ac2      	subs	r2, r0, r3
 80079da:	bf1c      	itt	ne
 80079dc:	1a1b      	subne	r3, r3, r0
 80079de:	50a3      	strne	r3, [r4, r2]
 80079e0:	e7af      	b.n	8007942 <_malloc_r+0x22>
 80079e2:	6862      	ldr	r2, [r4, #4]
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	bf0c      	ite	eq
 80079e8:	f8c8 2000 	streq.w	r2, [r8]
 80079ec:	605a      	strne	r2, [r3, #4]
 80079ee:	e7eb      	b.n	80079c8 <_malloc_r+0xa8>
 80079f0:	4623      	mov	r3, r4
 80079f2:	6864      	ldr	r4, [r4, #4]
 80079f4:	e7ae      	b.n	8007954 <_malloc_r+0x34>
 80079f6:	463c      	mov	r4, r7
 80079f8:	687f      	ldr	r7, [r7, #4]
 80079fa:	e7b6      	b.n	800796a <_malloc_r+0x4a>
 80079fc:	461a      	mov	r2, r3
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	42a3      	cmp	r3, r4
 8007a02:	d1fb      	bne.n	80079fc <_malloc_r+0xdc>
 8007a04:	2300      	movs	r3, #0
 8007a06:	6053      	str	r3, [r2, #4]
 8007a08:	e7de      	b.n	80079c8 <_malloc_r+0xa8>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	6033      	str	r3, [r6, #0]
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f000 f80c 	bl	8007a2c <__malloc_unlock>
 8007a14:	e794      	b.n	8007940 <_malloc_r+0x20>
 8007a16:	6005      	str	r5, [r0, #0]
 8007a18:	e7d6      	b.n	80079c8 <_malloc_r+0xa8>
 8007a1a:	bf00      	nop
 8007a1c:	200006f4 	.word	0x200006f4

08007a20 <__malloc_lock>:
 8007a20:	4801      	ldr	r0, [pc, #4]	@ (8007a28 <__malloc_lock+0x8>)
 8007a22:	f7ff bf0e 	b.w	8007842 <__retarget_lock_acquire_recursive>
 8007a26:	bf00      	nop
 8007a28:	200006ec 	.word	0x200006ec

08007a2c <__malloc_unlock>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	@ (8007a34 <__malloc_unlock+0x8>)
 8007a2e:	f7ff bf09 	b.w	8007844 <__retarget_lock_release_recursive>
 8007a32:	bf00      	nop
 8007a34:	200006ec 	.word	0x200006ec

08007a38 <__sflush_r>:
 8007a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a40:	0716      	lsls	r6, r2, #28
 8007a42:	4605      	mov	r5, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	d454      	bmi.n	8007af2 <__sflush_r+0xba>
 8007a48:	684b      	ldr	r3, [r1, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dc02      	bgt.n	8007a54 <__sflush_r+0x1c>
 8007a4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dd48      	ble.n	8007ae6 <__sflush_r+0xae>
 8007a54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a56:	2e00      	cmp	r6, #0
 8007a58:	d045      	beq.n	8007ae6 <__sflush_r+0xae>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a60:	682f      	ldr	r7, [r5, #0]
 8007a62:	6a21      	ldr	r1, [r4, #32]
 8007a64:	602b      	str	r3, [r5, #0]
 8007a66:	d030      	beq.n	8007aca <__sflush_r+0x92>
 8007a68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	0759      	lsls	r1, r3, #29
 8007a6e:	d505      	bpl.n	8007a7c <__sflush_r+0x44>
 8007a70:	6863      	ldr	r3, [r4, #4]
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a76:	b10b      	cbz	r3, 8007a7c <__sflush_r+0x44>
 8007a78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a80:	6a21      	ldr	r1, [r4, #32]
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b0      	blx	r6
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	d106      	bne.n	8007a9a <__sflush_r+0x62>
 8007a8c:	6829      	ldr	r1, [r5, #0]
 8007a8e:	291d      	cmp	r1, #29
 8007a90:	d82b      	bhi.n	8007aea <__sflush_r+0xb2>
 8007a92:	4a2a      	ldr	r2, [pc, #168]	@ (8007b3c <__sflush_r+0x104>)
 8007a94:	40ca      	lsrs	r2, r1
 8007a96:	07d6      	lsls	r6, r2, #31
 8007a98:	d527      	bpl.n	8007aea <__sflush_r+0xb2>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	6062      	str	r2, [r4, #4]
 8007a9e:	04d9      	lsls	r1, r3, #19
 8007aa0:	6922      	ldr	r2, [r4, #16]
 8007aa2:	6022      	str	r2, [r4, #0]
 8007aa4:	d504      	bpl.n	8007ab0 <__sflush_r+0x78>
 8007aa6:	1c42      	adds	r2, r0, #1
 8007aa8:	d101      	bne.n	8007aae <__sflush_r+0x76>
 8007aaa:	682b      	ldr	r3, [r5, #0]
 8007aac:	b903      	cbnz	r3, 8007ab0 <__sflush_r+0x78>
 8007aae:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ab2:	602f      	str	r7, [r5, #0]
 8007ab4:	b1b9      	cbz	r1, 8007ae6 <__sflush_r+0xae>
 8007ab6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aba:	4299      	cmp	r1, r3
 8007abc:	d002      	beq.n	8007ac4 <__sflush_r+0x8c>
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f7ff fec2 	bl	8007848 <_free_r>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ac8:	e00d      	b.n	8007ae6 <__sflush_r+0xae>
 8007aca:	2301      	movs	r3, #1
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b0      	blx	r6
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	1c50      	adds	r0, r2, #1
 8007ad4:	d1c9      	bne.n	8007a6a <__sflush_r+0x32>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0c6      	beq.n	8007a6a <__sflush_r+0x32>
 8007adc:	2b1d      	cmp	r3, #29
 8007ade:	d001      	beq.n	8007ae4 <__sflush_r+0xac>
 8007ae0:	2b16      	cmp	r3, #22
 8007ae2:	d11e      	bne.n	8007b22 <__sflush_r+0xea>
 8007ae4:	602f      	str	r7, [r5, #0]
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	e022      	b.n	8007b30 <__sflush_r+0xf8>
 8007aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aee:	b21b      	sxth	r3, r3
 8007af0:	e01b      	b.n	8007b2a <__sflush_r+0xf2>
 8007af2:	690f      	ldr	r7, [r1, #16]
 8007af4:	2f00      	cmp	r7, #0
 8007af6:	d0f6      	beq.n	8007ae6 <__sflush_r+0xae>
 8007af8:	0793      	lsls	r3, r2, #30
 8007afa:	680e      	ldr	r6, [r1, #0]
 8007afc:	bf08      	it	eq
 8007afe:	694b      	ldreq	r3, [r1, #20]
 8007b00:	600f      	str	r7, [r1, #0]
 8007b02:	bf18      	it	ne
 8007b04:	2300      	movne	r3, #0
 8007b06:	eba6 0807 	sub.w	r8, r6, r7
 8007b0a:	608b      	str	r3, [r1, #8]
 8007b0c:	f1b8 0f00 	cmp.w	r8, #0
 8007b10:	dde9      	ble.n	8007ae6 <__sflush_r+0xae>
 8007b12:	6a21      	ldr	r1, [r4, #32]
 8007b14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b16:	4643      	mov	r3, r8
 8007b18:	463a      	mov	r2, r7
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	47b0      	blx	r6
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	dc08      	bgt.n	8007b34 <__sflush_r+0xfc>
 8007b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b2a:	81a3      	strh	r3, [r4, #12]
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b34:	4407      	add	r7, r0
 8007b36:	eba8 0800 	sub.w	r8, r8, r0
 8007b3a:	e7e7      	b.n	8007b0c <__sflush_r+0xd4>
 8007b3c:	20400001 	.word	0x20400001

08007b40 <_fflush_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	690b      	ldr	r3, [r1, #16]
 8007b44:	4605      	mov	r5, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	b913      	cbnz	r3, 8007b50 <_fflush_r+0x10>
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	b118      	cbz	r0, 8007b5a <_fflush_r+0x1a>
 8007b52:	6a03      	ldr	r3, [r0, #32]
 8007b54:	b90b      	cbnz	r3, 8007b5a <_fflush_r+0x1a>
 8007b56:	f7ff fc8f 	bl	8007478 <__sinit>
 8007b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0f3      	beq.n	8007b4a <_fflush_r+0xa>
 8007b62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b64:	07d0      	lsls	r0, r2, #31
 8007b66:	d404      	bmi.n	8007b72 <_fflush_r+0x32>
 8007b68:	0599      	lsls	r1, r3, #22
 8007b6a:	d402      	bmi.n	8007b72 <_fflush_r+0x32>
 8007b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b6e:	f7ff fe68 	bl	8007842 <__retarget_lock_acquire_recursive>
 8007b72:	4628      	mov	r0, r5
 8007b74:	4621      	mov	r1, r4
 8007b76:	f7ff ff5f 	bl	8007a38 <__sflush_r>
 8007b7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b7c:	07da      	lsls	r2, r3, #31
 8007b7e:	4605      	mov	r5, r0
 8007b80:	d4e4      	bmi.n	8007b4c <_fflush_r+0xc>
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	059b      	lsls	r3, r3, #22
 8007b86:	d4e1      	bmi.n	8007b4c <_fflush_r+0xc>
 8007b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b8a:	f7ff fe5b 	bl	8007844 <__retarget_lock_release_recursive>
 8007b8e:	e7dd      	b.n	8007b4c <_fflush_r+0xc>

08007b90 <__swhatbuf_r>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	460c      	mov	r4, r1
 8007b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	b096      	sub	sp, #88	@ 0x58
 8007b9c:	4615      	mov	r5, r2
 8007b9e:	461e      	mov	r6, r3
 8007ba0:	da0d      	bge.n	8007bbe <__swhatbuf_r+0x2e>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ba8:	f04f 0100 	mov.w	r1, #0
 8007bac:	bf14      	ite	ne
 8007bae:	2340      	movne	r3, #64	@ 0x40
 8007bb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	6031      	str	r1, [r6, #0]
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	b016      	add	sp, #88	@ 0x58
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
 8007bbe:	466a      	mov	r2, sp
 8007bc0:	f000 f848 	bl	8007c54 <_fstat_r>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	dbec      	blt.n	8007ba2 <__swhatbuf_r+0x12>
 8007bc8:	9901      	ldr	r1, [sp, #4]
 8007bca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007bd2:	4259      	negs	r1, r3
 8007bd4:	4159      	adcs	r1, r3
 8007bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bda:	e7eb      	b.n	8007bb4 <__swhatbuf_r+0x24>

08007bdc <__smakebuf_r>:
 8007bdc:	898b      	ldrh	r3, [r1, #12]
 8007bde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007be0:	079d      	lsls	r5, r3, #30
 8007be2:	4606      	mov	r6, r0
 8007be4:	460c      	mov	r4, r1
 8007be6:	d507      	bpl.n	8007bf8 <__smakebuf_r+0x1c>
 8007be8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	6123      	str	r3, [r4, #16]
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	6163      	str	r3, [r4, #20]
 8007bf4:	b003      	add	sp, #12
 8007bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf8:	ab01      	add	r3, sp, #4
 8007bfa:	466a      	mov	r2, sp
 8007bfc:	f7ff ffc8 	bl	8007b90 <__swhatbuf_r>
 8007c00:	9f00      	ldr	r7, [sp, #0]
 8007c02:	4605      	mov	r5, r0
 8007c04:	4639      	mov	r1, r7
 8007c06:	4630      	mov	r0, r6
 8007c08:	f7ff fe8a 	bl	8007920 <_malloc_r>
 8007c0c:	b948      	cbnz	r0, 8007c22 <__smakebuf_r+0x46>
 8007c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c12:	059a      	lsls	r2, r3, #22
 8007c14:	d4ee      	bmi.n	8007bf4 <__smakebuf_r+0x18>
 8007c16:	f023 0303 	bic.w	r3, r3, #3
 8007c1a:	f043 0302 	orr.w	r3, r3, #2
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	e7e2      	b.n	8007be8 <__smakebuf_r+0xc>
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	6020      	str	r0, [r4, #0]
 8007c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c2a:	81a3      	strh	r3, [r4, #12]
 8007c2c:	9b01      	ldr	r3, [sp, #4]
 8007c2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c32:	b15b      	cbz	r3, 8007c4c <__smakebuf_r+0x70>
 8007c34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f000 f81d 	bl	8007c78 <_isatty_r>
 8007c3e:	b128      	cbz	r0, 8007c4c <__smakebuf_r+0x70>
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	f023 0303 	bic.w	r3, r3, #3
 8007c46:	f043 0301 	orr.w	r3, r3, #1
 8007c4a:	81a3      	strh	r3, [r4, #12]
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	431d      	orrs	r5, r3
 8007c50:	81a5      	strh	r5, [r4, #12]
 8007c52:	e7cf      	b.n	8007bf4 <__smakebuf_r+0x18>

08007c54 <_fstat_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d07      	ldr	r5, [pc, #28]	@ (8007c74 <_fstat_r+0x20>)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	4611      	mov	r1, r2
 8007c60:	602b      	str	r3, [r5, #0]
 8007c62:	f7fa fa28 	bl	80020b6 <_fstat>
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	d102      	bne.n	8007c70 <_fstat_r+0x1c>
 8007c6a:	682b      	ldr	r3, [r5, #0]
 8007c6c:	b103      	cbz	r3, 8007c70 <_fstat_r+0x1c>
 8007c6e:	6023      	str	r3, [r4, #0]
 8007c70:	bd38      	pop	{r3, r4, r5, pc}
 8007c72:	bf00      	nop
 8007c74:	200006e8 	.word	0x200006e8

08007c78 <_isatty_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d06      	ldr	r5, [pc, #24]	@ (8007c94 <_isatty_r+0x1c>)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	4608      	mov	r0, r1
 8007c82:	602b      	str	r3, [r5, #0]
 8007c84:	f7fa fa27 	bl	80020d6 <_isatty>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_isatty_r+0x1a>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_isatty_r+0x1a>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	200006e8 	.word	0x200006e8

08007c98 <_sbrk_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d06      	ldr	r5, [pc, #24]	@ (8007cb4 <_sbrk_r+0x1c>)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	602b      	str	r3, [r5, #0]
 8007ca4:	f7fa fa30 	bl	8002108 <_sbrk>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_sbrk_r+0x1a>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_sbrk_r+0x1a>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	200006e8 	.word	0x200006e8

08007cb8 <asin>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	ed2d 8b02 	vpush	{d8}
 8007cbe:	ec55 4b10 	vmov	r4, r5, d0
 8007cc2:	f000 f9d5 	bl	8008070 <__ieee754_asin>
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	462b      	mov	r3, r5
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	eeb0 8a40 	vmov.f32	s16, s0
 8007cd2:	eef0 8a60 	vmov.f32	s17, s1
 8007cd6:	f7f8 fea9 	bl	8000a2c <__aeabi_dcmpun>
 8007cda:	b9a8      	cbnz	r0, 8007d08 <asin+0x50>
 8007cdc:	ec45 4b10 	vmov	d0, r4, r5
 8007ce0:	f000 f9b6 	bl	8008050 <fabs>
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <asin+0x60>)
 8007ce6:	ec51 0b10 	vmov	r0, r1, d0
 8007cea:	2200      	movs	r2, #0
 8007cec:	f7f8 fe94 	bl	8000a18 <__aeabi_dcmpgt>
 8007cf0:	b150      	cbz	r0, 8007d08 <asin+0x50>
 8007cf2:	f7ff fd7b 	bl	80077ec <__errno>
 8007cf6:	ecbd 8b02 	vpop	{d8}
 8007cfa:	2321      	movs	r3, #33	@ 0x21
 8007cfc:	6003      	str	r3, [r0, #0]
 8007cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d02:	4806      	ldr	r0, [pc, #24]	@ (8007d1c <asin+0x64>)
 8007d04:	f000 b9ac 	b.w	8008060 <nan>
 8007d08:	eeb0 0a48 	vmov.f32	s0, s16
 8007d0c:	eef0 0a68 	vmov.f32	s1, s17
 8007d10:	ecbd 8b02 	vpop	{d8}
 8007d14:	bd38      	pop	{r3, r4, r5, pc}
 8007d16:	bf00      	nop
 8007d18:	3ff00000 	.word	0x3ff00000
 8007d1c:	0800876c 	.word	0x0800876c

08007d20 <atan>:
 8007d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	ec55 4b10 	vmov	r4, r5, d0
 8007d28:	4bbf      	ldr	r3, [pc, #764]	@ (8008028 <atan+0x308>)
 8007d2a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007d2e:	429e      	cmp	r6, r3
 8007d30:	46ab      	mov	fp, r5
 8007d32:	d918      	bls.n	8007d66 <atan+0x46>
 8007d34:	4bbd      	ldr	r3, [pc, #756]	@ (800802c <atan+0x30c>)
 8007d36:	429e      	cmp	r6, r3
 8007d38:	d801      	bhi.n	8007d3e <atan+0x1e>
 8007d3a:	d109      	bne.n	8007d50 <atan+0x30>
 8007d3c:	b144      	cbz	r4, 8007d50 <atan+0x30>
 8007d3e:	4622      	mov	r2, r4
 8007d40:	462b      	mov	r3, r5
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	f7f8 fa21 	bl	800018c <__adddf3>
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	460d      	mov	r5, r1
 8007d4e:	e006      	b.n	8007d5e <atan+0x3e>
 8007d50:	f1bb 0f00 	cmp.w	fp, #0
 8007d54:	f340 812b 	ble.w	8007fae <atan+0x28e>
 8007d58:	a597      	add	r5, pc, #604	@ (adr r5, 8007fb8 <atan+0x298>)
 8007d5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007d5e:	ec45 4b10 	vmov	d0, r4, r5
 8007d62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	4bb2      	ldr	r3, [pc, #712]	@ (8008030 <atan+0x310>)
 8007d68:	429e      	cmp	r6, r3
 8007d6a:	d813      	bhi.n	8007d94 <atan+0x74>
 8007d6c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007d70:	429e      	cmp	r6, r3
 8007d72:	d80c      	bhi.n	8007d8e <atan+0x6e>
 8007d74:	a392      	add	r3, pc, #584	@ (adr r3, 8007fc0 <atan+0x2a0>)
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f7f8 fa05 	bl	800018c <__adddf3>
 8007d82:	4bac      	ldr	r3, [pc, #688]	@ (8008034 <atan+0x314>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	f7f8 fe47 	bl	8000a18 <__aeabi_dcmpgt>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d1e7      	bne.n	8007d5e <atan+0x3e>
 8007d8e:	f04f 3aff 	mov.w	sl, #4294967295
 8007d92:	e029      	b.n	8007de8 <atan+0xc8>
 8007d94:	f000 f95c 	bl	8008050 <fabs>
 8007d98:	4ba7      	ldr	r3, [pc, #668]	@ (8008038 <atan+0x318>)
 8007d9a:	429e      	cmp	r6, r3
 8007d9c:	ec55 4b10 	vmov	r4, r5, d0
 8007da0:	f200 80bc 	bhi.w	8007f1c <atan+0x1fc>
 8007da4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007da8:	429e      	cmp	r6, r3
 8007daa:	f200 809e 	bhi.w	8007eea <atan+0x1ca>
 8007dae:	4622      	mov	r2, r4
 8007db0:	462b      	mov	r3, r5
 8007db2:	4620      	mov	r0, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	f7f8 f9e9 	bl	800018c <__adddf3>
 8007dba:	4b9e      	ldr	r3, [pc, #632]	@ (8008034 <atan+0x314>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f7f8 f9e3 	bl	8000188 <__aeabi_dsub>
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007dcc:	4620      	mov	r0, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f7f8 f9dc 	bl	800018c <__adddf3>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 fcb6 	bl	800074c <__aeabi_ddiv>
 8007de0:	f04f 0a00 	mov.w	sl, #0
 8007de4:	4604      	mov	r4, r0
 8007de6:	460d      	mov	r5, r1
 8007de8:	4622      	mov	r2, r4
 8007dea:	462b      	mov	r3, r5
 8007dec:	4620      	mov	r0, r4
 8007dee:	4629      	mov	r1, r5
 8007df0:	f7f8 fb82 	bl	80004f8 <__aeabi_dmul>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4680      	mov	r8, r0
 8007dfa:	4689      	mov	r9, r1
 8007dfc:	f7f8 fb7c 	bl	80004f8 <__aeabi_dmul>
 8007e00:	a371      	add	r3, pc, #452	@ (adr r3, 8007fc8 <atan+0x2a8>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	f7f8 fb75 	bl	80004f8 <__aeabi_dmul>
 8007e0e:	a370      	add	r3, pc, #448	@ (adr r3, 8007fd0 <atan+0x2b0>)
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	f7f8 f9ba 	bl	800018c <__adddf3>
 8007e18:	4632      	mov	r2, r6
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	f7f8 fb6c 	bl	80004f8 <__aeabi_dmul>
 8007e20:	a36d      	add	r3, pc, #436	@ (adr r3, 8007fd8 <atan+0x2b8>)
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 f9b1 	bl	800018c <__adddf3>
 8007e2a:	4632      	mov	r2, r6
 8007e2c:	463b      	mov	r3, r7
 8007e2e:	f7f8 fb63 	bl	80004f8 <__aeabi_dmul>
 8007e32:	a36b      	add	r3, pc, #428	@ (adr r3, 8007fe0 <atan+0x2c0>)
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f7f8 f9a8 	bl	800018c <__adddf3>
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	463b      	mov	r3, r7
 8007e40:	f7f8 fb5a 	bl	80004f8 <__aeabi_dmul>
 8007e44:	a368      	add	r3, pc, #416	@ (adr r3, 8007fe8 <atan+0x2c8>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f7f8 f99f 	bl	800018c <__adddf3>
 8007e4e:	4632      	mov	r2, r6
 8007e50:	463b      	mov	r3, r7
 8007e52:	f7f8 fb51 	bl	80004f8 <__aeabi_dmul>
 8007e56:	a366      	add	r3, pc, #408	@ (adr r3, 8007ff0 <atan+0x2d0>)
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	f7f8 f996 	bl	800018c <__adddf3>
 8007e60:	4642      	mov	r2, r8
 8007e62:	464b      	mov	r3, r9
 8007e64:	f7f8 fb48 	bl	80004f8 <__aeabi_dmul>
 8007e68:	a363      	add	r3, pc, #396	@ (adr r3, 8007ff8 <atan+0x2d8>)
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	4680      	mov	r8, r0
 8007e70:	4689      	mov	r9, r1
 8007e72:	4630      	mov	r0, r6
 8007e74:	4639      	mov	r1, r7
 8007e76:	f7f8 fb3f 	bl	80004f8 <__aeabi_dmul>
 8007e7a:	a361      	add	r3, pc, #388	@ (adr r3, 8008000 <atan+0x2e0>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f7f8 f982 	bl	8000188 <__aeabi_dsub>
 8007e84:	4632      	mov	r2, r6
 8007e86:	463b      	mov	r3, r7
 8007e88:	f7f8 fb36 	bl	80004f8 <__aeabi_dmul>
 8007e8c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008008 <atan+0x2e8>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 f979 	bl	8000188 <__aeabi_dsub>
 8007e96:	4632      	mov	r2, r6
 8007e98:	463b      	mov	r3, r7
 8007e9a:	f7f8 fb2d 	bl	80004f8 <__aeabi_dmul>
 8007e9e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008010 <atan+0x2f0>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 f970 	bl	8000188 <__aeabi_dsub>
 8007ea8:	4632      	mov	r2, r6
 8007eaa:	463b      	mov	r3, r7
 8007eac:	f7f8 fb24 	bl	80004f8 <__aeabi_dmul>
 8007eb0:	a359      	add	r3, pc, #356	@ (adr r3, 8008018 <atan+0x2f8>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 f967 	bl	8000188 <__aeabi_dsub>
 8007eba:	4632      	mov	r2, r6
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	f7f8 fb1b 	bl	80004f8 <__aeabi_dmul>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	4649      	mov	r1, r9
 8007eca:	f7f8 f95f 	bl	800018c <__adddf3>
 8007ece:	4622      	mov	r2, r4
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	f7f8 fb11 	bl	80004f8 <__aeabi_dmul>
 8007ed6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	d148      	bne.n	8007f72 <atan+0x252>
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	f7f8 f950 	bl	8000188 <__aeabi_dsub>
 8007ee8:	e72f      	b.n	8007d4a <atan+0x2a>
 8007eea:	4b52      	ldr	r3, [pc, #328]	@ (8008034 <atan+0x314>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	f7f8 f949 	bl	8000188 <__aeabi_dsub>
 8007ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8008034 <atan+0x314>)
 8007ef8:	4606      	mov	r6, r0
 8007efa:	460f      	mov	r7, r1
 8007efc:	2200      	movs	r2, #0
 8007efe:	4620      	mov	r0, r4
 8007f00:	4629      	mov	r1, r5
 8007f02:	f7f8 f943 	bl	800018c <__adddf3>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	f7f8 fc1d 	bl	800074c <__aeabi_ddiv>
 8007f12:	f04f 0a01 	mov.w	sl, #1
 8007f16:	4604      	mov	r4, r0
 8007f18:	460d      	mov	r5, r1
 8007f1a:	e765      	b.n	8007de8 <atan+0xc8>
 8007f1c:	4b47      	ldr	r3, [pc, #284]	@ (800803c <atan+0x31c>)
 8007f1e:	429e      	cmp	r6, r3
 8007f20:	d21c      	bcs.n	8007f5c <atan+0x23c>
 8007f22:	4b47      	ldr	r3, [pc, #284]	@ (8008040 <atan+0x320>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	4620      	mov	r0, r4
 8007f28:	4629      	mov	r1, r5
 8007f2a:	f7f8 f92d 	bl	8000188 <__aeabi_dsub>
 8007f2e:	4b44      	ldr	r3, [pc, #272]	@ (8008040 <atan+0x320>)
 8007f30:	4606      	mov	r6, r0
 8007f32:	460f      	mov	r7, r1
 8007f34:	2200      	movs	r2, #0
 8007f36:	4620      	mov	r0, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7f8 fadd 	bl	80004f8 <__aeabi_dmul>
 8007f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8008034 <atan+0x314>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	f7f8 f923 	bl	800018c <__adddf3>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 fbfd 	bl	800074c <__aeabi_ddiv>
 8007f52:	f04f 0a02 	mov.w	sl, #2
 8007f56:	4604      	mov	r4, r0
 8007f58:	460d      	mov	r5, r1
 8007f5a:	e745      	b.n	8007de8 <atan+0xc8>
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	462b      	mov	r3, r5
 8007f60:	4938      	ldr	r1, [pc, #224]	@ (8008044 <atan+0x324>)
 8007f62:	2000      	movs	r0, #0
 8007f64:	f7f8 fbf2 	bl	800074c <__aeabi_ddiv>
 8007f68:	f04f 0a03 	mov.w	sl, #3
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	460d      	mov	r5, r1
 8007f70:	e73a      	b.n	8007de8 <atan+0xc8>
 8007f72:	4b35      	ldr	r3, [pc, #212]	@ (8008048 <atan+0x328>)
 8007f74:	4e35      	ldr	r6, [pc, #212]	@ (800804c <atan+0x32c>)
 8007f76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 f903 	bl	8000188 <__aeabi_dsub>
 8007f82:	4622      	mov	r2, r4
 8007f84:	462b      	mov	r3, r5
 8007f86:	f7f8 f8ff 	bl	8000188 <__aeabi_dsub>
 8007f8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007f96:	f7f8 f8f7 	bl	8000188 <__aeabi_dsub>
 8007f9a:	f1bb 0f00 	cmp.w	fp, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	f6bf aedc 	bge.w	8007d5e <atan+0x3e>
 8007fa6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007faa:	461d      	mov	r5, r3
 8007fac:	e6d7      	b.n	8007d5e <atan+0x3e>
 8007fae:	a51c      	add	r5, pc, #112	@ (adr r5, 8008020 <atan+0x300>)
 8007fb0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fb4:	e6d3      	b.n	8007d5e <atan+0x3e>
 8007fb6:	bf00      	nop
 8007fb8:	54442d18 	.word	0x54442d18
 8007fbc:	3ff921fb 	.word	0x3ff921fb
 8007fc0:	8800759c 	.word	0x8800759c
 8007fc4:	7e37e43c 	.word	0x7e37e43c
 8007fc8:	e322da11 	.word	0xe322da11
 8007fcc:	3f90ad3a 	.word	0x3f90ad3a
 8007fd0:	24760deb 	.word	0x24760deb
 8007fd4:	3fa97b4b 	.word	0x3fa97b4b
 8007fd8:	a0d03d51 	.word	0xa0d03d51
 8007fdc:	3fb10d66 	.word	0x3fb10d66
 8007fe0:	c54c206e 	.word	0xc54c206e
 8007fe4:	3fb745cd 	.word	0x3fb745cd
 8007fe8:	920083ff 	.word	0x920083ff
 8007fec:	3fc24924 	.word	0x3fc24924
 8007ff0:	5555550d 	.word	0x5555550d
 8007ff4:	3fd55555 	.word	0x3fd55555
 8007ff8:	2c6a6c2f 	.word	0x2c6a6c2f
 8007ffc:	bfa2b444 	.word	0xbfa2b444
 8008000:	52defd9a 	.word	0x52defd9a
 8008004:	3fadde2d 	.word	0x3fadde2d
 8008008:	af749a6d 	.word	0xaf749a6d
 800800c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008010:	fe231671 	.word	0xfe231671
 8008014:	3fbc71c6 	.word	0x3fbc71c6
 8008018:	9998ebc4 	.word	0x9998ebc4
 800801c:	3fc99999 	.word	0x3fc99999
 8008020:	54442d18 	.word	0x54442d18
 8008024:	bff921fb 	.word	0xbff921fb
 8008028:	440fffff 	.word	0x440fffff
 800802c:	7ff00000 	.word	0x7ff00000
 8008030:	3fdbffff 	.word	0x3fdbffff
 8008034:	3ff00000 	.word	0x3ff00000
 8008038:	3ff2ffff 	.word	0x3ff2ffff
 800803c:	40038000 	.word	0x40038000
 8008040:	3ff80000 	.word	0x3ff80000
 8008044:	bff00000 	.word	0xbff00000
 8008048:	08008770 	.word	0x08008770
 800804c:	08008790 	.word	0x08008790

08008050 <fabs>:
 8008050:	ec51 0b10 	vmov	r0, r1, d0
 8008054:	4602      	mov	r2, r0
 8008056:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800805a:	ec43 2b10 	vmov	d0, r2, r3
 800805e:	4770      	bx	lr

08008060 <nan>:
 8008060:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008068 <nan+0x8>
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	00000000 	.word	0x00000000
 800806c:	7ff80000 	.word	0x7ff80000

08008070 <__ieee754_asin>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	ec55 4b10 	vmov	r4, r5, d0
 8008078:	4bc7      	ldr	r3, [pc, #796]	@ (8008398 <__ieee754_asin+0x328>)
 800807a:	b087      	sub	sp, #28
 800807c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008080:	429e      	cmp	r6, r3
 8008082:	9501      	str	r5, [sp, #4]
 8008084:	d92d      	bls.n	80080e2 <__ieee754_asin+0x72>
 8008086:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800808a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800808e:	4326      	orrs	r6, r4
 8008090:	d116      	bne.n	80080c0 <__ieee754_asin+0x50>
 8008092:	a3a7      	add	r3, pc, #668	@ (adr r3, 8008330 <__ieee754_asin+0x2c0>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 fa2c 	bl	80004f8 <__aeabi_dmul>
 80080a0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8008338 <__ieee754_asin+0x2c8>)
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	4606      	mov	r6, r0
 80080a8:	460f      	mov	r7, r1
 80080aa:	4620      	mov	r0, r4
 80080ac:	4629      	mov	r1, r5
 80080ae:	f7f8 fa23 	bl	80004f8 <__aeabi_dmul>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4630      	mov	r0, r6
 80080b8:	4639      	mov	r1, r7
 80080ba:	f7f8 f867 	bl	800018c <__adddf3>
 80080be:	e009      	b.n	80080d4 <__ieee754_asin+0x64>
 80080c0:	4622      	mov	r2, r4
 80080c2:	462b      	mov	r3, r5
 80080c4:	4620      	mov	r0, r4
 80080c6:	4629      	mov	r1, r5
 80080c8:	f7f8 f85e 	bl	8000188 <__aeabi_dsub>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	f7f8 fb3c 	bl	800074c <__aeabi_ddiv>
 80080d4:	4604      	mov	r4, r0
 80080d6:	460d      	mov	r5, r1
 80080d8:	ec45 4b10 	vmov	d0, r4, r5
 80080dc:	b007      	add	sp, #28
 80080de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e2:	4bae      	ldr	r3, [pc, #696]	@ (800839c <__ieee754_asin+0x32c>)
 80080e4:	429e      	cmp	r6, r3
 80080e6:	d810      	bhi.n	800810a <__ieee754_asin+0x9a>
 80080e8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80080ec:	f080 80ad 	bcs.w	800824a <__ieee754_asin+0x1da>
 80080f0:	a393      	add	r3, pc, #588	@ (adr r3, 8008340 <__ieee754_asin+0x2d0>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 f847 	bl	800018c <__adddf3>
 80080fe:	4ba8      	ldr	r3, [pc, #672]	@ (80083a0 <__ieee754_asin+0x330>)
 8008100:	2200      	movs	r2, #0
 8008102:	f7f8 fc89 	bl	8000a18 <__aeabi_dcmpgt>
 8008106:	2800      	cmp	r0, #0
 8008108:	d1e6      	bne.n	80080d8 <__ieee754_asin+0x68>
 800810a:	ec45 4b10 	vmov	d0, r4, r5
 800810e:	f7ff ff9f 	bl	8008050 <fabs>
 8008112:	49a3      	ldr	r1, [pc, #652]	@ (80083a0 <__ieee754_asin+0x330>)
 8008114:	ec53 2b10 	vmov	r2, r3, d0
 8008118:	2000      	movs	r0, #0
 800811a:	f7f8 f835 	bl	8000188 <__aeabi_dsub>
 800811e:	4ba1      	ldr	r3, [pc, #644]	@ (80083a4 <__ieee754_asin+0x334>)
 8008120:	2200      	movs	r2, #0
 8008122:	f7f8 f9e9 	bl	80004f8 <__aeabi_dmul>
 8008126:	a388      	add	r3, pc, #544	@ (adr r3, 8008348 <__ieee754_asin+0x2d8>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	4604      	mov	r4, r0
 800812e:	460d      	mov	r5, r1
 8008130:	f7f8 f9e2 	bl	80004f8 <__aeabi_dmul>
 8008134:	a386      	add	r3, pc, #536	@ (adr r3, 8008350 <__ieee754_asin+0x2e0>)
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	f7f8 f827 	bl	800018c <__adddf3>
 800813e:	4622      	mov	r2, r4
 8008140:	462b      	mov	r3, r5
 8008142:	f7f8 f9d9 	bl	80004f8 <__aeabi_dmul>
 8008146:	a384      	add	r3, pc, #528	@ (adr r3, 8008358 <__ieee754_asin+0x2e8>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f7f8 f81c 	bl	8000188 <__aeabi_dsub>
 8008150:	4622      	mov	r2, r4
 8008152:	462b      	mov	r3, r5
 8008154:	f7f8 f9d0 	bl	80004f8 <__aeabi_dmul>
 8008158:	a381      	add	r3, pc, #516	@ (adr r3, 8008360 <__ieee754_asin+0x2f0>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f7f8 f815 	bl	800018c <__adddf3>
 8008162:	4622      	mov	r2, r4
 8008164:	462b      	mov	r3, r5
 8008166:	f7f8 f9c7 	bl	80004f8 <__aeabi_dmul>
 800816a:	a37f      	add	r3, pc, #508	@ (adr r3, 8008368 <__ieee754_asin+0x2f8>)
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	f7f8 f80a 	bl	8000188 <__aeabi_dsub>
 8008174:	4622      	mov	r2, r4
 8008176:	462b      	mov	r3, r5
 8008178:	f7f8 f9be 	bl	80004f8 <__aeabi_dmul>
 800817c:	a37c      	add	r3, pc, #496	@ (adr r3, 8008370 <__ieee754_asin+0x300>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	f7f8 f803 	bl	800018c <__adddf3>
 8008186:	4622      	mov	r2, r4
 8008188:	462b      	mov	r3, r5
 800818a:	f7f8 f9b5 	bl	80004f8 <__aeabi_dmul>
 800818e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008378 <__ieee754_asin+0x308>)
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008198:	4620      	mov	r0, r4
 800819a:	4629      	mov	r1, r5
 800819c:	f7f8 f9ac 	bl	80004f8 <__aeabi_dmul>
 80081a0:	a377      	add	r3, pc, #476	@ (adr r3, 8008380 <__ieee754_asin+0x310>)
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f7f7 ffef 	bl	8000188 <__aeabi_dsub>
 80081aa:	4622      	mov	r2, r4
 80081ac:	462b      	mov	r3, r5
 80081ae:	f7f8 f9a3 	bl	80004f8 <__aeabi_dmul>
 80081b2:	a375      	add	r3, pc, #468	@ (adr r3, 8008388 <__ieee754_asin+0x318>)
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f7f7 ffe8 	bl	800018c <__adddf3>
 80081bc:	4622      	mov	r2, r4
 80081be:	462b      	mov	r3, r5
 80081c0:	f7f8 f99a 	bl	80004f8 <__aeabi_dmul>
 80081c4:	a372      	add	r3, pc, #456	@ (adr r3, 8008390 <__ieee754_asin+0x320>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	f7f7 ffdd 	bl	8000188 <__aeabi_dsub>
 80081ce:	4622      	mov	r2, r4
 80081d0:	462b      	mov	r3, r5
 80081d2:	f7f8 f991 	bl	80004f8 <__aeabi_dmul>
 80081d6:	4b72      	ldr	r3, [pc, #456]	@ (80083a0 <__ieee754_asin+0x330>)
 80081d8:	2200      	movs	r2, #0
 80081da:	f7f7 ffd7 	bl	800018c <__adddf3>
 80081de:	ec45 4b10 	vmov	d0, r4, r5
 80081e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081e6:	f000 f947 	bl	8008478 <__ieee754_sqrt>
 80081ea:	4b6f      	ldr	r3, [pc, #444]	@ (80083a8 <__ieee754_asin+0x338>)
 80081ec:	429e      	cmp	r6, r3
 80081ee:	ec5b ab10 	vmov	sl, fp, d0
 80081f2:	f240 80db 	bls.w	80083ac <__ieee754_asin+0x33c>
 80081f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fe:	f7f8 faa5 	bl	800074c <__aeabi_ddiv>
 8008202:	4652      	mov	r2, sl
 8008204:	465b      	mov	r3, fp
 8008206:	f7f8 f977 	bl	80004f8 <__aeabi_dmul>
 800820a:	4652      	mov	r2, sl
 800820c:	465b      	mov	r3, fp
 800820e:	f7f7 ffbd 	bl	800018c <__adddf3>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	f7f7 ffb9 	bl	800018c <__adddf3>
 800821a:	a347      	add	r3, pc, #284	@ (adr r3, 8008338 <__ieee754_asin+0x2c8>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f7 ffb2 	bl	8000188 <__aeabi_dsub>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	a141      	add	r1, pc, #260	@ (adr r1, 8008330 <__ieee754_asin+0x2c0>)
 800822a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800822e:	f7f7 ffab 	bl	8000188 <__aeabi_dsub>
 8008232:	9b01      	ldr	r3, [sp, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	bfdc      	itt	le
 8008238:	4602      	movle	r2, r0
 800823a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800823e:	4604      	mov	r4, r0
 8008240:	460d      	mov	r5, r1
 8008242:	bfdc      	itt	le
 8008244:	4614      	movle	r4, r2
 8008246:	461d      	movle	r5, r3
 8008248:	e746      	b.n	80080d8 <__ieee754_asin+0x68>
 800824a:	4622      	mov	r2, r4
 800824c:	462b      	mov	r3, r5
 800824e:	4620      	mov	r0, r4
 8008250:	4629      	mov	r1, r5
 8008252:	f7f8 f951 	bl	80004f8 <__aeabi_dmul>
 8008256:	a33c      	add	r3, pc, #240	@ (adr r3, 8008348 <__ieee754_asin+0x2d8>)
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	4606      	mov	r6, r0
 800825e:	460f      	mov	r7, r1
 8008260:	f7f8 f94a 	bl	80004f8 <__aeabi_dmul>
 8008264:	a33a      	add	r3, pc, #232	@ (adr r3, 8008350 <__ieee754_asin+0x2e0>)
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f7f7 ff8f 	bl	800018c <__adddf3>
 800826e:	4632      	mov	r2, r6
 8008270:	463b      	mov	r3, r7
 8008272:	f7f8 f941 	bl	80004f8 <__aeabi_dmul>
 8008276:	a338      	add	r3, pc, #224	@ (adr r3, 8008358 <__ieee754_asin+0x2e8>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f7f7 ff84 	bl	8000188 <__aeabi_dsub>
 8008280:	4632      	mov	r2, r6
 8008282:	463b      	mov	r3, r7
 8008284:	f7f8 f938 	bl	80004f8 <__aeabi_dmul>
 8008288:	a335      	add	r3, pc, #212	@ (adr r3, 8008360 <__ieee754_asin+0x2f0>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f7 ff7d 	bl	800018c <__adddf3>
 8008292:	4632      	mov	r2, r6
 8008294:	463b      	mov	r3, r7
 8008296:	f7f8 f92f 	bl	80004f8 <__aeabi_dmul>
 800829a:	a333      	add	r3, pc, #204	@ (adr r3, 8008368 <__ieee754_asin+0x2f8>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f7f7 ff72 	bl	8000188 <__aeabi_dsub>
 80082a4:	4632      	mov	r2, r6
 80082a6:	463b      	mov	r3, r7
 80082a8:	f7f8 f926 	bl	80004f8 <__aeabi_dmul>
 80082ac:	a330      	add	r3, pc, #192	@ (adr r3, 8008370 <__ieee754_asin+0x300>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f7 ff6b 	bl	800018c <__adddf3>
 80082b6:	4632      	mov	r2, r6
 80082b8:	463b      	mov	r3, r7
 80082ba:	f7f8 f91d 	bl	80004f8 <__aeabi_dmul>
 80082be:	a32e      	add	r3, pc, #184	@ (adr r3, 8008378 <__ieee754_asin+0x308>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	4680      	mov	r8, r0
 80082c6:	4689      	mov	r9, r1
 80082c8:	4630      	mov	r0, r6
 80082ca:	4639      	mov	r1, r7
 80082cc:	f7f8 f914 	bl	80004f8 <__aeabi_dmul>
 80082d0:	a32b      	add	r3, pc, #172	@ (adr r3, 8008380 <__ieee754_asin+0x310>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f7f7 ff57 	bl	8000188 <__aeabi_dsub>
 80082da:	4632      	mov	r2, r6
 80082dc:	463b      	mov	r3, r7
 80082de:	f7f8 f90b 	bl	80004f8 <__aeabi_dmul>
 80082e2:	a329      	add	r3, pc, #164	@ (adr r3, 8008388 <__ieee754_asin+0x318>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f7f7 ff50 	bl	800018c <__adddf3>
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	f7f8 f902 	bl	80004f8 <__aeabi_dmul>
 80082f4:	a326      	add	r3, pc, #152	@ (adr r3, 8008390 <__ieee754_asin+0x320>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f7 ff45 	bl	8000188 <__aeabi_dsub>
 80082fe:	4632      	mov	r2, r6
 8008300:	463b      	mov	r3, r7
 8008302:	f7f8 f8f9 	bl	80004f8 <__aeabi_dmul>
 8008306:	4b26      	ldr	r3, [pc, #152]	@ (80083a0 <__ieee754_asin+0x330>)
 8008308:	2200      	movs	r2, #0
 800830a:	f7f7 ff3f 	bl	800018c <__adddf3>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	4640      	mov	r0, r8
 8008314:	4649      	mov	r1, r9
 8008316:	f7f8 fa19 	bl	800074c <__aeabi_ddiv>
 800831a:	4622      	mov	r2, r4
 800831c:	462b      	mov	r3, r5
 800831e:	f7f8 f8eb 	bl	80004f8 <__aeabi_dmul>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4620      	mov	r0, r4
 8008328:	4629      	mov	r1, r5
 800832a:	e6c6      	b.n	80080ba <__ieee754_asin+0x4a>
 800832c:	f3af 8000 	nop.w
 8008330:	54442d18 	.word	0x54442d18
 8008334:	3ff921fb 	.word	0x3ff921fb
 8008338:	33145c07 	.word	0x33145c07
 800833c:	3c91a626 	.word	0x3c91a626
 8008340:	8800759c 	.word	0x8800759c
 8008344:	7e37e43c 	.word	0x7e37e43c
 8008348:	0dfdf709 	.word	0x0dfdf709
 800834c:	3f023de1 	.word	0x3f023de1
 8008350:	7501b288 	.word	0x7501b288
 8008354:	3f49efe0 	.word	0x3f49efe0
 8008358:	b5688f3b 	.word	0xb5688f3b
 800835c:	3fa48228 	.word	0x3fa48228
 8008360:	0e884455 	.word	0x0e884455
 8008364:	3fc9c155 	.word	0x3fc9c155
 8008368:	03eb6f7d 	.word	0x03eb6f7d
 800836c:	3fd4d612 	.word	0x3fd4d612
 8008370:	55555555 	.word	0x55555555
 8008374:	3fc55555 	.word	0x3fc55555
 8008378:	b12e9282 	.word	0xb12e9282
 800837c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008380:	1b8d0159 	.word	0x1b8d0159
 8008384:	3fe6066c 	.word	0x3fe6066c
 8008388:	9c598ac8 	.word	0x9c598ac8
 800838c:	40002ae5 	.word	0x40002ae5
 8008390:	1c8a2d4b 	.word	0x1c8a2d4b
 8008394:	40033a27 	.word	0x40033a27
 8008398:	3fefffff 	.word	0x3fefffff
 800839c:	3fdfffff 	.word	0x3fdfffff
 80083a0:	3ff00000 	.word	0x3ff00000
 80083a4:	3fe00000 	.word	0x3fe00000
 80083a8:	3fef3332 	.word	0x3fef3332
 80083ac:	4652      	mov	r2, sl
 80083ae:	465b      	mov	r3, fp
 80083b0:	4650      	mov	r0, sl
 80083b2:	4659      	mov	r1, fp
 80083b4:	f7f7 feea 	bl	800018c <__adddf3>
 80083b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083bc:	4606      	mov	r6, r0
 80083be:	460f      	mov	r7, r1
 80083c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083c4:	f7f8 f9c2 	bl	800074c <__aeabi_ddiv>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4630      	mov	r0, r6
 80083ce:	4639      	mov	r1, r7
 80083d0:	f7f8 f892 	bl	80004f8 <__aeabi_dmul>
 80083d4:	f04f 0800 	mov.w	r8, #0
 80083d8:	4606      	mov	r6, r0
 80083da:	460f      	mov	r7, r1
 80083dc:	4642      	mov	r2, r8
 80083de:	465b      	mov	r3, fp
 80083e0:	4640      	mov	r0, r8
 80083e2:	4659      	mov	r1, fp
 80083e4:	f7f8 f888 	bl	80004f8 <__aeabi_dmul>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4620      	mov	r0, r4
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7f7 feca 	bl	8000188 <__aeabi_dsub>
 80083f4:	4642      	mov	r2, r8
 80083f6:	4604      	mov	r4, r0
 80083f8:	460d      	mov	r5, r1
 80083fa:	465b      	mov	r3, fp
 80083fc:	4650      	mov	r0, sl
 80083fe:	4659      	mov	r1, fp
 8008400:	f7f7 fec4 	bl	800018c <__adddf3>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4620      	mov	r0, r4
 800840a:	4629      	mov	r1, r5
 800840c:	f7f8 f99e 	bl	800074c <__aeabi_ddiv>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	f7f7 feba 	bl	800018c <__adddf3>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	a112      	add	r1, pc, #72	@ (adr r1, 8008468 <__ieee754_asin+0x3f8>)
 800841e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008422:	f7f7 feb1 	bl	8000188 <__aeabi_dsub>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4630      	mov	r0, r6
 800842c:	4639      	mov	r1, r7
 800842e:	f7f7 feab 	bl	8000188 <__aeabi_dsub>
 8008432:	4642      	mov	r2, r8
 8008434:	4604      	mov	r4, r0
 8008436:	460d      	mov	r5, r1
 8008438:	465b      	mov	r3, fp
 800843a:	4640      	mov	r0, r8
 800843c:	4659      	mov	r1, fp
 800843e:	f7f7 fea5 	bl	800018c <__adddf3>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	a10a      	add	r1, pc, #40	@ (adr r1, 8008470 <__ieee754_asin+0x400>)
 8008448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800844c:	f7f7 fe9c 	bl	8000188 <__aeabi_dsub>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4620      	mov	r0, r4
 8008456:	4629      	mov	r1, r5
 8008458:	f7f7 fe96 	bl	8000188 <__aeabi_dsub>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	a103      	add	r1, pc, #12	@ (adr r1, 8008470 <__ieee754_asin+0x400>)
 8008462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008466:	e6e2      	b.n	800822e <__ieee754_asin+0x1be>
 8008468:	33145c07 	.word	0x33145c07
 800846c:	3c91a626 	.word	0x3c91a626
 8008470:	54442d18 	.word	0x54442d18
 8008474:	3fe921fb 	.word	0x3fe921fb

08008478 <__ieee754_sqrt>:
 8008478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	4a66      	ldr	r2, [pc, #408]	@ (8008618 <__ieee754_sqrt+0x1a0>)
 800847e:	ec55 4b10 	vmov	r4, r5, d0
 8008482:	43aa      	bics	r2, r5
 8008484:	462b      	mov	r3, r5
 8008486:	4621      	mov	r1, r4
 8008488:	d110      	bne.n	80084ac <__ieee754_sqrt+0x34>
 800848a:	4622      	mov	r2, r4
 800848c:	4620      	mov	r0, r4
 800848e:	4629      	mov	r1, r5
 8008490:	f7f8 f832 	bl	80004f8 <__aeabi_dmul>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4620      	mov	r0, r4
 800849a:	4629      	mov	r1, r5
 800849c:	f7f7 fe76 	bl	800018c <__adddf3>
 80084a0:	4604      	mov	r4, r0
 80084a2:	460d      	mov	r5, r1
 80084a4:	ec45 4b10 	vmov	d0, r4, r5
 80084a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	dc0e      	bgt.n	80084ce <__ieee754_sqrt+0x56>
 80084b0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80084b4:	4322      	orrs	r2, r4
 80084b6:	d0f5      	beq.n	80084a4 <__ieee754_sqrt+0x2c>
 80084b8:	b19d      	cbz	r5, 80084e2 <__ieee754_sqrt+0x6a>
 80084ba:	4622      	mov	r2, r4
 80084bc:	4620      	mov	r0, r4
 80084be:	4629      	mov	r1, r5
 80084c0:	f7f7 fe62 	bl	8000188 <__aeabi_dsub>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	f7f8 f940 	bl	800074c <__aeabi_ddiv>
 80084cc:	e7e8      	b.n	80084a0 <__ieee754_sqrt+0x28>
 80084ce:	152a      	asrs	r2, r5, #20
 80084d0:	d115      	bne.n	80084fe <__ieee754_sqrt+0x86>
 80084d2:	2000      	movs	r0, #0
 80084d4:	e009      	b.n	80084ea <__ieee754_sqrt+0x72>
 80084d6:	0acb      	lsrs	r3, r1, #11
 80084d8:	3a15      	subs	r2, #21
 80084da:	0549      	lsls	r1, r1, #21
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0fa      	beq.n	80084d6 <__ieee754_sqrt+0x5e>
 80084e0:	e7f7      	b.n	80084d2 <__ieee754_sqrt+0x5a>
 80084e2:	462a      	mov	r2, r5
 80084e4:	e7fa      	b.n	80084dc <__ieee754_sqrt+0x64>
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	3001      	adds	r0, #1
 80084ea:	02dc      	lsls	r4, r3, #11
 80084ec:	d5fb      	bpl.n	80084e6 <__ieee754_sqrt+0x6e>
 80084ee:	1e44      	subs	r4, r0, #1
 80084f0:	1b12      	subs	r2, r2, r4
 80084f2:	f1c0 0420 	rsb	r4, r0, #32
 80084f6:	fa21 f404 	lsr.w	r4, r1, r4
 80084fa:	4323      	orrs	r3, r4
 80084fc:	4081      	lsls	r1, r0
 80084fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008502:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800850a:	07d2      	lsls	r2, r2, #31
 800850c:	bf5c      	itt	pl
 800850e:	005b      	lslpl	r3, r3, #1
 8008510:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008514:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008518:	bf58      	it	pl
 800851a:	0049      	lslpl	r1, r1, #1
 800851c:	2600      	movs	r6, #0
 800851e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008522:	107f      	asrs	r7, r7, #1
 8008524:	0049      	lsls	r1, r1, #1
 8008526:	2016      	movs	r0, #22
 8008528:	4632      	mov	r2, r6
 800852a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800852e:	1915      	adds	r5, r2, r4
 8008530:	429d      	cmp	r5, r3
 8008532:	bfde      	ittt	le
 8008534:	192a      	addle	r2, r5, r4
 8008536:	1b5b      	suble	r3, r3, r5
 8008538:	1936      	addle	r6, r6, r4
 800853a:	0fcd      	lsrs	r5, r1, #31
 800853c:	3801      	subs	r0, #1
 800853e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008542:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008546:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800854a:	d1f0      	bne.n	800852e <__ieee754_sqrt+0xb6>
 800854c:	4605      	mov	r5, r0
 800854e:	2420      	movs	r4, #32
 8008550:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008554:	4293      	cmp	r3, r2
 8008556:	eb0c 0e00 	add.w	lr, ip, r0
 800855a:	dc02      	bgt.n	8008562 <__ieee754_sqrt+0xea>
 800855c:	d113      	bne.n	8008586 <__ieee754_sqrt+0x10e>
 800855e:	458e      	cmp	lr, r1
 8008560:	d811      	bhi.n	8008586 <__ieee754_sqrt+0x10e>
 8008562:	f1be 0f00 	cmp.w	lr, #0
 8008566:	eb0e 000c 	add.w	r0, lr, ip
 800856a:	da3f      	bge.n	80085ec <__ieee754_sqrt+0x174>
 800856c:	2800      	cmp	r0, #0
 800856e:	db3d      	blt.n	80085ec <__ieee754_sqrt+0x174>
 8008570:	f102 0801 	add.w	r8, r2, #1
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	458e      	cmp	lr, r1
 8008578:	bf88      	it	hi
 800857a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800857e:	eba1 010e 	sub.w	r1, r1, lr
 8008582:	4465      	add	r5, ip
 8008584:	4642      	mov	r2, r8
 8008586:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800858a:	3c01      	subs	r4, #1
 800858c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008590:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008594:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008598:	d1dc      	bne.n	8008554 <__ieee754_sqrt+0xdc>
 800859a:	4319      	orrs	r1, r3
 800859c:	d01b      	beq.n	80085d6 <__ieee754_sqrt+0x15e>
 800859e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800861c <__ieee754_sqrt+0x1a4>
 80085a2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008620 <__ieee754_sqrt+0x1a8>
 80085a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80085aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80085ae:	f7f7 fdeb 	bl	8000188 <__aeabi_dsub>
 80085b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f8 fa17 	bl	80009f0 <__aeabi_dcmple>
 80085c2:	b140      	cbz	r0, 80085d6 <__ieee754_sqrt+0x15e>
 80085c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80085c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80085cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80085d0:	d10e      	bne.n	80085f0 <__ieee754_sqrt+0x178>
 80085d2:	3601      	adds	r6, #1
 80085d4:	4625      	mov	r5, r4
 80085d6:	1073      	asrs	r3, r6, #1
 80085d8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80085dc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80085e0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80085e4:	086b      	lsrs	r3, r5, #1
 80085e6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80085ea:	e759      	b.n	80084a0 <__ieee754_sqrt+0x28>
 80085ec:	4690      	mov	r8, r2
 80085ee:	e7c1      	b.n	8008574 <__ieee754_sqrt+0xfc>
 80085f0:	f7f7 fdcc 	bl	800018c <__adddf3>
 80085f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4640      	mov	r0, r8
 80085fe:	4649      	mov	r1, r9
 8008600:	f7f8 f9ec 	bl	80009dc <__aeabi_dcmplt>
 8008604:	b120      	cbz	r0, 8008610 <__ieee754_sqrt+0x198>
 8008606:	1cab      	adds	r3, r5, #2
 8008608:	bf08      	it	eq
 800860a:	3601      	addeq	r6, #1
 800860c:	3502      	adds	r5, #2
 800860e:	e7e2      	b.n	80085d6 <__ieee754_sqrt+0x15e>
 8008610:	1c6b      	adds	r3, r5, #1
 8008612:	f023 0501 	bic.w	r5, r3, #1
 8008616:	e7de      	b.n	80085d6 <__ieee754_sqrt+0x15e>
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	080087b8 	.word	0x080087b8
 8008620:	080087b0 	.word	0x080087b0

08008624 <_init>:
 8008624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008626:	bf00      	nop
 8008628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800862a:	bc08      	pop	{r3}
 800862c:	469e      	mov	lr, r3
 800862e:	4770      	bx	lr

08008630 <_fini>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	bf00      	nop
 8008634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008636:	bc08      	pop	{r3}
 8008638:	469e      	mov	lr, r3
 800863a:	4770      	bx	lr
